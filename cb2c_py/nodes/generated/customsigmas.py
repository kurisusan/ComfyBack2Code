
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for CustomSigmas
class CustomSigmasInputs(InputSlots):
    sigmas_string: Slot[str]
    interpolate_to_steps: Slot[int]
    def __init__(self, node: "Node"):
        self.sigmas_string = Slot[str](node, "sigmas_string", 'STRING')
        self.interpolate_to_steps = Slot[int](node, "interpolate_to_steps", 'INT')

class CustomSigmasOutputs(OutputSlots):
    sigmas: Slot[Any]
    def __init__(self, node: "Node"):
        self.sigmas = Slot[Any](node, "SIGMAS", 'SIGMAS')

class CustomSigmas(Node[CustomSigmasInputs, CustomSigmasOutputs]):
    """
    Original name: CustomSigmas
    Category: KJNodes/noise
    
Creates a sigmas tensor from a string of comma separated values.  
Examples: 
   
Nvidia's optimized AYS 10 step schedule for SD 1.5:  
14.615, 6.475, 3.861, 2.697, 1.886, 1.396, 0.963, 0.652, 0.399, 0.152, 0.029  
SDXL:   
14.615, 6.315, 3.771, 2.181, 1.342, 0.862, 0.555, 0.380, 0.234, 0.113, 0.029  
SVD:  
700.00, 54.5, 15.886, 7.977, 4.248, 1.789, 0.981, 0.403, 0.173, 0.034, 0.002  


    Inputs:
        - sigmas_string (str) (default: '14.615, 6.475, 3.861, 2.697, 1.886, 1.396, 0.963, 0.652, 0.399, 0.152, 0.029')
        - interpolate_to_steps (int) (default: 10)

    Outputs:
        - sigmas (Any)
    """
    _original_name: str = 'CustomSigmas'

    def __init__(self, sigmas_string: str = '14.615, 6.475, 3.861, 2.697, 1.886, 1.396, 0.963, 0.652, 0.399, 0.152, 0.029', interpolate_to_steps: int = 10):
        super().__init__(**{"sigmas_string": sigmas_string, "interpolate_to_steps": interpolate_to_steps})
        self.inputs = CustomSigmasInputs(self)
        self.outputs = CustomSigmasOutputs(self)
