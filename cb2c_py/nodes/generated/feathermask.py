
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for FeatherMask
class FeatherMaskInputs(InputSlots):
    mask: Slot[Any]
    left: Slot[int]
    top: Slot[int]
    right: Slot[int]
    bottom: Slot[int]
    def __init__(self, node: "Node"):
        self.mask = Slot[Any](node, "mask", 'MASK')
        self.left = Slot[int](node, "left", 'INT')
        self.top = Slot[int](node, "top", 'INT')
        self.right = Slot[int](node, "right", 'INT')
        self.bottom = Slot[int](node, "bottom", 'INT')

class FeatherMaskOutputs(OutputSlots):
    mask: Slot[Any]
    def __init__(self, node: "Node"):
        self.mask = Slot[Any](node, "MASK", 'MASK')

class FeatherMask(Node[FeatherMaskInputs, FeatherMaskOutputs]):
    """
    Original name: FeatherMask
    No description available.
    """
    _original_name: str = 'FeatherMask'

    def __init__(self, mask: Slot[Any], left: int = 0, top: int = 0, right: int = 0, bottom: int = 0):
        super().__init__(**{"mask": mask, "left": left, "top": top, "right": right, "bottom": bottom})
        self.inputs = FeatherMaskInputs(self)
        self.outputs = FeatherMaskOutputs(self)
