
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node

class HunyuanVideoEncodeKeyframesToCond(Node):
    """
    Original name: HunyuanVideoEncodeKeyframesToCond
    No description available.
    """
    _inputs = {
    "model": [
        "MODEL"
    ],
    "positive": [
        "CONDITIONING"
    ],
    "vae": [
        "VAE"
    ],
    "start_frame": [
        "IMAGE"
    ],
    "end_frame": [
        "IMAGE"
    ],
    "num_frames": [
        "INT",
        {
            "default": 33,
            "min": 2,
            "max": 4096,
            "step": 1
        }
    ],
    "tile_size": [
        "INT",
        {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 64
        }
    ],
    "overlap": [
        "INT",
        {
            "default": 64,
            "min": 0,
            "max": 4096,
            "step": 32
        }
    ],
    "temporal_size": [
        "INT",
        {
            "default": 64,
            "min": 8,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to encode at a time."
        }
    ],
    "temporal_overlap": [
        "INT",
        {
            "default": 8,
            "min": 4,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to overlap."
        }
    ]
}
    _outputs = [
    "MODEL",
    "CONDITIONING",
    "CONDITIONING",
    "LATENT"
]
    _original_name = "HunyuanVideoEncodeKeyframesToCond"

    def __init__(self, model, positive, vae, start_frame, end_frame, num_frames=33, tile_size=512, overlap=64, temporal_size=64, temporal_overlap=8):
        super().__init__(model=model, positive=positive, vae=vae, start_frame=start_frame, end_frame=end_frame, num_frames=num_frames, tile_size=tile_size, overlap=overlap, temporal_size=temporal_size, temporal_overlap=temporal_overlap)

    @classmethod
    def get_inputs(cls):
        return cls._inputs

    @classmethod
    def get_outputs(cls):
        return cls._outputs
