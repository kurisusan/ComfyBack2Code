
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for GetMaskSizeAndCount
class GetMaskSizeAndCountInputs(InputSlots):
    mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "mask", 'MASK')

class GetMaskSizeAndCountOutputs(OutputSlots):
    mask: Slot[Image]
    width: Slot[int]
    height: Slot[int]
    count: Slot[int]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "mask", 'MASK')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.count = Slot[int](node, "count", 'INT')

class GetMaskSizeAndCount(Node[GetMaskSizeAndCountInputs, GetMaskSizeAndCountOutputs]):
    """
    Original name: GetMaskSizeAndCount
    Category: KJNodes/masking
    
Returns the width, height and batch size of the mask,  
and passes it through unchanged.  



    Inputs:
        - mask (Image)

    Outputs:
        - mask (Image)
        - width (int)
        - height (int)
        - count (int)
    """
    _original_name: str = 'GetMaskSizeAndCount'

    def __init__(self, mask: Slot[Image]):
        super().__init__(**{"mask": mask})
        self.inputs = GetMaskSizeAndCountInputs(self)
        self.outputs = GetMaskSizeAndCountOutputs(self)
