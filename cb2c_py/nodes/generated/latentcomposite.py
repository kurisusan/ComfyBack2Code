
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for LatentComposite
class LatentCompositeInputs(InputSlots):
    samples_to: Slot[Latent]
    samples_from: Slot[Latent]
    x: Slot[int]
    y: Slot[int]
    feather: Slot[int]
    def __init__(self, node: "Node"):
        self.samples_to = Slot[Latent](node, "samples_to", 'LATENT')
        self.samples_from = Slot[Latent](node, "samples_from", 'LATENT')
        self.x = Slot[int](node, "x", 'INT')
        self.y = Slot[int](node, "y", 'INT')
        self.feather = Slot[int](node, "feather", 'INT')

class LatentCompositeOutputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class LatentComposite(Node[LatentCompositeInputs, LatentCompositeOutputs]):
    """
    Original name: LatentComposite
    No description available.
    """
    _original_name: str = 'LatentComposite'

    def __init__(self, samples_to: Slot[Latent], samples_from: Slot[Latent], x: int = 0, y: int = 0, feather: int = 0):
        super().__init__(**{"samples_to": samples_to, "samples_from": samples_from, "x": x, "y": y, "feather": feather})
        self.inputs = LatentCompositeInputs(self)
        self.outputs = LatentCompositeOutputs(self)
