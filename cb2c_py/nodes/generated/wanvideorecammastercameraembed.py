
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for WanVideoReCamMasterCameraEmbed
class WanVideoReCamMasterCameraEmbedInputs(InputSlots):
    camera_poses: Slot[Any]
    latents: Slot[Latent]
    def __init__(self, node: "Node"):
        self.camera_poses = Slot[Any](node, "camera_poses", 'CAMERAPOSES')
        self.latents = Slot[Latent](node, "latents", 'LATENT')

class WanVideoReCamMasterCameraEmbedOutputs(OutputSlots):
    camera_embeds: Slot[Any]
    camera_poses: Slot[Any]
    def __init__(self, node: "Node"):
        self.camera_embeds = Slot[Any](node, "camera_embeds", 'WANVIDIMAGE_EMBEDS')
        self.camera_poses = Slot[Any](node, "camera_poses", 'CAMERAPOSES')

class WanVideoReCamMasterCameraEmbed(Node[WanVideoReCamMasterCameraEmbedInputs, WanVideoReCamMasterCameraEmbedOutputs]):
    """
    Original name: WanVideoReCamMasterCameraEmbed
    Category: WanVideoWrapper
    https://github.com/KwaiVGI/ReCamMaster

    Inputs:
        - camera_poses (Any)
        - latents (Latent)
          source video

    Outputs:
        - camera_embeds (Any)
        - camera_poses (Any)
    """
    _original_name: str = 'WanVideoReCamMasterCameraEmbed'

    def __init__(self, camera_poses: Slot[Any], latents: Slot[Latent]):
        super().__init__(**{"camera_poses": camera_poses, "latents": latents})
        self.inputs = WanVideoReCamMasterCameraEmbedInputs(self)
        self.outputs = WanVideoReCamMasterCameraEmbedOutputs(self)
