
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for RoundMask
class RoundMaskInputs(InputSlots):
    mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "mask", 'MASK')

class RoundMaskOutputs(OutputSlots):
    mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "MASK", 'MASK')

class RoundMask(Node[RoundMaskInputs, RoundMaskOutputs]):
    """
    Original name: RoundMask
    Category: KJNodes/masking
    
Rounds the mask or batch of masks to a binary mask.  
<img src="https://github.com/kijai/ComfyUI-KJNodes/assets/40791699/52c85202-f74e-4b96-9dac-c8bda5ddcc40" width="300" height="250" alt="RoundMask example">



    Inputs:
        - mask (Image)

    Outputs:
        - mask (Image)
    """
    _original_name: str = 'RoundMask'

    def __init__(self, mask: Slot[Image]):
        super().__init__(**{"mask": mask})
        self.inputs = RoundMaskInputs(self)
        self.outputs = RoundMaskOutputs(self)
