
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for VHS_MergeImages
class VHS_MergeImagesInputs(InputSlots):
    images_A: Slot[Image]
    images_B: Slot[Image]
    merge_strategy: Slot[str]
    scale_method: Slot[str]
    crop: Slot[str]
    def __init__(self, node: "Node"):
        self.images_A = Slot[Image](node, "images_A", 'IMAGE')
        self.images_B = Slot[Image](node, "images_B", 'IMAGE')
        self.merge_strategy = Slot[str](node, "merge_strategy", ['match A', 'match B', 'match smaller', 'match larger'])
        self.scale_method = Slot[str](node, "scale_method", ['nearest-exact', 'bilinear', 'area', 'bicubic', 'bislerp'])
        self.crop = Slot[str](node, "crop", ['disabled', 'center'])

class VHS_MergeImagesOutputs(OutputSlots):
    image: Slot[Image]
    count: Slot[int]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')
        self.count = Slot[int](node, "count", 'INT')

class VHS_MergeImages(Node[VHS_MergeImagesInputs, VHS_MergeImagesOutputs]):
    """
    Original name: VHS_MergeImages
    Category: Video Helper Suite ðŸŽ¥ðŸ…¥ðŸ…—ðŸ…¢/image
    Merge Images ðŸŽ¥ðŸ…¥ðŸ…—ðŸ…¢<div style="font-size: 0.8em"><div id=VHS_shortdesc>Combine two groups of images into a single group of images</div></div><div style="font-size: 0.8em"><div vhs_title="Inputs" style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">Inputs: <div vhs_title="images_A" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">images_A: The first group of images</div></div><div vhs_title="images_B" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">images_B: The first group of images</div></div></div></div><div vhs_title="Outputs" style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">Outputs: <div vhs_title="IMAGE" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">IMAGE: The combined group of images</div></div><div vhs_title="count" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">count: The length of the combined group</div></div></div></div><div vhs_title="Widgets" style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">Widgets: <div vhs_title="merge_strategy" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">merge_strategy: Determines what the output resolution will be if input resolutions don't match<div style="font-size: 1em"><div vhs_title="match A" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">match A: Always use the resolution for A</div></div><div vhs_title="match B" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">match B: Always use the resolution for B</div></div><div vhs_title="match smaller" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">match smaller: Pick the smaller resolution by area</div></div><div vhs_title="match larger" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">match larger: Pick the larger resolution by area</div></div></div></div></div><div vhs_title="scale_method" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">scale_method: Determines what method to use if scaling is required</div></div><div vhs_title="crop" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">crop: When sizes don't match, should the resized image have it's aspect ratio changed, or be cropped to maintain aspect ratio</div></div></div></div></div>

    Inputs:
        - images_A (Image)
        - images_B (Image)
        - merge_strategy (str)
        - scale_method (str)
        - crop (str)

    Outputs:
        - image (Image)
        - count (int)
    """
    _original_name: str = 'VHS_MergeImages'

    def __init__(self, images_A: Slot[Image], images_B: Slot[Image], merge_strategy: str, scale_method: str, crop: str):
        super().__init__(**{"images_A": images_A, "images_B": images_B, "merge_strategy": merge_strategy, "scale_method": scale_method, "crop": crop})
        self.inputs = VHS_MergeImagesInputs(self)
        self.outputs = VHS_MergeImagesOutputs(self)
