
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for MaskFromRGBCMYBW_
class MaskFromRGBCMYBW_Inputs(InputSlots):
    image: Slot[Image]
    threshold_r: Slot[float]
    threshold_g: Slot[float]
    threshold_b: Slot[float]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.threshold_r = Slot[float](node, "threshold_r", 'FLOAT')
        self.threshold_g = Slot[float](node, "threshold_g", 'FLOAT')
        self.threshold_b = Slot[float](node, "threshold_b", 'FLOAT')

class MaskFromRGBCMYBW_Outputs(OutputSlots):
    red: Slot[Any]
    green: Slot[Any]
    blue: Slot[Any]
    cyan: Slot[Any]
    magenta: Slot[Any]
    yellow: Slot[Any]
    black: Slot[Any]
    white: Slot[Any]
    def __init__(self, node: "Node"):
        self.red = Slot[Any](node, "red", 'MASK')
        self.green = Slot[Any](node, "green", 'MASK')
        self.blue = Slot[Any](node, "blue", 'MASK')
        self.cyan = Slot[Any](node, "cyan", 'MASK')
        self.magenta = Slot[Any](node, "magenta", 'MASK')
        self.yellow = Slot[Any](node, "yellow", 'MASK')
        self.black = Slot[Any](node, "black", 'MASK')
        self.white = Slot[Any](node, "white", 'MASK')

class MaskFromRGBCMYBW_(Node[MaskFromRGBCMYBW_Inputs, MaskFromRGBCMYBW_Outputs]):
    """
    Original name: MaskFromRGBCMYBW+
    No description available.
    """
    _original_name: str = 'MaskFromRGBCMYBW+'

    def __init__(self, image: Slot[Image], threshold_r: float = 0.15, threshold_g: float = 0.15, threshold_b: float = 0.15):
        super().__init__(**{"image": image, "threshold_r": threshold_r, "threshold_g": threshold_g, "threshold_b": threshold_b})
        self.inputs = MaskFromRGBCMYBW_Inputs(self)
        self.outputs = MaskFromRGBCMYBW_Outputs(self)
