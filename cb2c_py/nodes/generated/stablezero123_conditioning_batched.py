
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for StableZero123_Conditioning_Batched
class StableZero123_Conditioning_BatchedInputs(InputSlots):
    clip_vision: Slot[Any]
    init_image: Slot[Image]
    vae: Slot[Vae]
    width: Slot[int]
    height: Slot[int]
    batch_size: Slot[int]
    elevation: Slot[float]
    azimuth: Slot[float]
    elevation_batch_increment: Slot[float]
    azimuth_batch_increment: Slot[float]
    def __init__(self, node: "Node"):
        self.clip_vision = Slot[Any](node, "clip_vision", 'CLIP_VISION')
        self.init_image = Slot[Image](node, "init_image", 'IMAGE')
        self.vae = Slot[Vae](node, "vae", 'VAE')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.batch_size = Slot[int](node, "batch_size", 'INT')
        self.elevation = Slot[float](node, "elevation", 'FLOAT')
        self.azimuth = Slot[float](node, "azimuth", 'FLOAT')
        self.elevation_batch_increment = Slot[float](node, "elevation_batch_increment", 'FLOAT')
        self.azimuth_batch_increment = Slot[float](node, "azimuth_batch_increment", 'FLOAT')

class StableZero123_Conditioning_BatchedOutputs(OutputSlots):
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')
        self.latent = Slot[Latent](node, "latent", 'LATENT')

class StableZero123_Conditioning_Batched(Node[StableZero123_Conditioning_BatchedInputs, StableZero123_Conditioning_BatchedOutputs]):
    """
    Original name: StableZero123_Conditioning_Batched
    No description available.
    """
    _original_name: str = 'StableZero123_Conditioning_Batched'

    def __init__(self, clip_vision: Slot[Any], init_image: Slot[Image], vae: Slot[Vae], width: int = 256, height: int = 256, batch_size: int = 1, elevation: float = 0.0, azimuth: float = 0.0, elevation_batch_increment: float = 0.0, azimuth_batch_increment: float = 0.0):
        super().__init__(**{"clip_vision": clip_vision, "init_image": init_image, "vae": vae, "width": width, "height": height, "batch_size": batch_size, "elevation": elevation, "azimuth": azimuth, "elevation_batch_increment": elevation_batch_increment, "azimuth_batch_increment": azimuth_batch_increment})
        self.inputs = StableZero123_Conditioning_BatchedInputs(self)
        self.outputs = StableZero123_Conditioning_BatchedOutputs(self)
