
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for Pikadditions
class PikadditionsInputs(InputSlots):
    video: Slot[Any]
    image: Slot[Image]
    prompt_text: Slot[str]
    negative_prompt: Slot[str]
    seed: Slot[int]
    def __init__(self, node: "Node"):
        self.video = Slot[Any](node, "video", 'VIDEO')
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.prompt_text = Slot[str](node, "prompt_text", 'STRING')
        self.negative_prompt = Slot[str](node, "negative_prompt", 'STRING')
        self.seed = Slot[int](node, "seed", 'INT')

class PikadditionsOutputs(OutputSlots):
    video: Slot[Any]
    def __init__(self, node: "Node"):
        self.video = Slot[Any](node, "VIDEO", 'VIDEO')

class Pikadditions(Node[PikadditionsInputs, PikadditionsOutputs]):
    """
    Original name: Pikadditions
    No description available.
    """
    _original_name: str = 'Pikadditions'

    def __init__(self, video: Slot[Any], image: Slot[Image], prompt_text: str = None, negative_prompt: str = None, seed: int = None):
        super().__init__(**{"video": video, "image": image, "prompt_text": prompt_text, "negative_prompt": negative_prompt, "seed": seed})
        self.inputs = PikadditionsInputs(self)
        self.outputs = PikadditionsOutputs(self)
