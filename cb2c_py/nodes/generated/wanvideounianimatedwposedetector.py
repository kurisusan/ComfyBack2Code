
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for WanVideoUniAnimateDWPoseDetector
class WanVideoUniAnimateDWPoseDetectorInputs(InputSlots):
    pose_images: Slot[Image]
    score_threshold: Slot[float]
    stick_width: Slot[int]
    draw_body: Slot[bool]
    body_keypoint_size: Slot[int]
    draw_feet: Slot[bool]
    draw_hands: Slot[bool]
    hand_keypoint_size: Slot[int]
    colorspace: Slot[str]
    handle_not_detected: Slot[str]
    draw_head: Slot[bool]
    def __init__(self, node: "Node"):
        self.pose_images = Slot[Image](node, "pose_images", 'IMAGE')
        self.score_threshold = Slot[float](node, "score_threshold", 'FLOAT')
        self.stick_width = Slot[int](node, "stick_width", 'INT')
        self.draw_body = Slot[bool](node, "draw_body", 'BOOLEAN')
        self.body_keypoint_size = Slot[int](node, "body_keypoint_size", 'INT')
        self.draw_feet = Slot[bool](node, "draw_feet", 'BOOLEAN')
        self.draw_hands = Slot[bool](node, "draw_hands", 'BOOLEAN')
        self.hand_keypoint_size = Slot[int](node, "hand_keypoint_size", 'INT')
        self.colorspace = Slot[str](node, "colorspace", ['RGB', 'BGR'])
        self.handle_not_detected = Slot[str](node, "handle_not_detected", ['empty', 'repeat'])
        self.draw_head = Slot[bool](node, "draw_head", 'BOOLEAN')

class WanVideoUniAnimateDWPoseDetectorOutputs(OutputSlots):
    poses: Slot[Image]
    reference_pose: Slot[Image]
    def __init__(self, node: "Node"):
        self.poses = Slot[Image](node, "poses", 'IMAGE')
        self.reference_pose = Slot[Image](node, "reference_pose", 'IMAGE')

class WanVideoUniAnimateDWPoseDetector(Node[WanVideoUniAnimateDWPoseDetectorInputs, WanVideoUniAnimateDWPoseDetectorOutputs]):
    """
    Original name: WanVideoUniAnimateDWPoseDetector
    Category: WanVideoWrapper
    

    Inputs:
        - pose_images (Image)
          Pose images
        - score_threshold (float) (default: 0.3)
          Score threshold for pose detection
        - stick_width (int) (default: 4)
          Stick width for drawing keypoints
        - draw_body (bool) (default: True)
          Draw body keypoints
        - body_keypoint_size (int) (default: 4)
          Body keypoint size
        - draw_feet (bool) (default: True)
          Draw feet keypoints
        - draw_hands (bool) (default: True)
          Draw hand keypoints
        - hand_keypoint_size (int) (default: 4)
          Hand keypoint size
        - colorspace (str)
          Color space for the output image
        - handle_not_detected (str) (default: 'empty')
          How to handle undetected poses, empty inserts black and repeat inserts previous detection
        - draw_head (bool) (default: True)
          Draw head keypoints

    Outputs:
        - poses (Image)
        - reference_pose (Image)
    """
    _original_name: str = 'WanVideoUniAnimateDWPoseDetector'

    def __init__(self, pose_images: Slot[Image], colorspace: str, score_threshold: float = 0.3, stick_width: int = 4, draw_body: bool = True, body_keypoint_size: int = 4, draw_feet: bool = True, draw_hands: bool = True, hand_keypoint_size: int = 4, handle_not_detected: str = 'empty', draw_head: bool = True):
        super().__init__(**{"pose_images": pose_images, "score_threshold": score_threshold, "stick_width": stick_width, "draw_body": draw_body, "body_keypoint_size": body_keypoint_size, "draw_feet": draw_feet, "draw_hands": draw_hands, "hand_keypoint_size": hand_keypoint_size, "colorspace": colorspace, "handle_not_detected": handle_not_detected, "draw_head": draw_head})
        self.inputs = WanVideoUniAnimateDWPoseDetectorInputs(self)
        self.outputs = WanVideoUniAnimateDWPoseDetectorOutputs(self)
