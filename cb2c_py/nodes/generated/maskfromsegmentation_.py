
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for MaskFromSegmentation_
class MaskFromSegmentation_Inputs(InputSlots):
    image: Slot[Image]
    segments: Slot[int]
    remove_isolated_pixels: Slot[int]
    remove_small_masks: Slot[float]
    fill_holes: Slot[bool]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.segments = Slot[int](node, "segments", 'INT')
        self.remove_isolated_pixels = Slot[int](node, "remove_isolated_pixels", 'INT')
        self.remove_small_masks = Slot[float](node, "remove_small_masks", 'FLOAT')
        self.fill_holes = Slot[bool](node, "fill_holes", 'BOOLEAN')

class MaskFromSegmentation_Outputs(OutputSlots):
    mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "MASK", 'MASK')

class MaskFromSegmentation_(Node[MaskFromSegmentation_Inputs, MaskFromSegmentation_Outputs]):
    """
    Original name: MaskFromSegmentation+
    No description available.
    """
    _original_name: str = 'MaskFromSegmentation+'

    def __init__(self, image: Slot[Image], segments: int = 6, remove_isolated_pixels: int = 0, remove_small_masks: float = 0.0, fill_holes: bool = False):
        super().__init__(**{"image": image, "segments": segments, "remove_isolated_pixels": remove_isolated_pixels, "remove_small_masks": remove_small_masks, "fill_holes": fill_holes})
        self.inputs = MaskFromSegmentation_Inputs(self)
        self.outputs = MaskFromSegmentation_Outputs(self)
