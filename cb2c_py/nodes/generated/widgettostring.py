
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for WidgetToString
class WidgetToStringInputs(InputSlots):
    id: Slot[int]
    widget_name: Slot[str]
    return_all: Slot[bool]
    def __init__(self, node: "Node"):
        self.id = Slot[int](node, "id", 'INT')
        self.widget_name = Slot[str](node, "widget_name", 'STRING')
        self.return_all = Slot[bool](node, "return_all", 'BOOLEAN')

class WidgetToStringOutputs(OutputSlots):
    string: Slot[str]
    def __init__(self, node: "Node"):
        self.string = Slot[str](node, "STRING", 'STRING')

class WidgetToString(Node[WidgetToStringInputs, WidgetToStringOutputs]):
    """
    Original name: WidgetToString
    Category: KJNodes/text
    
Selects a node and it's specified widget and outputs the value as a string.  
If no node id or title is provided it will use the 'any_input' link and use that node.  
To see node id's, enable node id display from Manager badge menu.  
Alternatively you can search with the node title. Node titles ONLY exist if they  
are manually edited!  
The 'any_input' is required for making sure the node you want the value from exists in the workflow.


    Inputs:
        - id (int) (default: 0)
        - widget_name (str)
        - return_all (bool) (default: False)

    Outputs:
        - string (str)
    """
    _original_name: str = 'WidgetToString'

    def __init__(self, widget_name: str, id: int = 0, return_all: bool = False):
        super().__init__(**{"id": id, "widget_name": widget_name, "return_all": return_all})
        self.inputs = WidgetToStringInputs(self)
        self.outputs = WidgetToStringOutputs(self)
