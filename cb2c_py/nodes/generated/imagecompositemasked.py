
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for ImageCompositeMasked
class ImageCompositeMaskedInputs(InputSlots):
    destination: Slot[Image]
    source: Slot[Image]
    x: Slot[int]
    y: Slot[int]
    resize_source: Slot[bool]
    def __init__(self, node: "Node"):
        self.destination = Slot[Image](node, "destination", 'IMAGE')
        self.source = Slot[Image](node, "source", 'IMAGE')
        self.x = Slot[int](node, "x", 'INT')
        self.y = Slot[int](node, "y", 'INT')
        self.resize_source = Slot[bool](node, "resize_source", 'BOOLEAN')

class ImageCompositeMaskedOutputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class ImageCompositeMasked(Node[ImageCompositeMaskedInputs, ImageCompositeMaskedOutputs]):
    """
    Original name: ImageCompositeMasked
    No description available.
    """
    _original_name: str = 'ImageCompositeMasked'

    def __init__(self, destination: Slot[Image], source: Slot[Image], x: int = 0, y: int = 0, resize_source: bool = False):
        super().__init__(**{"destination": destination, "source": source, "x": x, "y": y, "resize_source": resize_source})
        self.inputs = ImageCompositeMaskedInputs(self)
        self.outputs = ImageCompositeMaskedOutputs(self)
