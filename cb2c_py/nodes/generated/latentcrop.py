
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for LatentCrop
class LatentCropInputs(InputSlots):
    samples: Slot[Latent]
    width: Slot[int]
    height: Slot[int]
    x: Slot[int]
    y: Slot[int]
    def __init__(self, node: "Node"):
        self.samples = Slot[Latent](node, "samples", 'LATENT')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.x = Slot[int](node, "x", 'INT')
        self.y = Slot[int](node, "y", 'INT')

class LatentCropOutputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class LatentCrop(Node[LatentCropInputs, LatentCropOutputs]):
    """
    Original name: LatentCrop
    Category: latent/transform
    

    Inputs:
        - samples (Latent)
        - width (int) (default: 512)
        - height (int) (default: 512)
        - x (int) (default: 0)
        - y (int) (default: 0)

    Outputs:
        - latent (Latent)
    """
    _original_name: str = 'LatentCrop'

    def __init__(self, samples: Slot[Latent], width: int = 512, height: int = 512, x: int = 0, y: int = 0):
        super().__init__(**{"samples": samples, "width": width, "height": height, "x": x, "y": y})
        self.inputs = LatentCropInputs(self)
        self.outputs = LatentCropOutputs(self)
