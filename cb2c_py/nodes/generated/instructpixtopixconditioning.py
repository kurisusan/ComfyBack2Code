
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for InstructPixToPixConditioning
class InstructPixToPixConditioningInputs(InputSlots):
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    vae: Slot[Vae]
    pixels: Slot[Image]
    def __init__(self, node: "Node"):
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')
        self.vae = Slot[Vae](node, "vae", 'VAE')
        self.pixels = Slot[Image](node, "pixels", 'IMAGE')

class InstructPixToPixConditioningOutputs(OutputSlots):
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')
        self.latent = Slot[Latent](node, "latent", 'LATENT')

class InstructPixToPixConditioning(Node[InstructPixToPixConditioningInputs, InstructPixToPixConditioningOutputs]):
    """
    Original name: InstructPixToPixConditioning
    Category: conditioning/instructpix2pix
    

    Inputs:
        - positive (Conditioning)
        - negative (Conditioning)
        - vae (Vae)
        - pixels (Image)

    Outputs:
        - positive (Conditioning)
        - negative (Conditioning)
        - latent (Latent)
    """
    _original_name: str = 'InstructPixToPixConditioning'

    def __init__(self, positive: Slot[Conditioning], negative: Slot[Conditioning], vae: Slot[Vae], pixels: Slot[Image]):
        super().__init__(**{"positive": positive, "negative": negative, "vae": vae, "pixels": pixels})
        self.inputs = InstructPixToPixConditioningInputs(self)
        self.outputs = InstructPixToPixConditioningOutputs(self)
