
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for UpperBodyTrackingFromPoseKps
class UpperBodyTrackingFromPoseKpsInputs(InputSlots):
    pose_kps: Slot[Any]
    id_include: Slot[str]
    Head_width_height: Slot[str]
    Neck_width_height: Slot[str]
    Shoulder_width_height: Slot[str]
    Torso_width_height: Slot[str]
    RArm_width_height: Slot[str]
    RForearm_width_height: Slot[str]
    LArm_width_height: Slot[str]
    LForearm_width_height: Slot[str]
    def __init__(self, node: "Node"):
        self.pose_kps = Slot[Any](node, "pose_kps", 'POSE_KEYPOINT')
        self.id_include = Slot[str](node, "id_include", 'STRING')
        self.Head_width_height = Slot[str](node, "Head_width_height", 'STRING')
        self.Neck_width_height = Slot[str](node, "Neck_width_height", 'STRING')
        self.Shoulder_width_height = Slot[str](node, "Shoulder_width_height", 'STRING')
        self.Torso_width_height = Slot[str](node, "Torso_width_height", 'STRING')
        self.RArm_width_height = Slot[str](node, "RArm_width_height", 'STRING')
        self.RForearm_width_height = Slot[str](node, "RForearm_width_height", 'STRING')
        self.LArm_width_height = Slot[str](node, "LArm_width_height", 'STRING')
        self.LForearm_width_height = Slot[str](node, "LForearm_width_height", 'STRING')

class UpperBodyTrackingFromPoseKpsOutputs(OutputSlots):
    tracking: Slot[Any]
    prompt: Slot[str]
    def __init__(self, node: "Node"):
        self.tracking = Slot[Any](node, "tracking", 'TRACKING')
        self.prompt = Slot[str](node, "prompt", 'STRING')

class UpperBodyTrackingFromPoseKps(Node[UpperBodyTrackingFromPoseKpsInputs, UpperBodyTrackingFromPoseKpsOutputs]):
    """
    Original name: UpperBodyTrackingFromPoseKps
    Category: ControlNet Preprocessors/Pose Keypoint Postprocess
    

    Inputs:
        - pose_kps (Any)
        - id_include (str) (default: '')
        - Head_width_height (str) (default: '256, 256')
        - Neck_width_height (str) (default: '100, 100')
        - Shoulder_width_height (str) (default: '')
        - Torso_width_height (str) (default: '350, 450')
        - RArm_width_height (str) (default: '128, 256')
        - RForearm_width_height (str) (default: '128, 256')
        - LArm_width_height (str) (default: '128, 256')
        - LForearm_width_height (str) (default: '128, 256')

    Outputs:
        - tracking (Any)
        - prompt (str)
    """
    _original_name: str = 'UpperBodyTrackingFromPoseKps'

    def __init__(self, pose_kps: Slot[Any], id_include: str = '', Head_width_height: str = '256, 256', Neck_width_height: str = '100, 100', Shoulder_width_height: str = '', Torso_width_height: str = '350, 450', RArm_width_height: str = '128, 256', RForearm_width_height: str = '128, 256', LArm_width_height: str = '128, 256', LForearm_width_height: str = '128, 256'):
        super().__init__(**{"pose_kps": pose_kps, "id_include": id_include, "Head_width_height": Head_width_height, "Neck_width_height": Neck_width_height, "Shoulder_width_height": Shoulder_width_height, "Torso_width_height": Torso_width_height, "RArm_width_height": RArm_width_height, "RForearm_width_height": RForearm_width_height, "LArm_width_height": LArm_width_height, "LForearm_width_height": LForearm_width_height})
        self.inputs = UpperBodyTrackingFromPoseKpsInputs(self)
        self.outputs = UpperBodyTrackingFromPoseKpsOutputs(self)
