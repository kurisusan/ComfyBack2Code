
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for BboxToInt
class BboxToIntInputs(InputSlots):
    bboxes: Slot[Any]
    index: Slot[int]
    def __init__(self, node: "Node"):
        self.bboxes = Slot[Any](node, "bboxes", 'BBOX')
        self.index = Slot[int](node, "index", 'INT')

class BboxToIntOutputs(OutputSlots):
    x_min: Slot[int]
    y_min: Slot[int]
    width: Slot[int]
    height: Slot[int]
    center_x: Slot[int]
    center_y: Slot[int]
    def __init__(self, node: "Node"):
        self.x_min = Slot[int](node, "x_min", 'INT')
        self.y_min = Slot[int](node, "y_min", 'INT')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.center_x = Slot[int](node, "center_x", 'INT')
        self.center_y = Slot[int](node, "center_y", 'INT')

class BboxToInt(Node[BboxToIntInputs, BboxToIntOutputs]):
    """
    Original name: BboxToInt
    Category: KJNodes/masking
    
Returns selected index from bounding box list as integers.


    Inputs:
        - bboxes (Any)
        - index (int) (default: 0)

    Outputs:
        - x_min (int)
        - y_min (int)
        - width (int)
        - height (int)
        - center_x (int)
        - center_y (int)
    """
    _original_name: str = 'BboxToInt'

    def __init__(self, bboxes: Slot[Any], index: int = 0):
        super().__init__(**{"bboxes": bboxes, "index": index})
        self.inputs = BboxToIntInputs(self)
        self.outputs = BboxToIntOutputs(self)
