
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for InsertImageBatchByIndexes
class InsertImageBatchByIndexesInputs(InputSlots):
    images: Slot[Image]
    images_to_insert: Slot[Image]
    insert_indexes: Slot[Any]
    def __init__(self, node: "Node"):
        self.images = Slot[Image](node, "images", 'IMAGE')
        self.images_to_insert = Slot[Image](node, "images_to_insert", 'IMAGE')
        self.insert_indexes = Slot[Any](node, "insert_indexes", 'INDEXES')

class InsertImageBatchByIndexesOutputs(OutputSlots):
    images_after_insert: Slot[Image]
    def __init__(self, node: "Node"):
        self.images_after_insert = Slot[Image](node, "images_after_insert", 'IMAGE')

class InsertImageBatchByIndexes(Node[InsertImageBatchByIndexesInputs, InsertImageBatchByIndexesOutputs]):
    """
    Original name: InsertImageBatchByIndexes
    Category: KJNodes/image
    
This node is designed to be use with node FilterZeroMasksAndCorrespondingImages
It inserts the images_to_insert into images according to insert_indexes

Returns:
    images_after_insert: updated original images with origonal sequence order


    Inputs:
        - images (Image)
        - images_to_insert (Image)
        - insert_indexes (Any)

    Outputs:
        - images_after_insert (Image)
    """
    _original_name: str = 'InsertImageBatchByIndexes'

    def __init__(self, images: Slot[Image], images_to_insert: Slot[Image], insert_indexes: Slot[Any]):
        super().__init__(**{"images": images, "images_to_insert": images_to_insert, "insert_indexes": insert_indexes})
        self.inputs = InsertImageBatchByIndexesInputs(self)
        self.outputs = InsertImageBatchByIndexesOutputs(self)
