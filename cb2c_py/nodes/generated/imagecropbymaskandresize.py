
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImageCropByMaskAndResize
class ImageCropByMaskAndResizeInputs(InputSlots):
    image: Slot[Image]
    mask: Slot[Image]
    base_resolution: Slot[int]
    padding: Slot[int]
    min_crop_resolution: Slot[int]
    max_crop_resolution: Slot[int]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.mask = Slot[Image](node, "mask", 'MASK')
        self.base_resolution = Slot[int](node, "base_resolution", 'INT')
        self.padding = Slot[int](node, "padding", 'INT')
        self.min_crop_resolution = Slot[int](node, "min_crop_resolution", 'INT')
        self.max_crop_resolution = Slot[int](node, "max_crop_resolution", 'INT')

class ImageCropByMaskAndResizeOutputs(OutputSlots):
    images: Slot[Image]
    masks: Slot[Image]
    bbox: Slot[Any]
    def __init__(self, node: "Node"):
        self.images = Slot[Image](node, "images", 'IMAGE')
        self.masks = Slot[Image](node, "masks", 'MASK')
        self.bbox = Slot[Any](node, "bbox", 'BBOX')

class ImageCropByMaskAndResize(Node[ImageCropByMaskAndResizeInputs, ImageCropByMaskAndResizeOutputs]):
    """
    Original name: ImageCropByMaskAndResize
    No description available.
    """
    _original_name: str = 'ImageCropByMaskAndResize'

    def __init__(self, image: Slot[Image], mask: Slot[Image], base_resolution: int = 512, padding: int = 0, min_crop_resolution: int = 128, max_crop_resolution: int = 512):
        super().__init__(**{"image": image, "mask": mask, "base_resolution": base_resolution, "padding": padding, "min_crop_resolution": min_crop_resolution, "max_crop_resolution": max_crop_resolution})
        self.inputs = ImageCropByMaskAndResizeInputs(self)
        self.outputs = ImageCropByMaskAndResizeOutputs(self)
