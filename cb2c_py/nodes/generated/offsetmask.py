
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for OffsetMask
class OffsetMaskInputs(InputSlots):
    mask: Slot[Image]
    x: Slot[int]
    y: Slot[int]
    angle: Slot[int]
    duplication_factor: Slot[int]
    roll: Slot[bool]
    incremental: Slot[bool]
    padding_mode: Slot[str]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "mask", 'MASK')
        self.x = Slot[int](node, "x", 'INT')
        self.y = Slot[int](node, "y", 'INT')
        self.angle = Slot[int](node, "angle", 'INT')
        self.duplication_factor = Slot[int](node, "duplication_factor", 'INT')
        self.roll = Slot[bool](node, "roll", 'BOOLEAN')
        self.incremental = Slot[bool](node, "incremental", 'BOOLEAN')
        self.padding_mode = Slot[str](node, "padding_mode", ['empty', 'border', 'reflection'])

class OffsetMaskOutputs(OutputSlots):
    mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "mask", 'MASK')

class OffsetMask(Node[OffsetMaskInputs, OffsetMaskOutputs]):
    """
    Original name: OffsetMask
    No description available.
    """
    _original_name: str = 'OffsetMask'

    def __init__(self, mask: Slot[Image], x: int = 0, y: int = 0, angle: int = 0, duplication_factor: int = 1, roll: bool = False, incremental: bool = False, padding_mode: str = 'empty'):
        super().__init__(**{"mask": mask, "x": x, "y": y, "angle": angle, "duplication_factor": duplication_factor, "roll": roll, "incremental": incremental, "padding_mode": padding_mode})
        self.inputs = OffsetMaskInputs(self)
        self.outputs = OffsetMaskOutputs(self)
