
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for VAEDecodeHunyuan3D
class VAEDecodeHunyuan3DInputs(InputSlots):
    samples: Slot[Latent]
    vae: Slot[Vae]
    num_chunks: Slot[int]
    octree_resolution: Slot[int]
    def __init__(self, node: "Node"):
        self.samples = Slot[Latent](node, "samples", 'LATENT')
        self.vae = Slot[Vae](node, "vae", 'VAE')
        self.num_chunks = Slot[int](node, "num_chunks", 'INT')
        self.octree_resolution = Slot[int](node, "octree_resolution", 'INT')

class VAEDecodeHunyuan3DOutputs(OutputSlots):
    voxel: Slot[Any]
    def __init__(self, node: "Node"):
        self.voxel = Slot[Any](node, "VOXEL", 'VOXEL')

class VAEDecodeHunyuan3D(Node[VAEDecodeHunyuan3DInputs, VAEDecodeHunyuan3DOutputs]):
    """
    Original name: VAEDecodeHunyuan3D
    No description available.
    """
    _original_name: str = 'VAEDecodeHunyuan3D'

    def __init__(self, samples: Slot[Latent], vae: Slot[Vae], num_chunks: int = 8000, octree_resolution: int = 256):
        super().__init__(**{"samples": samples, "vae": vae, "num_chunks": num_chunks, "octree_resolution": octree_resolution})
        self.inputs = VAEDecodeHunyuan3DInputs(self)
        self.outputs = VAEDecodeHunyuan3DOutputs(self)
