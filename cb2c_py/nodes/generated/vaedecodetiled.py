
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for VAEDecodeTiled
class VAEDecodeTiledInputs(InputSlots):
    samples: Slot[Latent]
    vae: Slot[Vae]
    tile_size: Slot[int]
    overlap: Slot[int]
    temporal_size: Slot[int]
    temporal_overlap: Slot[int]
    def __init__(self, node: "Node"):
        self.samples = Slot[Latent](node, "samples", 'LATENT')
        self.vae = Slot[Vae](node, "vae", 'VAE')
        self.tile_size = Slot[int](node, "tile_size", 'INT')
        self.overlap = Slot[int](node, "overlap", 'INT')
        self.temporal_size = Slot[int](node, "temporal_size", 'INT')
        self.temporal_overlap = Slot[int](node, "temporal_overlap", 'INT')

class VAEDecodeTiledOutputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class VAEDecodeTiled(Node[VAEDecodeTiledInputs, VAEDecodeTiledOutputs]):
    """
    Original name: VAEDecodeTiled
    Category: _for_testing
    

    Inputs:
        - samples (Latent)
        - vae (Vae)
        - tile_size (int) (default: 512)
        - overlap (int) (default: 64)
        - temporal_size (int) (default: 64)
          Only used for video VAEs: Amount of frames to decode at a time.
        - temporal_overlap (int) (default: 8)
          Only used for video VAEs: Amount of frames to overlap.

    Outputs:
        - image (Image)
    """
    _original_name: str = 'VAEDecodeTiled'

    def __init__(self, samples: Slot[Latent], vae: Slot[Vae], tile_size: int = 512, overlap: int = 64, temporal_size: int = 64, temporal_overlap: int = 8):
        super().__init__(**{"samples": samples, "vae": vae, "tile_size": tile_size, "overlap": overlap, "temporal_size": temporal_size, "temporal_overlap": temporal_overlap})
        self.inputs = VAEDecodeTiledInputs(self)
        self.outputs = VAEDecodeTiledOutputs(self)
