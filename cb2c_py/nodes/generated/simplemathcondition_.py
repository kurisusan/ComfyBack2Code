
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for SimpleMathCondition_
class SimpleMathCondition_Inputs(InputSlots):
    evaluate: Slot[Any]
    on_true: Slot[str]
    on_false: Slot[str]
    def __init__(self, node: "Node"):
        self.evaluate = Slot[Any](node, "evaluate", '*')
        self.on_true = Slot[str](node, "on_true", 'STRING')
        self.on_false = Slot[str](node, "on_false", 'STRING')

class SimpleMathCondition_Outputs(OutputSlots):
    int: Slot[int]
    float: Slot[float]
    def __init__(self, node: "Node"):
        self.int = Slot[int](node, "INT", 'INT')
        self.float = Slot[float](node, "FLOAT", 'FLOAT')

class SimpleMathCondition_(Node[SimpleMathCondition_Inputs, SimpleMathCondition_Outputs]):
    """
    Original name: SimpleMathCondition+
    No description available.
    """
    _original_name: str = 'SimpleMathCondition+'

    def __init__(self, evaluate: Slot[Any] = 0, on_true: str = '', on_false: str = ''):
        super().__init__(**{"evaluate": evaluate, "on_true": on_true, "on_false": on_false})
        self.inputs = SimpleMathCondition_Inputs(self)
        self.outputs = SimpleMathCondition_Outputs(self)
