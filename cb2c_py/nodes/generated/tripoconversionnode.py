
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for TripoConversionNode
class TripoConversionNodeInputs(InputSlots):
    original_model_task_id: Slot[Any]
    format: Slot[str]
    def __init__(self, node: "Node"):
        self.original_model_task_id = Slot[Any](node, "original_model_task_id", 'MODEL_TASK_ID,RIG_TASK_ID,RETARGET_TASK_ID')
        self.format = Slot[str](node, "format", ['GLTF', 'USDZ', 'FBX', 'OBJ', 'STL', '3MF'])

class TripoConversionNodeOutputs(OutputSlots):

    def __init__(self, node: "Node"):
        pass

class TripoConversionNode(Node[TripoConversionNodeInputs, TripoConversionNodeOutputs]):
    """
    Original name: TripoConversionNode
    Category: api node/3d/Tripo
    

    Inputs:
        - original_model_task_id (Any)
        - format (str)

    Outputs:
        No outputs.
    """
    _original_name: str = 'TripoConversionNode'

    def __init__(self, original_model_task_id: Slot[Any], format: str):
        super().__init__(**{"original_model_task_id": original_model_task_id, "format": format})
        self.inputs = TripoConversionNodeInputs(self)
        self.outputs = TripoConversionNodeOutputs(self)
