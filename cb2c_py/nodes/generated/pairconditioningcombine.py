
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for PairConditioningCombine
class PairConditioningCombineInputs(InputSlots):
    positive_A: Slot[Conditioning]
    negative_A: Slot[Conditioning]
    positive_B: Slot[Conditioning]
    negative_B: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.positive_A = Slot[Conditioning](node, "positive_A", 'CONDITIONING')
        self.negative_A = Slot[Conditioning](node, "negative_A", 'CONDITIONING')
        self.positive_B = Slot[Conditioning](node, "positive_B", 'CONDITIONING')
        self.negative_B = Slot[Conditioning](node, "negative_B", 'CONDITIONING')

class PairConditioningCombineOutputs(OutputSlots):
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')

class PairConditioningCombine(Node[PairConditioningCombineInputs, PairConditioningCombineOutputs]):
    """
    Original name: PairConditioningCombine
    No description available.
    """
    _original_name: str = 'PairConditioningCombine'

    def __init__(self, positive_A: Slot[Conditioning], negative_A: Slot[Conditioning], positive_B: Slot[Conditioning], negative_B: Slot[Conditioning]):
        super().__init__(**{"positive_A": positive_A, "negative_A": negative_A, "positive_B": positive_B, "negative_B": negative_B})
        self.inputs = PairConditioningCombineInputs(self)
        self.outputs = PairConditioningCombineOutputs(self)
