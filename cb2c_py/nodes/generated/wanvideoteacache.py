
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for WanVideoTeaCache
class WanVideoTeaCacheInputs(InputSlots):
    rel_l1_thresh: Slot[float]
    start_step: Slot[int]
    end_step: Slot[int]
    cache_device: Slot[str]
    use_coefficients: Slot[bool]
    def __init__(self, node: "Node"):
        self.rel_l1_thresh = Slot[float](node, "rel_l1_thresh", 'FLOAT')
        self.start_step = Slot[int](node, "start_step", 'INT')
        self.end_step = Slot[int](node, "end_step", 'INT')
        self.cache_device = Slot[str](node, "cache_device", ['main_device', 'offload_device'])
        self.use_coefficients = Slot[bool](node, "use_coefficients", 'BOOLEAN')

class WanVideoTeaCacheOutputs(OutputSlots):
    cache_args: Slot[Any]
    def __init__(self, node: "Node"):
        self.cache_args = Slot[Any](node, "cache_args", 'CACHEARGS')

class WanVideoTeaCache(Node[WanVideoTeaCacheInputs, WanVideoTeaCacheOutputs]):
    """
    Original name: WanVideoTeaCache
    No description available.
    """
    _original_name: str = 'WanVideoTeaCache'

    def __init__(self, rel_l1_thresh: float = 0.3, start_step: int = 1, end_step: int = -1, cache_device: str = 'offload_device', use_coefficients: bool = True):
        super().__init__(**{"rel_l1_thresh": rel_l1_thresh, "start_step": start_step, "end_step": end_step, "cache_device": cache_device, "use_coefficients": use_coefficients})
        self.inputs = WanVideoTeaCacheInputs(self)
        self.outputs = WanVideoTeaCacheOutputs(self)
