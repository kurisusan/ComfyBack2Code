
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for WanVideoTeaCache
class WanVideoTeaCacheInputs(InputSlots):
    rel_l1_thresh: Slot[float]
    start_step: Slot[int]
    end_step: Slot[int]
    cache_device: Slot[str]
    use_coefficients: Slot[bool]
    def __init__(self, node: "Node"):
        self.rel_l1_thresh = Slot[float](node, "rel_l1_thresh", 'FLOAT')
        self.start_step = Slot[int](node, "start_step", 'INT')
        self.end_step = Slot[int](node, "end_step", 'INT')
        self.cache_device = Slot[str](node, "cache_device", ['main_device', 'offload_device'])
        self.use_coefficients = Slot[bool](node, "use_coefficients", 'BOOLEAN')

class WanVideoTeaCacheOutputs(OutputSlots):
    cache_args: Slot[Any]
    def __init__(self, node: "Node"):
        self.cache_args = Slot[Any](node, "cache_args", 'CACHEARGS')

class WanVideoTeaCache(Node[WanVideoTeaCacheInputs, WanVideoTeaCacheOutputs]):
    """
    Original name: WanVideoTeaCache
    Category: WanVideoWrapper
    
Patch WanVideo model to use TeaCache. Speeds up inference by caching the output and  
applying it instead of doing the step.  Best results are achieved by choosing the  
appropriate coefficients for the model. Early steps should never be skipped, with too  
aggressive values this can happen and the motion suffers. Starting later can help with that too.   
When NOT using coefficients, the threshold value should be  
about 10 times smaller than the value used with coefficients.  

Official recommended values https://github.com/ali-vilab/TeaCache/tree/main/TeaCache4Wan2.1:


<pre style='font-family:monospace'>
+-------------------+--------+---------+--------+
|       Model       |  Low   | Medium  |  High  |
+-------------------+--------+---------+--------+
| Wan2.1 t2v 1.3B  |  0.05  |  0.07   |  0.08  |
| Wan2.1 t2v 14B   |  0.14  |  0.15   |  0.20  |
| Wan2.1 i2v 480P  |  0.13  |  0.19   |  0.26  |
| Wan2.1 i2v 720P  |  0.18  |  0.20   |  0.30  |
+-------------------+--------+---------+--------+
</pre> 


    Inputs:
        - rel_l1_thresh (float) (default: 0.3)
          Higher values will make TeaCache more aggressive, faster, but may cause artifacts. Good value range for 1.3B: 0.05 - 0.08, for other models 0.15-0.30
        - start_step (int) (default: 1)
          Start percentage of the steps to apply TeaCache
        - end_step (int) (default: -1)
          End steps to apply TeaCache
        - cache_device (str) (default: 'offload_device')
          Device to cache to
        - use_coefficients (bool) (default: True)
          Use calculated coefficients for more accuracy. When enabled therel_l1_thresh should be about 10 times higher than without

    Outputs:
        - cache_args (Any)
    """
    _original_name: str = 'WanVideoTeaCache'

    def __init__(self, rel_l1_thresh: float = 0.3, start_step: int = 1, end_step: int = -1, cache_device: str = 'offload_device', use_coefficients: bool = True):
        super().__init__(**{"rel_l1_thresh": rel_l1_thresh, "start_step": start_step, "end_step": end_step, "cache_device": cache_device, "use_coefficients": use_coefficients})
        self.inputs = WanVideoTeaCacheInputs(self)
        self.outputs = WanVideoTeaCacheOutputs(self)
