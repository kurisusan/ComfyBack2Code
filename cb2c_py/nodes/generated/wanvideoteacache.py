
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node

class WanVideoTeaCache(Node):
    """
    Original name: WanVideoTeaCache
    No description available.
    """
    _inputs = {
    "rel_l1_thresh": [
        "FLOAT",
        {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001,
            "tooltip": "Higher values will make TeaCache more aggressive, faster, but may cause artifacts. Good value range for 1.3B: 0.05 - 0.08, for other models 0.15-0.30"
        }
    ],
    "start_step": [
        "INT",
        {
            "default": 1,
            "min": 0,
            "max": 9999,
            "step": 1,
            "tooltip": "Start percentage of the steps to apply TeaCache"
        }
    ],
    "end_step": [
        "INT",
        {
            "default": -1,
            "min": -1,
            "max": 9999,
            "step": 1,
            "tooltip": "End steps to apply TeaCache"
        }
    ],
    "cache_device": [
        [
            "main_device",
            "offload_device"
        ],
        {
            "default": "offload_device",
            "tooltip": "Device to cache to"
        }
    ],
    "use_coefficients": [
        "BOOLEAN",
        {
            "default": True,
            "tooltip": "Use calculated coefficients for more accuracy. When enabled therel_l1_thresh should be about 10 times higher than without"
        }
    ]
}
    _outputs = [
    "CACHEARGS"
]
    _original_name = "WanVideoTeaCache"

    def __init__(self, rel_l1_thresh=0.3, start_step=1, end_step=-1, cache_device="offload_device", use_coefficients=True):
        super().__init__(rel_l1_thresh=rel_l1_thresh, start_step=start_step, end_step=end_step, cache_device=cache_device, use_coefficients=use_coefficients)

    @classmethod
    def get_inputs(cls):
        return cls._inputs

    @classmethod
    def get_outputs(cls):
        return cls._outputs
