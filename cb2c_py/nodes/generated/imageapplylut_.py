
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImageApplyLUT_
class ImageApplyLUT_Inputs(InputSlots):
    image: Slot[Image]
    lut_file: Slot[str]
    gamma_correction: Slot[bool]
    clip_values: Slot[bool]
    strength: Slot[float]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.lut_file = Slot[str](node, "lut_file", ['put_luts_files_here.txt'])
        self.gamma_correction = Slot[bool](node, "gamma_correction", 'BOOLEAN')
        self.clip_values = Slot[bool](node, "clip_values", 'BOOLEAN')
        self.strength = Slot[float](node, "strength", 'FLOAT')

class ImageApplyLUT_Outputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class ImageApplyLUT_(Node[ImageApplyLUT_Inputs, ImageApplyLUT_Outputs]):
    """
    Original name: ImageApplyLUT+
    No description available.
    """
    _original_name: str = 'ImageApplyLUT+'

    def __init__(self, image: Slot[Image], lut_file: str, gamma_correction: bool = True, clip_values: bool = True, strength: float = 1.0):
        super().__init__(**{"image": image, "lut_file": lut_file, "gamma_correction": gamma_correction, "clip_values": clip_values, "strength": strength})
        self.inputs = ImageApplyLUT_Inputs(self)
        self.outputs = ImageApplyLUT_Outputs(self)
