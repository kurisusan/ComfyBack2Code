
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for UNetCrossAttentionMultiply
class UNetCrossAttentionMultiplyInputs(InputSlots):
    model: Slot[Model]
    q: Slot[float]
    k: Slot[float]
    v: Slot[float]
    out: Slot[float]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.q = Slot[float](node, "q", 'FLOAT')
        self.k = Slot[float](node, "k", 'FLOAT')
        self.v = Slot[float](node, "v", 'FLOAT')
        self.out = Slot[float](node, "out", 'FLOAT')

class UNetCrossAttentionMultiplyOutputs(OutputSlots):
    model: Slot[Model]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')

class UNetCrossAttentionMultiply(Node[UNetCrossAttentionMultiplyInputs, UNetCrossAttentionMultiplyOutputs]):
    """
    Original name: UNetCrossAttentionMultiply
    No description available.
    """
    _original_name: str = 'UNetCrossAttentionMultiply'

    def __init__(self, model: Slot[Model], q: float = 1.0, k: float = 1.0, v: float = 1.0, out: float = 1.0):
        super().__init__(**{"model": model, "q": q, "k": k, "v": v, "out": out})
        self.inputs = UNetCrossAttentionMultiplyInputs(self)
        self.outputs = UNetCrossAttentionMultiplyOutputs(self)
