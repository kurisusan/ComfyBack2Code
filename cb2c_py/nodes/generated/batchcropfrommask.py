
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for BatchCropFromMask
class BatchCropFromMaskInputs(InputSlots):
    original_images: Slot[Image]
    masks: Slot[Any]
    crop_size_mult: Slot[float]
    bbox_smooth_alpha: Slot[float]
    def __init__(self, node: "Node"):
        self.original_images = Slot[Image](node, "original_images", 'IMAGE')
        self.masks = Slot[Any](node, "masks", 'MASK')
        self.crop_size_mult = Slot[float](node, "crop_size_mult", 'FLOAT')
        self.bbox_smooth_alpha = Slot[float](node, "bbox_smooth_alpha", 'FLOAT')

class BatchCropFromMaskOutputs(OutputSlots):
    original_images: Slot[Image]
    cropped_images: Slot[Image]
    bboxes: Slot[Any]
    width: Slot[int]
    height: Slot[int]
    def __init__(self, node: "Node"):
        self.original_images = Slot[Image](node, "original_images", 'IMAGE')
        self.cropped_images = Slot[Image](node, "cropped_images", 'IMAGE')
        self.bboxes = Slot[Any](node, "bboxes", 'BBOX')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')

class BatchCropFromMask(Node[BatchCropFromMaskInputs, BatchCropFromMaskOutputs]):
    """
    Original name: BatchCropFromMask
    No description available.
    """
    _original_name: str = 'BatchCropFromMask'

    def __init__(self, original_images: Slot[Image], masks: Slot[Any], crop_size_mult: float = 1.0, bbox_smooth_alpha: float = 0.5):
        super().__init__(**{"original_images": original_images, "masks": masks, "crop_size_mult": crop_size_mult, "bbox_smooth_alpha": bbox_smooth_alpha})
        self.inputs = BatchCropFromMaskInputs(self)
        self.outputs = BatchCropFromMaskOutputs(self)
