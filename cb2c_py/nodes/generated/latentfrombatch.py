
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for LatentFromBatch
class LatentFromBatchInputs(InputSlots):
    samples: Slot[Latent]
    batch_index: Slot[int]
    length: Slot[int]
    def __init__(self, node: "Node"):
        self.samples = Slot[Latent](node, "samples", 'LATENT')
        self.batch_index = Slot[int](node, "batch_index", 'INT')
        self.length = Slot[int](node, "length", 'INT')

class LatentFromBatchOutputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class LatentFromBatch(Node[LatentFromBatchInputs, LatentFromBatchOutputs]):
    """
    Original name: LatentFromBatch
    No description available.
    """
    _original_name: str = 'LatentFromBatch'

    def __init__(self, samples: Slot[Latent], batch_index: int = 0, length: int = 1):
        super().__init__(**{"samples": samples, "batch_index": batch_index, "length": length})
        self.inputs = LatentFromBatchInputs(self)
        self.outputs = LatentFromBatchOutputs(self)
