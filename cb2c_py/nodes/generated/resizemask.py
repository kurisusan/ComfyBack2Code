
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ResizeMask
class ResizeMaskInputs(InputSlots):
    mask: Slot[Image]
    width: Slot[int]
    height: Slot[int]
    keep_proportions: Slot[bool]
    upscale_method: Slot[str]
    crop: Slot[str]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "mask", 'MASK')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.keep_proportions = Slot[bool](node, "keep_proportions", 'BOOLEAN')
        self.upscale_method = Slot[str](node, "upscale_method", ['nearest-exact', 'bilinear', 'area', 'bicubic', 'lanczos'])
        self.crop = Slot[str](node, "crop", ['disabled', 'center'])

class ResizeMaskOutputs(OutputSlots):
    mask: Slot[Image]
    width: Slot[int]
    height: Slot[int]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "mask", 'MASK')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')

class ResizeMask(Node[ResizeMaskInputs, ResizeMaskOutputs]):
    """
    Original name: ResizeMask
    No description available.
    """
    _original_name: str = 'ResizeMask'

    def __init__(self, mask: Slot[Image], upscale_method: str, crop: str, width: int = 512, height: int = 512, keep_proportions: bool = False):
        super().__init__(**{"mask": mask, "width": width, "height": height, "keep_proportions": keep_proportions, "upscale_method": upscale_method, "crop": crop})
        self.inputs = ResizeMaskInputs(self)
        self.outputs = ResizeMaskOutputs(self)
