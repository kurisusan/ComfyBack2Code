
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for InsertImagesToBatchIndexed
class InsertImagesToBatchIndexedInputs(InputSlots):
    original_images: Slot[Image]
    images_to_insert: Slot[Image]
    indexes: Slot[str]
    def __init__(self, node: "Node"):
        self.original_images = Slot[Image](node, "original_images", 'IMAGE')
        self.images_to_insert = Slot[Image](node, "images_to_insert", 'IMAGE')
        self.indexes = Slot[str](node, "indexes", 'STRING')

class InsertImagesToBatchIndexedOutputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class InsertImagesToBatchIndexed(Node[InsertImagesToBatchIndexedInputs, InsertImagesToBatchIndexedOutputs]):
    """
    Original name: InsertImagesToBatchIndexed
    Category: KJNodes/image
    
Inserts images at the specified indices into the original image batch.


    Inputs:
        - original_images (Image)
        - images_to_insert (Image)
        - indexes (str) (default: '0, 1, 2')

    Outputs:
        - image (Image)
    """
    _original_name: str = 'InsertImagesToBatchIndexed'

    def __init__(self, original_images: Slot[Image], images_to_insert: Slot[Image], indexes: str = '0, 1, 2'):
        super().__init__(**{"original_images": original_images, "images_to_insert": images_to_insert, "indexes": indexes})
        self.inputs = InsertImagesToBatchIndexedInputs(self)
        self.outputs = InsertImagesToBatchIndexedOutputs(self)
