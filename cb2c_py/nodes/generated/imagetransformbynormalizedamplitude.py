
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for ImageTransformByNormalizedAmplitude
class ImageTransformByNormalizedAmplitudeInputs(InputSlots):
    normalized_amp: Slot[Any]
    zoom_scale: Slot[float]
    x_offset: Slot[int]
    y_offset: Slot[int]
    cumulative: Slot[bool]
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.normalized_amp = Slot[Any](node, "normalized_amp", 'NORMALIZED_AMPLITUDE')
        self.zoom_scale = Slot[float](node, "zoom_scale", 'FLOAT')
        self.x_offset = Slot[int](node, "x_offset", 'INT')
        self.y_offset = Slot[int](node, "y_offset", 'INT')
        self.cumulative = Slot[bool](node, "cumulative", 'BOOLEAN')
        self.image = Slot[Image](node, "image", 'IMAGE')

class ImageTransformByNormalizedAmplitudeOutputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class ImageTransformByNormalizedAmplitude(Node[ImageTransformByNormalizedAmplitudeInputs, ImageTransformByNormalizedAmplitudeOutputs]):
    """
    Original name: ImageTransformByNormalizedAmplitude
    No description available.
    """
    _original_name: str = 'ImageTransformByNormalizedAmplitude'

    def __init__(self, normalized_amp: Slot[Any], image: Slot[Image], zoom_scale: float = 0.0, x_offset: int = 0, y_offset: int = 0, cumulative: bool = False):
        super().__init__(**{"normalized_amp": normalized_amp, "zoom_scale": zoom_scale, "x_offset": x_offset, "y_offset": y_offset, "cumulative": cumulative, "image": image})
        self.inputs = ImageTransformByNormalizedAmplitudeInputs(self)
        self.outputs = ImageTransformByNormalizedAmplitudeOutputs(self)
