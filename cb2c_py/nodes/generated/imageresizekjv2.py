
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for ImageResizeKJv2
class ImageResizeKJv2Inputs(InputSlots):
    image: Slot[Image]
    width: Slot[int]
    height: Slot[int]
    upscale_method: Slot[str]
    keep_proportion: Slot[str]
    pad_color: Slot[str]
    crop_position: Slot[str]
    divisible_by: Slot[int]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.upscale_method = Slot[str](node, "upscale_method", ['nearest-exact', 'bilinear', 'area', 'bicubic', 'lanczos'])
        self.keep_proportion = Slot[str](node, "keep_proportion", ['stretch', 'resize', 'pad', 'pad_edge', 'crop'])
        self.pad_color = Slot[str](node, "pad_color", 'STRING')
        self.crop_position = Slot[str](node, "crop_position", ['center', 'top', 'bottom', 'left', 'right'])
        self.divisible_by = Slot[int](node, "divisible_by", 'INT')

class ImageResizeKJv2Outputs(OutputSlots):
    image: Slot[Image]
    width: Slot[int]
    height: Slot[int]
    mask: Slot[Any]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.mask = Slot[Any](node, "mask", 'MASK')

class ImageResizeKJv2(Node[ImageResizeKJv2Inputs, ImageResizeKJv2Outputs]):
    """
    Original name: ImageResizeKJv2
    No description available.
    """
    _original_name: str = 'ImageResizeKJv2'

    def __init__(self, image: Slot[Image], upscale_method: str, width: int = 512, height: int = 512, keep_proportion: str = False, pad_color: str = '0, 0, 0', crop_position: str = 'center', divisible_by: int = 2):
        super().__init__(**{"image": image, "width": width, "height": height, "upscale_method": upscale_method, "keep_proportion": keep_proportion, "pad_color": pad_color, "crop_position": crop_position, "divisible_by": divisible_by})
        self.inputs = ImageResizeKJv2Inputs(self)
        self.outputs = ImageResizeKJv2Outputs(self)
