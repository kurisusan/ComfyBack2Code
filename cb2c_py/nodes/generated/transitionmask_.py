
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for TransitionMask_
class TransitionMask_Inputs(InputSlots):
    width: Slot[int]
    height: Slot[int]
    frames: Slot[int]
    start_frame: Slot[int]
    end_frame: Slot[int]
    transition_type: Slot[str]
    timing_function: Slot[str]
    def __init__(self, node: "Node"):
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.frames = Slot[int](node, "frames", 'INT')
        self.start_frame = Slot[int](node, "start_frame", 'INT')
        self.end_frame = Slot[int](node, "end_frame", 'INT')
        self.transition_type = Slot[str](node, "transition_type", ['horizontal slide', 'vertical slide', 'horizontal bar', 'vertical bar', 'center box', 'horizontal door', 'vertical door', 'circle', 'fade'])
        self.timing_function = Slot[str](node, "timing_function", ['linear', 'in', 'out', 'in-out'])

class TransitionMask_Outputs(OutputSlots):
    mask: Slot[Any]
    def __init__(self, node: "Node"):
        self.mask = Slot[Any](node, "MASK", 'MASK')

class TransitionMask_(Node[TransitionMask_Inputs, TransitionMask_Outputs]):
    """
    Original name: TransitionMask+
    No description available.
    """
    _original_name: str = 'TransitionMask+'

    def __init__(self, transition_type: str, timing_function: str, width: int = 512, height: int = 512, frames: int = 16, start_frame: int = 0, end_frame: int = 9999):
        super().__init__(**{"width": width, "height": height, "frames": frames, "start_frame": start_frame, "end_frame": end_frame, "transition_type": transition_type, "timing_function": timing_function})
        self.inputs = TransitionMask_Inputs(self)
        self.outputs = TransitionMask_Outputs(self)
