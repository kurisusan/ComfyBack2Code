
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for T5TokenizerOptions
class T5TokenizerOptionsInputs(InputSlots):
    clip: Slot[Clip]
    min_padding: Slot[int]
    min_length: Slot[int]
    def __init__(self, node: "Node"):
        self.clip = Slot[Clip](node, "clip", 'CLIP')
        self.min_padding = Slot[int](node, "min_padding", 'INT')
        self.min_length = Slot[int](node, "min_length", 'INT')

class T5TokenizerOptionsOutputs(OutputSlots):
    clip: Slot[Clip]
    def __init__(self, node: "Node"):
        self.clip = Slot[Clip](node, "CLIP", 'CLIP')

class T5TokenizerOptions(Node[T5TokenizerOptionsInputs, T5TokenizerOptionsOutputs]):
    """
    Original name: T5TokenizerOptions
    No description available.
    """
    _original_name: str = 'T5TokenizerOptions'

    def __init__(self, clip: Slot[Clip], min_padding: int = 0, min_length: int = 0):
        super().__init__(**{"clip": clip, "min_padding": min_padding, "min_length": min_length})
        self.inputs = T5TokenizerOptionsInputs(self)
        self.outputs = T5TokenizerOptionsOutputs(self)
