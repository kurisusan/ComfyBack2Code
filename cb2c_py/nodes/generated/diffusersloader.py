
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for DiffusersLoader
class DiffusersLoaderInputs(InputSlots):
    model_path: Slot[str]
    def __init__(self, node: "Node"):
        self.model_path = Slot[str](node, "model_path", [])

class DiffusersLoaderOutputs(OutputSlots):
    model: Slot[Model]
    clip: Slot[Clip]
    vae: Slot[Vae]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')
        self.clip = Slot[Clip](node, "CLIP", 'CLIP')
        self.vae = Slot[Vae](node, "VAE", 'VAE')

class DiffusersLoader(Node[DiffusersLoaderInputs, DiffusersLoaderOutputs]):
    """
    Original name: DiffusersLoader
    No description available.
    """
    _original_name: str = 'DiffusersLoader'

    def __init__(self, model_path: str):
        super().__init__(**{"model_path": model_path})
        self.inputs = DiffusersLoaderInputs(self)
        self.outputs = DiffusersLoaderOutputs(self)
