
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node

class NormalizedAmplitudeToMask(Node):
    """
    Original name: NormalizedAmplitudeToMask
    No description available.
    """
    _inputs = {
    "normalized_amp": [
        "NORMALIZED_AMPLITUDE"
    ],
    "width": [
        "INT",
        {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
        }
    ],
    "height": [
        "INT",
        {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
        }
    ],
    "frame_offset": [
        "INT",
        {
            "default": 0,
            "min": -255,
            "max": 255,
            "step": 1
        }
    ],
    "location_x": [
        "INT",
        {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
        }
    ],
    "location_y": [
        "INT",
        {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
        }
    ],
    "size": [
        "INT",
        {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 1
        }
    ],
    "shape": [
        [
            "none",
            "circle",
            "square",
            "triangle"
        ],
        {
            "default": "none"
        }
    ],
    "color": [
        [
            "white",
            "amplitude"
        ],
        {
            "default": "amplitude"
        }
    ]
}
    _outputs = [
    "MASK"
]
    _original_name = "NormalizedAmplitudeToMask"

    def __init__(self, normalized_amp, width=512, height=512, frame_offset=0, location_x=256, location_y=256, size=128, shape="none", color="amplitude"):
        super().__init__(normalized_amp=normalized_amp, width=width, height=height, frame_offset=frame_offset, location_x=location_x, location_y=location_y, size=size, shape=shape, color=color)

    @classmethod
    def get_inputs(cls):
        return cls._inputs

    @classmethod
    def get_outputs(cls):
        return cls._outputs
