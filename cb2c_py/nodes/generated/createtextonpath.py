
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for CreateTextOnPath
class CreateTextOnPathInputs(InputSlots):
    coordinates: Slot[str]
    text: Slot[str]
    frame_width: Slot[int]
    frame_height: Slot[int]
    font: Slot[str]
    font_size: Slot[int]
    alignment: Slot[str]
    text_color: Slot[str]
    def __init__(self, node: "Node"):
        self.coordinates = Slot[str](node, "coordinates", 'STRING')
        self.text = Slot[str](node, "text", 'STRING')
        self.frame_width = Slot[int](node, "frame_width", 'INT')
        self.frame_height = Slot[int](node, "frame_height", 'INT')
        self.font = Slot[str](node, "font", ['FreeMono.ttf', 'FreeMonoBoldOblique.otf', 'TTNorms-Black.otf'])
        self.font_size = Slot[int](node, "font_size", 'INT')
        self.alignment = Slot[str](node, "alignment", ['left', 'center', 'right'])
        self.text_color = Slot[str](node, "text_color", 'STRING')

class CreateTextOnPathOutputs(OutputSlots):
    image: Slot[Image]
    mask: Slot[Image]
    mask_inverted: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.mask = Slot[Image](node, "mask", 'MASK')
        self.mask_inverted = Slot[Image](node, "mask_inverted", 'MASK')

class CreateTextOnPath(Node[CreateTextOnPathInputs, CreateTextOnPathOutputs]):
    """
    Original name: CreateTextOnPath
    No description available.
    """
    _original_name: str = 'CreateTextOnPath'

    def __init__(self, coordinates: str, font: str, text: str = 'text', frame_width: int = 512, frame_height: int = 512, font_size: int = 42, alignment: str = 'center', text_color: str = 'white'):
        super().__init__(**{"coordinates": coordinates, "text": text, "frame_width": frame_width, "frame_height": frame_height, "font": font, "font_size": font_size, "alignment": alignment, "text_color": text_color})
        self.inputs = CreateTextOnPathInputs(self)
        self.outputs = CreateTextOnPathOutputs(self)
