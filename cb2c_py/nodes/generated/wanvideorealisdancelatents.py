
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for WanVideoRealisDanceLatents
class WanVideoRealisDanceLatentsInputs(InputSlots):
    ref_latent: Slot[Latent]
    smpl_latent: Slot[Latent]
    pose_cond_start_percent: Slot[float]
    pose_cond_end_percent: Slot[float]
    def __init__(self, node: "Node"):
        self.ref_latent = Slot[Latent](node, "ref_latent", 'LATENT')
        self.smpl_latent = Slot[Latent](node, "smpl_latent", 'LATENT')
        self.pose_cond_start_percent = Slot[float](node, "pose_cond_start_percent", 'FLOAT')
        self.pose_cond_end_percent = Slot[float](node, "pose_cond_end_percent", 'FLOAT')

class WanVideoRealisDanceLatentsOutputs(OutputSlots):
    add_cond_latents: Slot[Any]
    def __init__(self, node: "Node"):
        self.add_cond_latents = Slot[Any](node, "add_cond_latents", 'ADD_COND_LATENTS')

class WanVideoRealisDanceLatents(Node[WanVideoRealisDanceLatentsInputs, WanVideoRealisDanceLatentsOutputs]):
    """
    Original name: WanVideoRealisDanceLatents
    No description available.
    """
    _original_name: str = 'WanVideoRealisDanceLatents'

    def __init__(self, ref_latent: Slot[Latent], smpl_latent: Slot[Latent], pose_cond_start_percent: float = 0.0, pose_cond_end_percent: float = 1.0):
        super().__init__(**{"ref_latent": ref_latent, "smpl_latent": smpl_latent, "pose_cond_start_percent": pose_cond_start_percent, "pose_cond_end_percent": pose_cond_end_percent})
        self.inputs = WanVideoRealisDanceLatentsInputs(self)
        self.outputs = WanVideoRealisDanceLatentsOutputs(self)
