
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for Context_Switch_Big__rgthree_
class Context_Switch_Big__rgthree_Inputs(InputSlots):

    def __init__(self, node: "Node"):
        pass

class Context_Switch_Big__rgthree_Outputs(OutputSlots):
    context: Slot[Any]
    model: Slot[Model]
    clip: Slot[Clip]
    vae: Slot[Vae]
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    latent: Slot[Latent]
    image: Slot[Image]
    seed: Slot[int]
    steps: Slot[int]
    step_refiner: Slot[int]
    cfg: Slot[float]
    ckpt_name: Slot[str]
    sampler: Slot[str]
    scheduler: Slot[str]
    clip_width: Slot[int]
    clip_height: Slot[int]
    text_pos_g: Slot[str]
    text_pos_l: Slot[str]
    text_neg_g: Slot[str]
    text_neg_l: Slot[str]
    mask: Slot[Any]
    control_net: Slot[Any]
    def __init__(self, node: "Node"):
        self.context = Slot[Any](node, "CONTEXT", 'RGTHREE_CONTEXT')
        self.model = Slot[Model](node, "MODEL", 'MODEL')
        self.clip = Slot[Clip](node, "CLIP", 'CLIP')
        self.vae = Slot[Vae](node, "VAE", 'VAE')
        self.positive = Slot[Conditioning](node, "POSITIVE", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "NEGATIVE", 'CONDITIONING')
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')
        self.seed = Slot[int](node, "SEED", 'INT')
        self.steps = Slot[int](node, "STEPS", 'INT')
        self.step_refiner = Slot[int](node, "STEP_REFINER", 'INT')
        self.cfg = Slot[float](node, "CFG", 'FLOAT')
        self.ckpt_name = Slot[str](node, "CKPT_NAME", ['v1-5-pruned-emaonly.safetensors'])
        self.sampler = Slot[str](node, "SAMPLER", ['euler', 'euler_cfg_pp', 'euler_ancestral', 'euler_ancestral_cfg_pp', 'heun', 'heunpp2', 'dpm_2', 'dpm_2_ancestral', 'lms', 'dpm_fast', 'dpm_adaptive', 'dpmpp_2s_ancestral', 'dpmpp_2s_ancestral_cfg_pp', 'dpmpp_sde', 'dpmpp_sde_gpu', 'dpmpp_2m', 'dpmpp_2m_cfg_pp', 'dpmpp_2m_sde', 'dpmpp_2m_sde_gpu', 'dpmpp_3m_sde', 'dpmpp_3m_sde_gpu', 'ddpm', 'lcm', 'ipndm', 'ipndm_v', 'deis', 'res_multistep', 'res_multistep_cfg_pp', 'res_multistep_ancestral', 'res_multistep_ancestral_cfg_pp', 'gradient_estimation', 'gradient_estimation_cfg_pp', 'er_sde', 'seeds_2', 'seeds_3', 'ddim', 'uni_pc', 'uni_pc_bh2'])
        self.scheduler = Slot[str](node, "SCHEDULER", ['simple', 'sgm_uniform', 'karras', 'exponential', 'ddim_uniform', 'beta', 'normal', 'linear_quadratic', 'kl_optimal'])
        self.clip_width = Slot[int](node, "CLIP_WIDTH", 'INT')
        self.clip_height = Slot[int](node, "CLIP_HEIGHT", 'INT')
        self.text_pos_g = Slot[str](node, "TEXT_POS_G", 'STRING')
        self.text_pos_l = Slot[str](node, "TEXT_POS_L", 'STRING')
        self.text_neg_g = Slot[str](node, "TEXT_NEG_G", 'STRING')
        self.text_neg_l = Slot[str](node, "TEXT_NEG_L", 'STRING')
        self.mask = Slot[Any](node, "MASK", 'MASK')
        self.control_net = Slot[Any](node, "CONTROL_NET", 'CONTROL_NET')

class Context_Switch_Big__rgthree_(Node[Context_Switch_Big__rgthree_Inputs, Context_Switch_Big__rgthree_Outputs]):
    """
    Original name: Context Switch Big (rgthree)
    No description available.
    """
    _original_name: str = 'Context Switch Big (rgthree)'

    def __init__(self, ):
        super().__init__(**{})
        self.inputs = Context_Switch_Big__rgthree_Inputs(self)
        self.outputs = Context_Switch_Big__rgthree_Outputs(self)
