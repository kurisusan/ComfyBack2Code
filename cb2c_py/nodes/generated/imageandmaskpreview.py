
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImageAndMaskPreview
class ImageAndMaskPreviewInputs(InputSlots):
    mask_opacity: Slot[float]
    mask_color: Slot[str]
    pass_through: Slot[bool]
    def __init__(self, node: "Node"):
        self.mask_opacity = Slot[float](node, "mask_opacity", 'FLOAT')
        self.mask_color = Slot[str](node, "mask_color", 'STRING')
        self.pass_through = Slot[bool](node, "pass_through", 'BOOLEAN')

class ImageAndMaskPreviewOutputs(OutputSlots):
    composite: Slot[Image]
    def __init__(self, node: "Node"):
        self.composite = Slot[Image](node, "composite", 'IMAGE')

class ImageAndMaskPreview(Node[ImageAndMaskPreviewInputs, ImageAndMaskPreviewOutputs]):
    """
    Original name: ImageAndMaskPreview
    No description available.
    """
    _original_name: str = 'ImageAndMaskPreview'

    def __init__(self, mask_opacity: float = 1.0, mask_color: str = '255, 255, 255', pass_through: bool = False):
        super().__init__(**{"mask_opacity": mask_opacity, "mask_color": mask_color, "pass_through": pass_through})
        self.inputs = ImageAndMaskPreviewInputs(self)
        self.outputs = ImageAndMaskPreviewOutputs(self)
