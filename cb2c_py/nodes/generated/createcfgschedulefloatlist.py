
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node

class CreateCFGScheduleFloatList(Node):
    """
    Original name: CreateCFGScheduleFloatList
    No description available.
    """
    _inputs = {
    "steps": [
        "INT",
        {
            "default": 30,
            "min": 2,
            "max": 1000,
            "step": 1,
            "tooltip": "Number of steps to schedule cfg for"
        }
    ],
    "cfg_scale_start": [
        "FLOAT",
        {
            "default": 5.0,
            "min": 0.0,
            "max": 30.0,
            "step": 0.01,
            "round": 0.01,
            "tooltip": "CFG scale to use for the steps"
        }
    ],
    "cfg_scale_end": [
        "FLOAT",
        {
            "default": 5.0,
            "min": 0.0,
            "max": 30.0,
            "step": 0.01,
            "round": 0.01,
            "tooltip": "CFG scale to use for the steps"
        }
    ],
    "interpolation": [
        [
            "linear",
            "ease_in",
            "ease_out"
        ],
        {
            "default": "linear",
            "tooltip": "Interpolation method to use for the cfg scale"
        }
    ],
    "start_percent": [
        "FLOAT",
        {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": 0.01,
            "tooltip": "Start percent of the steps to apply cfg"
        }
    ],
    "end_percent": [
        "FLOAT",
        {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": 0.01,
            "tooltip": "End percent of the steps to apply cfg"
        }
    ]
}
    _outputs = [
    "FLOAT"
]
    _original_name = "CreateCFGScheduleFloatList"

    def __init__(self, steps=30, cfg_scale_start=5.0, cfg_scale_end=5.0, interpolation="linear", start_percent=0.0, end_percent=1.0):
        super().__init__(steps=steps, cfg_scale_start=cfg_scale_start, cfg_scale_end=cfg_scale_end, interpolation=interpolation, start_percent=start_percent, end_percent=end_percent)

    @classmethod
    def get_inputs(cls):
        return cls._inputs

    @classmethod
    def get_outputs(cls):
        return cls._outputs
