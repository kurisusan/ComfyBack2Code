
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for WanVideoBlockSwap
class WanVideoBlockSwapInputs(InputSlots):
    blocks_to_swap: Slot[int]
    offload_img_emb: Slot[bool]
    offload_txt_emb: Slot[bool]
    def __init__(self, node: "Node"):
        self.blocks_to_swap = Slot[int](node, "blocks_to_swap", 'INT')
        self.offload_img_emb = Slot[bool](node, "offload_img_emb", 'BOOLEAN')
        self.offload_txt_emb = Slot[bool](node, "offload_txt_emb", 'BOOLEAN')

class WanVideoBlockSwapOutputs(OutputSlots):
    block_swap_args: Slot[Any]
    def __init__(self, node: "Node"):
        self.block_swap_args = Slot[Any](node, "block_swap_args", 'BLOCKSWAPARGS')

class WanVideoBlockSwap(Node[WanVideoBlockSwapInputs, WanVideoBlockSwapOutputs]):
    """
    Original name: WanVideoBlockSwap
    Category: WanVideoWrapper
    Settings for block swapping, reduces VRAM use by swapping blocks to CPU memory

    Inputs:
        - blocks_to_swap (int) (default: 20)
          Number of transformer blocks to swap, the 14B model has 40, while the 1.3B model has 30 blocks
        - offload_img_emb (bool) (default: False)
          Offload img_emb to offload_device
        - offload_txt_emb (bool) (default: False)
          Offload time_emb to offload_device

    Outputs:
        - block_swap_args (Any)
    """
    _original_name: str = 'WanVideoBlockSwap'

    def __init__(self, blocks_to_swap: int = 20, offload_img_emb: bool = False, offload_txt_emb: bool = False):
        super().__init__(**{"blocks_to_swap": blocks_to_swap, "offload_img_emb": offload_img_emb, "offload_txt_emb": offload_txt_emb})
        self.inputs = WanVideoBlockSwapInputs(self)
        self.outputs = WanVideoBlockSwapOutputs(self)
