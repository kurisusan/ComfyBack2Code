
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImageBatchRepeatInterleaving
class ImageBatchRepeatInterleavingInputs(InputSlots):
    images: Slot[Image]
    repeats: Slot[int]
    def __init__(self, node: "Node"):
        self.images = Slot[Image](node, "images", 'IMAGE')
        self.repeats = Slot[int](node, "repeats", 'INT')

class ImageBatchRepeatInterleavingOutputs(OutputSlots):
    image: Slot[Image]
    mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')
        self.mask = Slot[Image](node, "MASK", 'MASK')

class ImageBatchRepeatInterleaving(Node[ImageBatchRepeatInterleavingInputs, ImageBatchRepeatInterleavingOutputs]):
    """
    Original name: ImageBatchRepeatInterleaving
    Category: KJNodes/image
    
Repeats each image in a batch by the specified number of times.  
Example batch of 5 images: 0, 1 ,2, 3, 4  
with repeats 2 becomes batch of 10 images: 0, 0, 1, 1, 2, 2, 3, 3, 4, 4  


    Inputs:
        - images (Image)
        - repeats (int) (default: 1)

    Outputs:
        - image (Image)
        - mask (Image)
    """
    _original_name: str = 'ImageBatchRepeatInterleaving'

    def __init__(self, images: Slot[Image], repeats: int = 1):
        super().__init__(**{"images": images, "repeats": repeats})
        self.inputs = ImageBatchRepeatInterleavingInputs(self)
        self.outputs = ImageBatchRepeatInterleavingOutputs(self)
