
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for InsertLatentToIndexed
class InsertLatentToIndexedInputs(InputSlots):
    source: Slot[Latent]
    destination: Slot[Latent]
    index: Slot[int]
    def __init__(self, node: "Node"):
        self.source = Slot[Latent](node, "source", 'LATENT')
        self.destination = Slot[Latent](node, "destination", 'LATENT')
        self.index = Slot[int](node, "index", 'INT')

class InsertLatentToIndexedOutputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class InsertLatentToIndexed(Node[InsertLatentToIndexedInputs, InsertLatentToIndexedOutputs]):
    """
    Original name: InsertLatentToIndexed
    Category: KJNodes/latents
    
Inserts a latent at the specified index into the original latent batch.


    Inputs:
        - source (Latent)
        - destination (Latent)
        - index (int) (default: 0)

    Outputs:
        - latent (Latent)
    """
    _original_name: str = 'InsertLatentToIndexed'

    def __init__(self, source: Slot[Latent], destination: Slot[Latent], index: int = 0):
        super().__init__(**{"source": source, "destination": destination, "index": index})
        self.inputs = InsertLatentToIndexedInputs(self)
        self.outputs = InsertLatentToIndexedOutputs(self)
