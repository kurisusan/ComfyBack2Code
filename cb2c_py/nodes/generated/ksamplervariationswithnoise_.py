
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node

class KSamplerVariationsWithNoise_(Node):
    """
    Original name: KSamplerVariationsWithNoise+
    No description available.
    """
    _inputs = {
    "model": [
        "MODEL"
    ],
    "latent_image": [
        "LATENT"
    ],
    "main_seed": [
        "INT:seed",
        {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
        }
    ],
    "steps": [
        "INT",
        {
            "default": 20,
            "min": 1,
            "max": 10000
        }
    ],
    "cfg": [
        "FLOAT",
        {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
        }
    ],
    "sampler_name": [
        [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
        ]
    ],
    "scheduler": [
        [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
        ]
    ],
    "positive": [
        "CONDITIONING"
    ],
    "negative": [
        "CONDITIONING"
    ],
    "variation_strength": [
        "FLOAT",
        {
            "default": 0.17,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": 0.01
        }
    ],
    "variation_seed": [
        "INT:seed",
        {
            "default": 12345,
            "min": 0,
            "max": 18446744073709551615
        }
    ],
    "denoise": [
        "FLOAT",
        {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": 0.01
        }
    ]
}
    _outputs = [
    "LATENT"
]
    _original_name = "KSamplerVariationsWithNoise+"

    def __init__(self, model, latent_image, sampler_name, scheduler, positive, negative, main_seed=0, steps=20, cfg=8.0, variation_strength=0.17, variation_seed=12345, denoise=1.0):
        super().__init__(model=model, latent_image=latent_image, main_seed=main_seed, steps=steps, cfg=cfg, sampler_name=sampler_name, scheduler=scheduler, positive=positive, negative=negative, variation_strength=variation_strength, variation_seed=variation_seed, denoise=denoise)

    @classmethod
    def get_inputs(cls):
        return cls._inputs

    @classmethod
    def get_outputs(cls):
        return cls._outputs
