
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for ReCamMasterPoseVisualizer
class ReCamMasterPoseVisualizerInputs(InputSlots):
    camera_poses: Slot[Any]
    base_xval: Slot[float]
    zval: Slot[float]
    scale: Slot[float]
    arrow_length: Slot[float]
    def __init__(self, node: "Node"):
        self.camera_poses = Slot[Any](node, "camera_poses", 'CAMERAPOSES')
        self.base_xval = Slot[float](node, "base_xval", 'FLOAT')
        self.zval = Slot[float](node, "zval", 'FLOAT')
        self.scale = Slot[float](node, "scale", 'FLOAT')
        self.arrow_length = Slot[float](node, "arrow_length", 'FLOAT')

class ReCamMasterPoseVisualizerOutputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class ReCamMasterPoseVisualizer(Node[ReCamMasterPoseVisualizerInputs, ReCamMasterPoseVisualizerOutputs]):
    """
    Original name: ReCamMasterPoseVisualizer
    No description available.
    """
    _original_name: str = 'ReCamMasterPoseVisualizer'

    def __init__(self, camera_poses: Slot[Any], base_xval: float = 0.2, zval: float = 0.3, scale: float = 1.0, arrow_length: float = 1):
        super().__init__(**{"camera_poses": camera_poses, "base_xval": base_xval, "zval": zval, "scale": scale, "arrow_length": arrow_length})
        self.inputs = ReCamMasterPoseVisualizerInputs(self)
        self.outputs = ReCamMasterPoseVisualizerOutputs(self)
