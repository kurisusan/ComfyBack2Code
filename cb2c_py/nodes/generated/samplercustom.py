
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for SamplerCustom
class SamplerCustomInputs(InputSlots):
    model: Slot[Model]
    add_noise: Slot[bool]
    noise_seed: Slot[int]
    cfg: Slot[float]
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    sampler: Slot[Any]
    sigmas: Slot[Any]
    latent_image: Slot[Latent]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.add_noise = Slot[bool](node, "add_noise", 'BOOLEAN')
        self.noise_seed = Slot[int](node, "noise_seed", 'INT')
        self.cfg = Slot[float](node, "cfg", 'FLOAT')
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')
        self.sampler = Slot[Any](node, "sampler", 'SAMPLER')
        self.sigmas = Slot[Any](node, "sigmas", 'SIGMAS')
        self.latent_image = Slot[Latent](node, "latent_image", 'LATENT')

class SamplerCustomOutputs(OutputSlots):
    output: Slot[Latent]
    denoised_output: Slot[Latent]
    def __init__(self, node: "Node"):
        self.output = Slot[Latent](node, "output", 'LATENT')
        self.denoised_output = Slot[Latent](node, "denoised_output", 'LATENT')

class SamplerCustom(Node[SamplerCustomInputs, SamplerCustomOutputs]):
    """
    Original name: SamplerCustom
    No description available.
    """
    _original_name: str = 'SamplerCustom'

    def __init__(self, model: Slot[Model], positive: Slot[Conditioning], negative: Slot[Conditioning], sampler: Slot[Any], sigmas: Slot[Any], latent_image: Slot[Latent], add_noise: bool = True, noise_seed: int = 0, cfg: float = 8.0):
        super().__init__(**{"model": model, "add_noise": add_noise, "noise_seed": noise_seed, "cfg": cfg, "positive": positive, "negative": negative, "sampler": sampler, "sigmas": sigmas, "latent_image": latent_image})
        self.inputs = SamplerCustomInputs(self)
        self.outputs = SamplerCustomOutputs(self)
