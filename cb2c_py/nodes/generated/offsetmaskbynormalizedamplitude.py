
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for OffsetMaskByNormalizedAmplitude
class OffsetMaskByNormalizedAmplitudeInputs(InputSlots):
    normalized_amp: Slot[Any]
    mask: Slot[Any]
    x: Slot[int]
    y: Slot[int]
    rotate: Slot[bool]
    angle_multiplier: Slot[float]
    def __init__(self, node: "Node"):
        self.normalized_amp = Slot[Any](node, "normalized_amp", 'NORMALIZED_AMPLITUDE')
        self.mask = Slot[Any](node, "mask", 'MASK')
        self.x = Slot[int](node, "x", 'INT')
        self.y = Slot[int](node, "y", 'INT')
        self.rotate = Slot[bool](node, "rotate", 'BOOLEAN')
        self.angle_multiplier = Slot[float](node, "angle_multiplier", 'FLOAT')

class OffsetMaskByNormalizedAmplitudeOutputs(OutputSlots):
    mask: Slot[Any]
    def __init__(self, node: "Node"):
        self.mask = Slot[Any](node, "mask", 'MASK')

class OffsetMaskByNormalizedAmplitude(Node[OffsetMaskByNormalizedAmplitudeInputs, OffsetMaskByNormalizedAmplitudeOutputs]):
    """
    Original name: OffsetMaskByNormalizedAmplitude
    No description available.
    """
    _original_name: str = 'OffsetMaskByNormalizedAmplitude'

    def __init__(self, normalized_amp: Slot[Any], mask: Slot[Any], x: int = 0, y: int = 0, rotate: bool = False, angle_multiplier: float = 0.0):
        super().__init__(**{"normalized_amp": normalized_amp, "mask": mask, "x": x, "y": y, "rotate": rotate, "angle_multiplier": angle_multiplier})
        self.inputs = OffsetMaskByNormalizedAmplitudeInputs(self)
        self.outputs = OffsetMaskByNormalizedAmplitudeOutputs(self)
