
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for MaskBatch_
class MaskBatch_Inputs(InputSlots):
    mask1: Slot[Image]
    mask2: Slot[Image]
    def __init__(self, node: "Node"):
        self.mask1 = Slot[Image](node, "mask1", 'MASK')
        self.mask2 = Slot[Image](node, "mask2", 'MASK')

class MaskBatch_Outputs(OutputSlots):
    mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "MASK", 'MASK')

class MaskBatch_(Node[MaskBatch_Inputs, MaskBatch_Outputs]):
    """
    Original name: MaskBatch+
    Category: essentials/mask batch
    

    Inputs:
        - mask1 (Image)
        - mask2 (Image)

    Outputs:
        - mask (Image)
    """
    _original_name: str = 'MaskBatch+'

    def __init__(self, mask1: Slot[Image], mask2: Slot[Image]):
        super().__init__(**{"mask1": mask1, "mask2": mask2})
        self.inputs = MaskBatch_Inputs(self)
        self.outputs = MaskBatch_Outputs(self)
