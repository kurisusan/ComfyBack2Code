
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for MaskFromColor_
class MaskFromColor_Inputs(InputSlots):
    image: Slot[Image]
    red: Slot[int]
    green: Slot[int]
    blue: Slot[int]
    threshold: Slot[int]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.red = Slot[int](node, "red", 'INT')
        self.green = Slot[int](node, "green", 'INT')
        self.blue = Slot[int](node, "blue", 'INT')
        self.threshold = Slot[int](node, "threshold", 'INT')

class MaskFromColor_Outputs(OutputSlots):
    mask: Slot[Any]
    def __init__(self, node: "Node"):
        self.mask = Slot[Any](node, "MASK", 'MASK')

class MaskFromColor_(Node[MaskFromColor_Inputs, MaskFromColor_Outputs]):
    """
    Original name: MaskFromColor+
    No description available.
    """
    _original_name: str = 'MaskFromColor+'

    def __init__(self, image: Slot[Image], red: int = 255, green: int = 255, blue: int = 255, threshold: int = 0):
        super().__init__(**{"image": image, "red": red, "green": green, "blue": blue, "threshold": threshold})
        self.inputs = MaskFromColor_Inputs(self)
        self.outputs = MaskFromColor_Outputs(self)
