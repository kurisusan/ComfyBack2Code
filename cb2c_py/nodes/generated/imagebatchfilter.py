
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImageBatchFilter
class ImageBatchFilterInputs(InputSlots):
    images: Slot[Image]
    empty_color: Slot[str]
    empty_threshold: Slot[float]
    def __init__(self, node: "Node"):
        self.images = Slot[Image](node, "images", 'IMAGE')
        self.empty_color = Slot[str](node, "empty_color", 'STRING')
        self.empty_threshold = Slot[float](node, "empty_threshold", 'FLOAT')

class ImageBatchFilterOutputs(OutputSlots):
    images: Slot[Image]
    removed_indices: Slot[str]
    def __init__(self, node: "Node"):
        self.images = Slot[Image](node, "images", 'IMAGE')
        self.removed_indices = Slot[str](node, "removed_indices", 'STRING')

class ImageBatchFilter(Node[ImageBatchFilterInputs, ImageBatchFilterOutputs]):
    """
    Original name: ImageBatchFilter
    Category: KJNodes/image
    Removes empty images from a batch

    Inputs:
        - images (Image)
        - empty_color (str) (default: '0, 0, 0')
        - empty_threshold (float) (default: 0.01)

    Outputs:
        - images (Image)
        - removed_indices (str)
    """
    _original_name: str = 'ImageBatchFilter'

    def __init__(self, images: Slot[Image], empty_color: str = '0, 0, 0', empty_threshold: float = 0.01):
        super().__init__(**{"images": images, "empty_color": empty_color, "empty_threshold": empty_threshold})
        self.inputs = ImageBatchFilterInputs(self)
        self.outputs = ImageBatchFilterOutputs(self)
