
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImageSmartSharpen_
class ImageSmartSharpen_Inputs(InputSlots):
    image: Slot[Image]
    noise_radius: Slot[int]
    preserve_edges: Slot[float]
    sharpen: Slot[float]
    ratio: Slot[float]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.noise_radius = Slot[int](node, "noise_radius", 'INT')
        self.preserve_edges = Slot[float](node, "preserve_edges", 'FLOAT')
        self.sharpen = Slot[float](node, "sharpen", 'FLOAT')
        self.ratio = Slot[float](node, "ratio", 'FLOAT')

class ImageSmartSharpen_Outputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class ImageSmartSharpen_(Node[ImageSmartSharpen_Inputs, ImageSmartSharpen_Outputs]):
    """
    Original name: ImageSmartSharpen+
    Category: essentials/image processing
    

    Inputs:
        - image (Image)
        - noise_radius (int) (default: 7)
        - preserve_edges (float) (default: 0.75)
        - sharpen (float) (default: 5.0)
        - ratio (float) (default: 0.5)

    Outputs:
        - image (Image)
    """
    _original_name: str = 'ImageSmartSharpen+'

    def __init__(self, image: Slot[Image], noise_radius: int = 7, preserve_edges: float = 0.75, sharpen: float = 5.0, ratio: float = 0.5):
        super().__init__(**{"image": image, "noise_radius": noise_radius, "preserve_edges": preserve_edges, "sharpen": sharpen, "ratio": ratio})
        self.inputs = ImageSmartSharpen_Inputs(self)
        self.outputs = ImageSmartSharpen_Outputs(self)
