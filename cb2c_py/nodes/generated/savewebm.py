
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for SaveWEBM
class SaveWEBMInputs(InputSlots):
    images: Slot[Image]
    filename_prefix: Slot[str]
    codec: Slot[str]
    fps: Slot[float]
    crf: Slot[float]
    def __init__(self, node: "Node"):
        self.images = Slot[Image](node, "images", 'IMAGE')
        self.filename_prefix = Slot[str](node, "filename_prefix", 'STRING')
        self.codec = Slot[str](node, "codec", ['vp9', 'av1'])
        self.fps = Slot[float](node, "fps", 'FLOAT')
        self.crf = Slot[float](node, "crf", 'FLOAT')

class SaveWEBMOutputs(OutputSlots):

    def __init__(self, node: "Node"):
        pass

class SaveWEBM(Node[SaveWEBMInputs, SaveWEBMOutputs]):
    """
    Original name: SaveWEBM
    Category: image/video
    

    Inputs:
        - images (Image)
        - filename_prefix (str) (default: 'ComfyUI')
        - codec (str)
        - fps (float) (default: 24.0)
        - crf (float) (default: 32.0)
          Higher crf means lower quality with a smaller file size, lower crf means higher quality higher filesize.

    Outputs:
        No outputs.
    """
    _original_name: str = 'SaveWEBM'

    def __init__(self, images: Slot[Image], codec: str, filename_prefix: str = 'ComfyUI', fps: float = 24.0, crf: float = 32.0):
        super().__init__(**{"images": images, "filename_prefix": filename_prefix, "codec": codec, "fps": fps, "crf": crf})
        self.inputs = SaveWEBMInputs(self)
        self.outputs = SaveWEBMOutputs(self)
