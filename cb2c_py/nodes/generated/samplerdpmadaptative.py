
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for SamplerDPMAdaptative
class SamplerDPMAdaptativeInputs(InputSlots):
    order: Slot[int]
    rtol: Slot[float]
    atol: Slot[float]
    h_init: Slot[float]
    pcoeff: Slot[float]
    icoeff: Slot[float]
    dcoeff: Slot[float]
    accept_safety: Slot[float]
    eta: Slot[float]
    s_noise: Slot[float]
    def __init__(self, node: "Node"):
        self.order = Slot[int](node, "order", 'INT')
        self.rtol = Slot[float](node, "rtol", 'FLOAT')
        self.atol = Slot[float](node, "atol", 'FLOAT')
        self.h_init = Slot[float](node, "h_init", 'FLOAT')
        self.pcoeff = Slot[float](node, "pcoeff", 'FLOAT')
        self.icoeff = Slot[float](node, "icoeff", 'FLOAT')
        self.dcoeff = Slot[float](node, "dcoeff", 'FLOAT')
        self.accept_safety = Slot[float](node, "accept_safety", 'FLOAT')
        self.eta = Slot[float](node, "eta", 'FLOAT')
        self.s_noise = Slot[float](node, "s_noise", 'FLOAT')

class SamplerDPMAdaptativeOutputs(OutputSlots):
    sampler: Slot[Any]
    def __init__(self, node: "Node"):
        self.sampler = Slot[Any](node, "SAMPLER", 'SAMPLER')

class SamplerDPMAdaptative(Node[SamplerDPMAdaptativeInputs, SamplerDPMAdaptativeOutputs]):
    """
    Original name: SamplerDPMAdaptative
    No description available.
    """
    _original_name: str = 'SamplerDPMAdaptative'

    def __init__(self, order: int = 3, rtol: float = 0.05, atol: float = 0.0078, h_init: float = 0.05, pcoeff: float = 0.0, icoeff: float = 1.0, dcoeff: float = 0.0, accept_safety: float = 0.81, eta: float = 0.0, s_noise: float = 1.0):
        super().__init__(**{"order": order, "rtol": rtol, "atol": atol, "h_init": h_init, "pcoeff": pcoeff, "icoeff": icoeff, "dcoeff": dcoeff, "accept_safety": accept_safety, "eta": eta, "s_noise": s_noise})
        self.inputs = SamplerDPMAdaptativeInputs(self)
        self.outputs = SamplerDPMAdaptativeOutputs(self)
