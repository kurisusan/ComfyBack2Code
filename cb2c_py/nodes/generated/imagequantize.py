
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImageQuantize
class ImageQuantizeInputs(InputSlots):
    image: Slot[Image]
    colors: Slot[int]
    dither: Slot[str]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.colors = Slot[int](node, "colors", 'INT')
        self.dither = Slot[str](node, "dither", ['none', 'floyd-steinberg', 'bayer-2', 'bayer-4', 'bayer-8', 'bayer-16'])

class ImageQuantizeOutputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class ImageQuantize(Node[ImageQuantizeInputs, ImageQuantizeOutputs]):
    """
    Original name: ImageQuantize
    Category: image/postprocessing
    

    Inputs:
        - image (Image)
        - colors (int) (default: 256)
        - dither (str)

    Outputs:
        - image (Image)
    """
    _original_name: str = 'ImageQuantize'

    def __init__(self, image: Slot[Image], dither: str, colors: int = 256):
        super().__init__(**{"image": image, "colors": colors, "dither": dither})
        self.inputs = ImageQuantizeInputs(self)
        self.outputs = ImageQuantizeOutputs(self)
