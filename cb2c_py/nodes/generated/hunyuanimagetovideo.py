
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for HunyuanImageToVideo
class HunyuanImageToVideoInputs(InputSlots):
    positive: Slot[Conditioning]
    vae: Slot[Vae]
    width: Slot[int]
    height: Slot[int]
    length: Slot[int]
    batch_size: Slot[int]
    guidance_type: Slot[str]
    def __init__(self, node: "Node"):
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.vae = Slot[Vae](node, "vae", 'VAE')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.length = Slot[int](node, "length", 'INT')
        self.batch_size = Slot[int](node, "batch_size", 'INT')
        self.guidance_type = Slot[str](node, "guidance_type", ['v1 (concat)', 'v2 (replace)', 'custom'])

class HunyuanImageToVideoOutputs(OutputSlots):
    positive: Slot[Conditioning]
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.latent = Slot[Latent](node, "latent", 'LATENT')

class HunyuanImageToVideo(Node[HunyuanImageToVideoInputs, HunyuanImageToVideoOutputs]):
    """
    Original name: HunyuanImageToVideo
    No description available.
    """
    _original_name: str = 'HunyuanImageToVideo'

    def __init__(self, positive: Slot[Conditioning], vae: Slot[Vae], guidance_type: str, width: int = 848, height: int = 480, length: int = 53, batch_size: int = 1):
        super().__init__(**{"positive": positive, "vae": vae, "width": width, "height": height, "length": length, "batch_size": batch_size, "guidance_type": guidance_type})
        self.inputs = HunyuanImageToVideoInputs(self)
        self.outputs = HunyuanImageToVideoOutputs(self)
