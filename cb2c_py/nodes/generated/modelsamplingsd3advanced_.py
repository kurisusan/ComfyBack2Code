
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ModelSamplingSD3Advanced_
class ModelSamplingSD3Advanced_Inputs(InputSlots):
    model: Slot[Model]
    shift: Slot[float]
    cut_off: Slot[float]
    shift_multiplier: Slot[Union[float, int]]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.shift = Slot[float](node, "shift", 'FLOAT')
        self.cut_off = Slot[float](node, "cut_off", 'FLOAT')
        self.shift_multiplier = Slot[Union[float, int]](node, "shift_multiplier", 'FLOAT')

class ModelSamplingSD3Advanced_Outputs(OutputSlots):
    model: Slot[Model]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')

class ModelSamplingSD3Advanced_(Node[ModelSamplingSD3Advanced_Inputs, ModelSamplingSD3Advanced_Outputs]):
    """
    Original name: ModelSamplingSD3Advanced+
    Category: essentials/sampling
    

    Inputs:
        - model (Model)
        - shift (float) (default: 3.0)
        - cut_off (float) (default: 0.5)
        - shift_multiplier (float) (default: 2)

    Outputs:
        - model (Model)
    """
    _original_name: str = 'ModelSamplingSD3Advanced+'

    def __init__(self, model: Slot[Model], shift: float = 3.0, cut_off: float = 0.5, shift_multiplier: Union[float, int] = 2):
        super().__init__(**{"model": model, "shift": shift, "cut_off": cut_off, "shift_multiplier": shift_multiplier})
        self.inputs = ModelSamplingSD3Advanced_Inputs(self)
        self.outputs = ModelSamplingSD3Advanced_Outputs(self)
