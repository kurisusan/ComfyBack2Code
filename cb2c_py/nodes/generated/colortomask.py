
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for ColorToMask
class ColorToMaskInputs(InputSlots):
    images: Slot[Image]
    invert: Slot[bool]
    red: Slot[int]
    green: Slot[int]
    blue: Slot[int]
    threshold: Slot[int]
    per_batch: Slot[int]
    def __init__(self, node: "Node"):
        self.images = Slot[Image](node, "images", 'IMAGE')
        self.invert = Slot[bool](node, "invert", 'BOOLEAN')
        self.red = Slot[int](node, "red", 'INT')
        self.green = Slot[int](node, "green", 'INT')
        self.blue = Slot[int](node, "blue", 'INT')
        self.threshold = Slot[int](node, "threshold", 'INT')
        self.per_batch = Slot[int](node, "per_batch", 'INT')

class ColorToMaskOutputs(OutputSlots):
    mask: Slot[Any]
    def __init__(self, node: "Node"):
        self.mask = Slot[Any](node, "MASK", 'MASK')

class ColorToMask(Node[ColorToMaskInputs, ColorToMaskOutputs]):
    """
    Original name: ColorToMask
    No description available.
    """
    _original_name: str = 'ColorToMask'

    def __init__(self, images: Slot[Image], invert: bool = False, red: int = 0, green: int = 0, blue: int = 0, threshold: int = 10, per_batch: int = 16):
        super().__init__(**{"images": images, "invert": invert, "red": red, "green": green, "blue": blue, "threshold": threshold, "per_batch": per_batch})
        self.inputs = ColorToMaskInputs(self)
        self.outputs = ColorToMaskOutputs(self)
