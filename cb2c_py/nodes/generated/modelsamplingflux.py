
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ModelSamplingFlux
class ModelSamplingFluxInputs(InputSlots):
    model: Slot[Model]
    max_shift: Slot[float]
    base_shift: Slot[float]
    width: Slot[int]
    height: Slot[int]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.max_shift = Slot[float](node, "max_shift", 'FLOAT')
        self.base_shift = Slot[float](node, "base_shift", 'FLOAT')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')

class ModelSamplingFluxOutputs(OutputSlots):
    model: Slot[Model]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')

class ModelSamplingFlux(Node[ModelSamplingFluxInputs, ModelSamplingFluxOutputs]):
    """
    Original name: ModelSamplingFlux
    Category: advanced/model
    

    Inputs:
        - model (Model)
        - max_shift (float) (default: 1.15)
        - base_shift (float) (default: 0.5)
        - width (int) (default: 1024)
        - height (int) (default: 1024)

    Outputs:
        - model (Model)
    """
    _original_name: str = 'ModelSamplingFlux'

    def __init__(self, model: Slot[Model], max_shift: float = 1.15, base_shift: float = 0.5, width: int = 1024, height: int = 1024):
        super().__init__(**{"model": model, "max_shift": max_shift, "base_shift": base_shift, "width": width, "height": height})
        self.inputs = ModelSamplingFluxInputs(self)
        self.outputs = ModelSamplingFluxOutputs(self)
