
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for BatchCropFromMaskAdvanced
class BatchCropFromMaskAdvancedInputs(InputSlots):
    original_images: Slot[Image]
    masks: Slot[Any]
    crop_size_mult: Slot[float]
    bbox_smooth_alpha: Slot[float]
    def __init__(self, node: "Node"):
        self.original_images = Slot[Image](node, "original_images", 'IMAGE')
        self.masks = Slot[Any](node, "masks", 'MASK')
        self.crop_size_mult = Slot[float](node, "crop_size_mult", 'FLOAT')
        self.bbox_smooth_alpha = Slot[float](node, "bbox_smooth_alpha", 'FLOAT')

class BatchCropFromMaskAdvancedOutputs(OutputSlots):
    original_images: Slot[Image]
    cropped_images: Slot[Image]
    cropped_masks: Slot[Any]
    combined_crop_image: Slot[Image]
    combined_crop_masks: Slot[Any]
    bboxes: Slot[Any]
    combined_bounding_box: Slot[Any]
    bbox_width: Slot[int]
    bbox_height: Slot[int]
    def __init__(self, node: "Node"):
        self.original_images = Slot[Image](node, "original_images", 'IMAGE')
        self.cropped_images = Slot[Image](node, "cropped_images", 'IMAGE')
        self.cropped_masks = Slot[Any](node, "cropped_masks", 'MASK')
        self.combined_crop_image = Slot[Image](node, "combined_crop_image", 'IMAGE')
        self.combined_crop_masks = Slot[Any](node, "combined_crop_masks", 'MASK')
        self.bboxes = Slot[Any](node, "bboxes", 'BBOX')
        self.combined_bounding_box = Slot[Any](node, "combined_bounding_box", 'BBOX')
        self.bbox_width = Slot[int](node, "bbox_width", 'INT')
        self.bbox_height = Slot[int](node, "bbox_height", 'INT')

class BatchCropFromMaskAdvanced(Node[BatchCropFromMaskAdvancedInputs, BatchCropFromMaskAdvancedOutputs]):
    """
    Original name: BatchCropFromMaskAdvanced
    No description available.
    """
    _original_name: str = 'BatchCropFromMaskAdvanced'

    def __init__(self, original_images: Slot[Image], masks: Slot[Any], crop_size_mult: float = 1.0, bbox_smooth_alpha: float = 0.5):
        super().__init__(**{"original_images": original_images, "masks": masks, "crop_size_mult": crop_size_mult, "bbox_smooth_alpha": bbox_smooth_alpha})
        self.inputs = BatchCropFromMaskAdvancedInputs(self)
        self.outputs = BatchCropFromMaskAdvancedOutputs(self)
