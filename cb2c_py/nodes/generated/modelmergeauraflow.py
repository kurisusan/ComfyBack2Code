
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for ModelMergeAuraflow
class ModelMergeAuraflowInputs(InputSlots):
    model1: Slot[Model]
    model2: Slot[Model]
    init_x_linear_: Slot[float]
    positional_encoding: Slot[float]
    cond_seq_linear_: Slot[float]
    register_tokens: Slot[float]
    t_embedder_: Slot[float]
    double_layers_0_: Slot[float]
    double_layers_1_: Slot[float]
    double_layers_2_: Slot[float]
    double_layers_3_: Slot[float]
    single_layers_0_: Slot[float]
    single_layers_1_: Slot[float]
    single_layers_2_: Slot[float]
    single_layers_3_: Slot[float]
    single_layers_4_: Slot[float]
    single_layers_5_: Slot[float]
    single_layers_6_: Slot[float]
    single_layers_7_: Slot[float]
    single_layers_8_: Slot[float]
    single_layers_9_: Slot[float]
    single_layers_10_: Slot[float]
    single_layers_11_: Slot[float]
    single_layers_12_: Slot[float]
    single_layers_13_: Slot[float]
    single_layers_14_: Slot[float]
    single_layers_15_: Slot[float]
    single_layers_16_: Slot[float]
    single_layers_17_: Slot[float]
    single_layers_18_: Slot[float]
    single_layers_19_: Slot[float]
    single_layers_20_: Slot[float]
    single_layers_21_: Slot[float]
    single_layers_22_: Slot[float]
    single_layers_23_: Slot[float]
    single_layers_24_: Slot[float]
    single_layers_25_: Slot[float]
    single_layers_26_: Slot[float]
    single_layers_27_: Slot[float]
    single_layers_28_: Slot[float]
    single_layers_29_: Slot[float]
    single_layers_30_: Slot[float]
    single_layers_31_: Slot[float]
    modF_: Slot[float]
    final_linear_: Slot[float]
    def __init__(self, node: "Node"):
        self.model1 = Slot[Model](node, "model1", 'MODEL')
        self.model2 = Slot[Model](node, "model2", 'MODEL')
        self.init_x_linear_ = Slot[float](node, "init_x_linear_", 'FLOAT')
        self.positional_encoding = Slot[float](node, "positional_encoding", 'FLOAT')
        self.cond_seq_linear_ = Slot[float](node, "cond_seq_linear_", 'FLOAT')
        self.register_tokens = Slot[float](node, "register_tokens", 'FLOAT')
        self.t_embedder_ = Slot[float](node, "t_embedder_", 'FLOAT')
        self.double_layers_0_ = Slot[float](node, "double_layers_0_", 'FLOAT')
        self.double_layers_1_ = Slot[float](node, "double_layers_1_", 'FLOAT')
        self.double_layers_2_ = Slot[float](node, "double_layers_2_", 'FLOAT')
        self.double_layers_3_ = Slot[float](node, "double_layers_3_", 'FLOAT')
        self.single_layers_0_ = Slot[float](node, "single_layers_0_", 'FLOAT')
        self.single_layers_1_ = Slot[float](node, "single_layers_1_", 'FLOAT')
        self.single_layers_2_ = Slot[float](node, "single_layers_2_", 'FLOAT')
        self.single_layers_3_ = Slot[float](node, "single_layers_3_", 'FLOAT')
        self.single_layers_4_ = Slot[float](node, "single_layers_4_", 'FLOAT')
        self.single_layers_5_ = Slot[float](node, "single_layers_5_", 'FLOAT')
        self.single_layers_6_ = Slot[float](node, "single_layers_6_", 'FLOAT')
        self.single_layers_7_ = Slot[float](node, "single_layers_7_", 'FLOAT')
        self.single_layers_8_ = Slot[float](node, "single_layers_8_", 'FLOAT')
        self.single_layers_9_ = Slot[float](node, "single_layers_9_", 'FLOAT')
        self.single_layers_10_ = Slot[float](node, "single_layers_10_", 'FLOAT')
        self.single_layers_11_ = Slot[float](node, "single_layers_11_", 'FLOAT')
        self.single_layers_12_ = Slot[float](node, "single_layers_12_", 'FLOAT')
        self.single_layers_13_ = Slot[float](node, "single_layers_13_", 'FLOAT')
        self.single_layers_14_ = Slot[float](node, "single_layers_14_", 'FLOAT')
        self.single_layers_15_ = Slot[float](node, "single_layers_15_", 'FLOAT')
        self.single_layers_16_ = Slot[float](node, "single_layers_16_", 'FLOAT')
        self.single_layers_17_ = Slot[float](node, "single_layers_17_", 'FLOAT')
        self.single_layers_18_ = Slot[float](node, "single_layers_18_", 'FLOAT')
        self.single_layers_19_ = Slot[float](node, "single_layers_19_", 'FLOAT')
        self.single_layers_20_ = Slot[float](node, "single_layers_20_", 'FLOAT')
        self.single_layers_21_ = Slot[float](node, "single_layers_21_", 'FLOAT')
        self.single_layers_22_ = Slot[float](node, "single_layers_22_", 'FLOAT')
        self.single_layers_23_ = Slot[float](node, "single_layers_23_", 'FLOAT')
        self.single_layers_24_ = Slot[float](node, "single_layers_24_", 'FLOAT')
        self.single_layers_25_ = Slot[float](node, "single_layers_25_", 'FLOAT')
        self.single_layers_26_ = Slot[float](node, "single_layers_26_", 'FLOAT')
        self.single_layers_27_ = Slot[float](node, "single_layers_27_", 'FLOAT')
        self.single_layers_28_ = Slot[float](node, "single_layers_28_", 'FLOAT')
        self.single_layers_29_ = Slot[float](node, "single_layers_29_", 'FLOAT')
        self.single_layers_30_ = Slot[float](node, "single_layers_30_", 'FLOAT')
        self.single_layers_31_ = Slot[float](node, "single_layers_31_", 'FLOAT')
        self.modF_ = Slot[float](node, "modF_", 'FLOAT')
        self.final_linear_ = Slot[float](node, "final_linear_", 'FLOAT')

class ModelMergeAuraflowOutputs(OutputSlots):
    model: Slot[Model]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')

class ModelMergeAuraflow(Node[ModelMergeAuraflowInputs, ModelMergeAuraflowOutputs]):
    """
    Original name: ModelMergeAuraflow
    No description available.
    """
    _original_name: str = 'ModelMergeAuraflow'

    def __init__(self, model1: Slot[Model], model2: Slot[Model], init_x_linear_: float = 1.0, positional_encoding: float = 1.0, cond_seq_linear_: float = 1.0, register_tokens: float = 1.0, t_embedder_: float = 1.0, double_layers_0_: float = 1.0, double_layers_1_: float = 1.0, double_layers_2_: float = 1.0, double_layers_3_: float = 1.0, single_layers_0_: float = 1.0, single_layers_1_: float = 1.0, single_layers_2_: float = 1.0, single_layers_3_: float = 1.0, single_layers_4_: float = 1.0, single_layers_5_: float = 1.0, single_layers_6_: float = 1.0, single_layers_7_: float = 1.0, single_layers_8_: float = 1.0, single_layers_9_: float = 1.0, single_layers_10_: float = 1.0, single_layers_11_: float = 1.0, single_layers_12_: float = 1.0, single_layers_13_: float = 1.0, single_layers_14_: float = 1.0, single_layers_15_: float = 1.0, single_layers_16_: float = 1.0, single_layers_17_: float = 1.0, single_layers_18_: float = 1.0, single_layers_19_: float = 1.0, single_layers_20_: float = 1.0, single_layers_21_: float = 1.0, single_layers_22_: float = 1.0, single_layers_23_: float = 1.0, single_layers_24_: float = 1.0, single_layers_25_: float = 1.0, single_layers_26_: float = 1.0, single_layers_27_: float = 1.0, single_layers_28_: float = 1.0, single_layers_29_: float = 1.0, single_layers_30_: float = 1.0, single_layers_31_: float = 1.0, modF_: float = 1.0, final_linear_: float = 1.0):
        super().__init__(**{"model1": model1, "model2": model2, "init_x_linear.": init_x_linear_, "positional_encoding": positional_encoding, "cond_seq_linear.": cond_seq_linear_, "register_tokens": register_tokens, "t_embedder.": t_embedder_, "double_layers.0.": double_layers_0_, "double_layers.1.": double_layers_1_, "double_layers.2.": double_layers_2_, "double_layers.3.": double_layers_3_, "single_layers.0.": single_layers_0_, "single_layers.1.": single_layers_1_, "single_layers.2.": single_layers_2_, "single_layers.3.": single_layers_3_, "single_layers.4.": single_layers_4_, "single_layers.5.": single_layers_5_, "single_layers.6.": single_layers_6_, "single_layers.7.": single_layers_7_, "single_layers.8.": single_layers_8_, "single_layers.9.": single_layers_9_, "single_layers.10.": single_layers_10_, "single_layers.11.": single_layers_11_, "single_layers.12.": single_layers_12_, "single_layers.13.": single_layers_13_, "single_layers.14.": single_layers_14_, "single_layers.15.": single_layers_15_, "single_layers.16.": single_layers_16_, "single_layers.17.": single_layers_17_, "single_layers.18.": single_layers_18_, "single_layers.19.": single_layers_19_, "single_layers.20.": single_layers_20_, "single_layers.21.": single_layers_21_, "single_layers.22.": single_layers_22_, "single_layers.23.": single_layers_23_, "single_layers.24.": single_layers_24_, "single_layers.25.": single_layers_25_, "single_layers.26.": single_layers_26_, "single_layers.27.": single_layers_27_, "single_layers.28.": single_layers_28_, "single_layers.29.": single_layers_29_, "single_layers.30.": single_layers_30_, "single_layers.31.": single_layers_31_, "modF.": modF_, "final_linear.": final_linear_})
        self.inputs = ModelMergeAuraflowInputs(self)
        self.outputs = ModelMergeAuraflowOutputs(self)
