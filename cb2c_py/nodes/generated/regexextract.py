
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for RegexExtract
class RegexExtractInputs(InputSlots):
    string: Slot[str]
    regex_pattern: Slot[str]
    mode: Slot[Any]
    case_insensitive: Slot[bool]
    multiline: Slot[bool]
    dotall: Slot[bool]
    group_index: Slot[int]
    def __init__(self, node: "Node"):
        self.string = Slot[str](node, "string", 'STRING')
        self.regex_pattern = Slot[str](node, "regex_pattern", 'STRING')
        self.mode = Slot[Any](node, "mode", 'COMBO')
        self.case_insensitive = Slot[bool](node, "case_insensitive", 'BOOLEAN')
        self.multiline = Slot[bool](node, "multiline", 'BOOLEAN')
        self.dotall = Slot[bool](node, "dotall", 'BOOLEAN')
        self.group_index = Slot[int](node, "group_index", 'INT')

class RegexExtractOutputs(OutputSlots):
    string: Slot[str]
    def __init__(self, node: "Node"):
        self.string = Slot[str](node, "STRING", 'STRING')

class RegexExtract(Node[RegexExtractInputs, RegexExtractOutputs]):
    """
    Original name: RegexExtract
    No description available.
    """
    _original_name: str = 'RegexExtract'

    def __init__(self, string: str, regex_pattern: str, mode: Slot[Any], case_insensitive: bool = True, multiline: bool = False, dotall: bool = False, group_index: int = 1):
        super().__init__(**{"string": string, "regex_pattern": regex_pattern, "mode": mode, "case_insensitive": case_insensitive, "multiline": multiline, "dotall": dotall, "group_index": group_index})
        self.inputs = RegexExtractInputs(self)
        self.outputs = RegexExtractOutputs(self)
