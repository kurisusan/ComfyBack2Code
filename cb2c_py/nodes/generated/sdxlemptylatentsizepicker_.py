
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node

class SDXLEmptyLatentSizePicker_(Node):
    """
    Original name: SDXLEmptyLatentSizePicker+
    No description available.
    """
    _inputs = {
    "resolution": [
        [
            "704x1408 (0.5)",
            "704x1344 (0.52)",
            "768x1344 (0.57)",
            "768x1280 (0.6)",
            "832x1216 (0.68)",
            "832x1152 (0.72)",
            "896x1152 (0.78)",
            "896x1088 (0.82)",
            "960x1088 (0.88)",
            "960x1024 (0.94)",
            "1024x1024 (1.0)",
            "1024x960 (1.07)",
            "1088x960 (1.13)",
            "1088x896 (1.21)",
            "1152x896 (1.29)",
            "1152x832 (1.38)",
            "1216x832 (1.46)",
            "1280x768 (1.67)",
            "1344x768 (1.75)",
            "1344x704 (1.91)",
            "1408x704 (2.0)",
            "1472x704 (2.09)",
            "1536x640 (2.4)",
            "1600x640 (2.5)",
            "1664x576 (2.89)",
            "1728x576 (3.0)"
        ],
        {
            "default": "1024x1024 (1.0)"
        }
    ],
    "batch_size": [
        "INT",
        {
            "default": 1,
            "min": 1,
            "max": 4096
        }
    ],
    "width_override": [
        "INT",
        {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
        }
    ],
    "height_override": [
        "INT",
        {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
        }
    ]
}
    _outputs = [
    "LATENT",
    "INT",
    "INT"
]
    _original_name = "SDXLEmptyLatentSizePicker+"

    def __init__(self, resolution="1024x1024 (1.0)", batch_size=1, width_override=0, height_override=0):
        super().__init__(resolution=resolution, batch_size=batch_size, width_override=width_override, height_override=height_override)

    @classmethod
    def get_inputs(cls):
        return cls._inputs

    @classmethod
    def get_outputs(cls):
        return cls._outputs
