
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for ConditioningAverage
class ConditioningAverageInputs(InputSlots):
    conditioning_to: Slot[Conditioning]
    conditioning_from: Slot[Conditioning]
    conditioning_to_strength: Slot[float]
    def __init__(self, node: "Node"):
        self.conditioning_to = Slot[Conditioning](node, "conditioning_to", 'CONDITIONING')
        self.conditioning_from = Slot[Conditioning](node, "conditioning_from", 'CONDITIONING')
        self.conditioning_to_strength = Slot[float](node, "conditioning_to_strength", 'FLOAT')

class ConditioningAverageOutputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class ConditioningAverage(Node[ConditioningAverageInputs, ConditioningAverageOutputs]):
    """
    Original name: ConditioningAverage
    No description available.
    """
    _original_name: str = 'ConditioningAverage'

    def __init__(self, conditioning_to: Slot[Conditioning], conditioning_from: Slot[Conditioning], conditioning_to_strength: float = 1.0):
        super().__init__(**{"conditioning_to": conditioning_to, "conditioning_from": conditioning_from, "conditioning_to_strength": conditioning_to_strength})
        self.inputs = ConditioningAverageInputs(self)
        self.outputs = ConditioningAverageOutputs(self)
