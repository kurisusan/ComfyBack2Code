
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for BatchCLIPSeg
class BatchCLIPSegInputs(InputSlots):
    images: Slot[Image]
    text: Slot[str]
    threshold: Slot[float]
    binary_mask: Slot[bool]
    combine_mask: Slot[bool]
    use_cuda: Slot[bool]
    def __init__(self, node: "Node"):
        self.images = Slot[Image](node, "images", 'IMAGE')
        self.text = Slot[str](node, "text", 'STRING')
        self.threshold = Slot[float](node, "threshold", 'FLOAT')
        self.binary_mask = Slot[bool](node, "binary_mask", 'BOOLEAN')
        self.combine_mask = Slot[bool](node, "combine_mask", 'BOOLEAN')
        self.use_cuda = Slot[bool](node, "use_cuda", 'BOOLEAN')

class BatchCLIPSegOutputs(OutputSlots):
    mask: Slot[Image]
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "Mask", 'MASK')
        self.image = Slot[Image](node, "Image", 'IMAGE')

class BatchCLIPSeg(Node[BatchCLIPSegInputs, BatchCLIPSegOutputs]):
    """
    Original name: BatchCLIPSeg
    No description available.
    """
    _original_name: str = 'BatchCLIPSeg'

    def __init__(self, images: Slot[Image], text: str, threshold: float = 0.5, binary_mask: bool = True, combine_mask: bool = False, use_cuda: bool = True):
        super().__init__(**{"images": images, "text": text, "threshold": threshold, "binary_mask": binary_mask, "combine_mask": combine_mask, "use_cuda": use_cuda})
        self.inputs = BatchCLIPSegInputs(self)
        self.outputs = BatchCLIPSegOutputs(self)
