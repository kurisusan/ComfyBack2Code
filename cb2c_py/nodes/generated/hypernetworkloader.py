
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for HypernetworkLoader
class HypernetworkLoaderInputs(InputSlots):
    model: Slot[Model]
    hypernetwork_name: Slot[str]
    strength: Slot[float]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.hypernetwork_name = Slot[str](node, "hypernetwork_name", [])
        self.strength = Slot[float](node, "strength", 'FLOAT')

class HypernetworkLoaderOutputs(OutputSlots):
    model: Slot[Model]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')

class HypernetworkLoader(Node[HypernetworkLoaderInputs, HypernetworkLoaderOutputs]):
    """
    Original name: HypernetworkLoader
    No description available.
    """
    _original_name: str = 'HypernetworkLoader'

    def __init__(self, model: Slot[Model], hypernetwork_name: str, strength: float = 1.0):
        super().__init__(**{"model": model, "hypernetwork_name": hypernetwork_name, "strength": strength})
        self.inputs = HypernetworkLoaderInputs(self)
        self.outputs = HypernetworkLoaderOutputs(self)
