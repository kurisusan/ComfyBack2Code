
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for LeapfusionHunyuanI2VPatcher
class LeapfusionHunyuanI2VPatcherInputs(InputSlots):
    model: Slot[Model]
    latent: Slot[Latent]
    index: Slot[int]
    start_percent: Slot[float]
    end_percent: Slot[float]
    strength: Slot[float]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.latent = Slot[Latent](node, "latent", 'LATENT')
        self.index = Slot[int](node, "index", 'INT')
        self.start_percent = Slot[float](node, "start_percent", 'FLOAT')
        self.end_percent = Slot[float](node, "end_percent", 'FLOAT')
        self.strength = Slot[float](node, "strength", 'FLOAT')

class LeapfusionHunyuanI2VPatcherOutputs(OutputSlots):
    model: Slot[Model]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')

class LeapfusionHunyuanI2VPatcher(Node[LeapfusionHunyuanI2VPatcherInputs, LeapfusionHunyuanI2VPatcherOutputs]):
    """
    Original name: LeapfusionHunyuanI2VPatcher
    No description available.
    """
    _original_name: str = 'LeapfusionHunyuanI2VPatcher'

    def __init__(self, model: Slot[Model], latent: Slot[Latent], index: int = 0, start_percent: float = 0.0, end_percent: float = 1.0, strength: float = 1.0):
        super().__init__(**{"model": model, "latent": latent, "index": index, "start_percent": start_percent, "end_percent": end_percent, "strength": strength})
        self.inputs = LeapfusionHunyuanI2VPatcherInputs(self)
        self.outputs = LeapfusionHunyuanI2VPatcherOutputs(self)
