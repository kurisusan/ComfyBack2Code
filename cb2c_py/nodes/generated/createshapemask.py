
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for CreateShapeMask
class CreateShapeMaskInputs(InputSlots):
    shape: Slot[str]
    frames: Slot[int]
    location_x: Slot[int]
    location_y: Slot[int]
    grow: Slot[int]
    frame_width: Slot[int]
    frame_height: Slot[int]
    shape_width: Slot[int]
    shape_height: Slot[int]
    def __init__(self, node: "Node"):
        self.shape = Slot[str](node, "shape", ['circle', 'square', 'triangle'])
        self.frames = Slot[int](node, "frames", 'INT')
        self.location_x = Slot[int](node, "location_x", 'INT')
        self.location_y = Slot[int](node, "location_y", 'INT')
        self.grow = Slot[int](node, "grow", 'INT')
        self.frame_width = Slot[int](node, "frame_width", 'INT')
        self.frame_height = Slot[int](node, "frame_height", 'INT')
        self.shape_width = Slot[int](node, "shape_width", 'INT')
        self.shape_height = Slot[int](node, "shape_height", 'INT')

class CreateShapeMaskOutputs(OutputSlots):
    mask: Slot[Image]
    mask_inverted: Slot[Image]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "mask", 'MASK')
        self.mask_inverted = Slot[Image](node, "mask_inverted", 'MASK')

class CreateShapeMask(Node[CreateShapeMaskInputs, CreateShapeMaskOutputs]):
    """
    Original name: CreateShapeMask
    No description available.
    """
    _original_name: str = 'CreateShapeMask'

    def __init__(self, shape: str = 'circle', frames: int = 1, location_x: int = 256, location_y: int = 256, grow: int = 0, frame_width: int = 512, frame_height: int = 512, shape_width: int = 128, shape_height: int = 128):
        super().__init__(**{"shape": shape, "frames": frames, "location_x": location_x, "location_y": location_y, "grow": grow, "frame_width": frame_width, "frame_height": frame_height, "shape_width": shape_width, "shape_height": shape_height})
        self.inputs = CreateShapeMaskInputs(self)
        self.outputs = CreateShapeMaskOutputs(self)
