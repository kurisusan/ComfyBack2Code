
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for RemBGSession_
class RemBGSession_Inputs(InputSlots):
    model: Slot[str]
    providers: Slot[str]
    def __init__(self, node: "Node"):
        self.model = Slot[str](node, "model", ['u2net: general purpose', 'u2netp: lightweight general purpose', 'u2net_human_seg: human segmentation', 'u2net_cloth_seg: cloths Parsing', 'silueta: very small u2net', 'isnet-general-use: general purpose', 'isnet-anime: anime illustrations', 'sam: general purpose'])
        self.providers = Slot[str](node, "providers", ['CPU', 'CUDA', 'ROCM', 'DirectML', 'OpenVINO', 'CoreML', 'Tensorrt', 'Azure'])

class RemBGSession_Outputs(OutputSlots):
    rembg_session: Slot[Any]
    def __init__(self, node: "Node"):
        self.rembg_session = Slot[Any](node, "REMBG_SESSION", 'REMBG_SESSION')

class RemBGSession_(Node[RemBGSession_Inputs, RemBGSession_Outputs]):
    """
    Original name: RemBGSession+
    No description available.
    """
    _original_name: str = 'RemBGSession+'

    def __init__(self, model: str, providers: str):
        super().__init__(**{"model": model, "providers": providers})
        self.inputs = RemBGSession_Inputs(self)
        self.outputs = RemBGSession_Outputs(self)
