
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImagePadKJ
class ImagePadKJInputs(InputSlots):
    image: Slot[Image]
    left: Slot[int]
    right: Slot[int]
    top: Slot[int]
    bottom: Slot[int]
    extra_padding: Slot[int]
    pad_mode: Slot[str]
    color: Slot[str]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.left = Slot[int](node, "left", 'INT')
        self.right = Slot[int](node, "right", 'INT')
        self.top = Slot[int](node, "top", 'INT')
        self.bottom = Slot[int](node, "bottom", 'INT')
        self.extra_padding = Slot[int](node, "extra_padding", 'INT')
        self.pad_mode = Slot[str](node, "pad_mode", ['edge', 'color'])
        self.color = Slot[str](node, "color", 'STRING')

class ImagePadKJOutputs(OutputSlots):
    images: Slot[Image]
    masks: Slot[Image]
    def __init__(self, node: "Node"):
        self.images = Slot[Image](node, "images", 'IMAGE')
        self.masks = Slot[Image](node, "masks", 'MASK')

class ImagePadKJ(Node[ImagePadKJInputs, ImagePadKJOutputs]):
    """
    Original name: ImagePadKJ
    No description available.
    """
    _original_name: str = 'ImagePadKJ'

    def __init__(self, image: Slot[Image], pad_mode: str, left: int = 0, right: int = 0, top: int = 0, bottom: int = 0, extra_padding: int = 0, color: str = '0, 0, 0'):
        super().__init__(**{"image": image, "left": left, "right": right, "top": top, "bottom": bottom, "extra_padding": extra_padding, "pad_mode": pad_mode, "color": color})
        self.inputs = ImagePadKJInputs(self)
        self.outputs = ImagePadKJOutputs(self)
