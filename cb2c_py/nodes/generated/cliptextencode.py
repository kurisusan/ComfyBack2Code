
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for CLIPTextEncode
class CLIPTextEncodeInputs(InputSlots):
    text: Slot[str]
    clip: Slot[Clip]
    def __init__(self, node: "Node"):
        self.text = Slot[str](node, "text", 'STRING')
        self.clip = Slot[Clip](node, "clip", 'CLIP')

class CLIPTextEncodeOutputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class CLIPTextEncode(Node[CLIPTextEncodeInputs, CLIPTextEncodeOutputs]):
    """
    Original name: CLIPTextEncode
    Category: conditioning
    Encodes a text prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images.

    Inputs:
        - text (str)
          The text to be encoded.
        - clip (Clip)
          The CLIP model used for encoding the text.

    Outputs:
        - conditioning (Conditioning)
          A conditioning containing the embedded text used to guide the diffusion model.
    """
    _original_name: str = 'CLIPTextEncode'

    def __init__(self, text: str, clip: Slot[Clip]):
        super().__init__(**{"text": text, "clip": clip})
        self.inputs = CLIPTextEncodeInputs(self)
        self.outputs = CLIPTextEncodeOutputs(self)
