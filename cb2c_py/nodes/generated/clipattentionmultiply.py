
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for CLIPAttentionMultiply
class CLIPAttentionMultiplyInputs(InputSlots):
    clip: Slot[Clip]
    q: Slot[float]
    k: Slot[float]
    v: Slot[float]
    out: Slot[float]
    def __init__(self, node: "Node"):
        self.clip = Slot[Clip](node, "clip", 'CLIP')
        self.q = Slot[float](node, "q", 'FLOAT')
        self.k = Slot[float](node, "k", 'FLOAT')
        self.v = Slot[float](node, "v", 'FLOAT')
        self.out = Slot[float](node, "out", 'FLOAT')

class CLIPAttentionMultiplyOutputs(OutputSlots):
    clip: Slot[Clip]
    def __init__(self, node: "Node"):
        self.clip = Slot[Clip](node, "CLIP", 'CLIP')

class CLIPAttentionMultiply(Node[CLIPAttentionMultiplyInputs, CLIPAttentionMultiplyOutputs]):
    """
    Original name: CLIPAttentionMultiply
    Category: _for_testing/attention_experiments
    

    Inputs:
        - clip (Clip)
        - q (float) (default: 1.0)
        - k (float) (default: 1.0)
        - v (float) (default: 1.0)
        - out (float) (default: 1.0)

    Outputs:
        - clip (Clip)
    """
    _original_name: str = 'CLIPAttentionMultiply'

    def __init__(self, clip: Slot[Clip], q: float = 1.0, k: float = 1.0, v: float = 1.0, out: float = 1.0):
        super().__init__(**{"clip": clip, "q": q, "k": k, "v": v, "out": out})
        self.inputs = CLIPAttentionMultiplyInputs(self)
        self.outputs = CLIPAttentionMultiplyOutputs(self)
