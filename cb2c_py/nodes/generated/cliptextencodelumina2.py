
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for CLIPTextEncodeLumina2
class CLIPTextEncodeLumina2Inputs(InputSlots):
    system_prompt: Slot[str]
    user_prompt: Slot[str]
    clip: Slot[Clip]
    def __init__(self, node: "Node"):
        self.system_prompt = Slot[str](node, "system_prompt", ['superior', 'alignment'])
        self.user_prompt = Slot[str](node, "user_prompt", 'STRING')
        self.clip = Slot[Clip](node, "clip", 'CLIP')

class CLIPTextEncodeLumina2Outputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class CLIPTextEncodeLumina2(Node[CLIPTextEncodeLumina2Inputs, CLIPTextEncodeLumina2Outputs]):
    """
    Original name: CLIPTextEncodeLumina2
    Category: conditioning
    Encodes a system prompt and a user prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images.

    Inputs:
        - system_prompt (str)
          Lumina2 provide two types of system prompts:Superior: You are an assistant designed to generate superior images with the superior degree of image-text alignment based on textual prompts or user prompts. Alignment: You are an assistant designed to generate high-quality images with the highest degree of image-text alignment based on textual prompts.
        - user_prompt (str)
          The text to be encoded.
        - clip (Clip)
          The CLIP model used for encoding the text.

    Outputs:
        - conditioning (Conditioning)
          A conditioning containing the embedded text used to guide the diffusion model.
    """
    _original_name: str = 'CLIPTextEncodeLumina2'

    def __init__(self, system_prompt: str, user_prompt: str, clip: Slot[Clip]):
        super().__init__(**{"system_prompt": system_prompt, "user_prompt": user_prompt, "clip": clip})
        self.inputs = CLIPTextEncodeLumina2Inputs(self)
        self.outputs = CLIPTextEncodeLumina2Outputs(self)
