
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ConditioningTimestepsRange
class ConditioningTimestepsRangeInputs(InputSlots):
    start_percent: Slot[float]
    end_percent: Slot[float]
    def __init__(self, node: "Node"):
        self.start_percent = Slot[float](node, "start_percent", 'FLOAT')
        self.end_percent = Slot[float](node, "end_percent", 'FLOAT')

class ConditioningTimestepsRangeOutputs(OutputSlots):
    timesteps_range: Slot[Any]
    before_range: Slot[Any]
    after_range: Slot[Any]
    def __init__(self, node: "Node"):
        self.timesteps_range = Slot[Any](node, "TIMESTEPS_RANGE", 'TIMESTEPS_RANGE')
        self.before_range = Slot[Any](node, "BEFORE_RANGE", 'TIMESTEPS_RANGE')
        self.after_range = Slot[Any](node, "AFTER_RANGE", 'TIMESTEPS_RANGE')

class ConditioningTimestepsRange(Node[ConditioningTimestepsRangeInputs, ConditioningTimestepsRangeOutputs]):
    """
    Original name: ConditioningTimestepsRange
    Category: advanced/hooks
    

    Inputs:
        - start_percent (float) (default: 0.0)
        - end_percent (float) (default: 1.0)

    Outputs:
        - timesteps_range (Any)
        - before_range (Any)
        - after_range (Any)
    """
    _original_name: str = 'ConditioningTimestepsRange'

    def __init__(self, start_percent: float = 0.0, end_percent: float = 1.0):
        super().__init__(**{"start_percent": start_percent, "end_percent": end_percent})
        self.inputs = ConditioningTimestepsRangeInputs(self)
        self.outputs = ConditioningTimestepsRangeOutputs(self)
