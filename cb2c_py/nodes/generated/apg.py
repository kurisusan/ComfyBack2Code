
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for APG
class APGInputs(InputSlots):
    model: Slot[Model]
    eta: Slot[float]
    norm_threshold: Slot[float]
    momentum: Slot[float]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.eta = Slot[float](node, "eta", 'FLOAT')
        self.norm_threshold = Slot[float](node, "norm_threshold", 'FLOAT')
        self.momentum = Slot[float](node, "momentum", 'FLOAT')

class APGOutputs(OutputSlots):
    model: Slot[Model]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')

class APG(Node[APGInputs, APGOutputs]):
    """
    Original name: APG
    No description available.
    """
    _original_name: str = 'APG'

    def __init__(self, model: Slot[Model], eta: float = 1.0, norm_threshold: float = 5.0, momentum: float = 0.0):
        super().__init__(**{"model": model, "eta": eta, "norm_threshold": norm_threshold, "momentum": momentum})
        self.inputs = APGInputs(self)
        self.outputs = APGOutputs(self)
