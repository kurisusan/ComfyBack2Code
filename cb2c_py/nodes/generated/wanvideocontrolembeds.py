
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for WanVideoControlEmbeds
class WanVideoControlEmbedsInputs(InputSlots):
    latents: Slot[Latent]
    start_percent: Slot[float]
    end_percent: Slot[float]
    def __init__(self, node: "Node"):
        self.latents = Slot[Latent](node, "latents", 'LATENT')
        self.start_percent = Slot[float](node, "start_percent", 'FLOAT')
        self.end_percent = Slot[float](node, "end_percent", 'FLOAT')

class WanVideoControlEmbedsOutputs(OutputSlots):
    image_embeds: Slot[Any]
    def __init__(self, node: "Node"):
        self.image_embeds = Slot[Any](node, "image_embeds", 'WANVIDIMAGE_EMBEDS')

class WanVideoControlEmbeds(Node[WanVideoControlEmbedsInputs, WanVideoControlEmbedsOutputs]):
    """
    Original name: WanVideoControlEmbeds
    Category: WanVideoWrapper
    

    Inputs:
        - latents (Latent)
          Encoded latents to use as control signals
        - start_percent (float) (default: 0.0)
          Start percent of the control signal
        - end_percent (float) (default: 1.0)
          End percent of the control signal

    Outputs:
        - image_embeds (Any)
    """
    _original_name: str = 'WanVideoControlEmbeds'

    def __init__(self, latents: Slot[Latent], start_percent: float = 0.0, end_percent: float = 1.0):
        super().__init__(**{"latents": latents, "start_percent": start_percent, "end_percent": end_percent})
        self.inputs = WanVideoControlEmbedsInputs(self)
        self.outputs = WanVideoControlEmbedsOutputs(self)
