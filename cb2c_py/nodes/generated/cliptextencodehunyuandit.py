
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for CLIPTextEncodeHunyuanDiT
class CLIPTextEncodeHunyuanDiTInputs(InputSlots):
    clip: Slot[Clip]
    bert: Slot[str]
    mt5xl: Slot[str]
    def __init__(self, node: "Node"):
        self.clip = Slot[Clip](node, "clip", 'CLIP')
        self.bert = Slot[str](node, "bert", 'STRING')
        self.mt5xl = Slot[str](node, "mt5xl", 'STRING')

class CLIPTextEncodeHunyuanDiTOutputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class CLIPTextEncodeHunyuanDiT(Node[CLIPTextEncodeHunyuanDiTInputs, CLIPTextEncodeHunyuanDiTOutputs]):
    """
    Original name: CLIPTextEncodeHunyuanDiT
    No description available.
    """
    _original_name: str = 'CLIPTextEncodeHunyuanDiT'

    def __init__(self, clip: Slot[Clip], bert: str, mt5xl: str):
        super().__init__(**{"clip": clip, "bert": bert, "mt5xl": mt5xl})
        self.inputs = CLIPTextEncodeHunyuanDiTInputs(self)
        self.outputs = CLIPTextEncodeHunyuanDiTOutputs(self)
