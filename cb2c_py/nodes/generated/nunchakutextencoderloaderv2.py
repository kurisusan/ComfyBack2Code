
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for NunchakuTextEncoderLoaderV2
class NunchakuTextEncoderLoaderV2Inputs(InputSlots):
    model_type: Slot[str]
    text_encoder1: Slot[str]
    text_encoder2: Slot[str]
    t5_min_length: Slot[int]
    def __init__(self, node: "Node"):
        self.model_type = Slot[str](node, "model_type", ['flux.1'])
        self.text_encoder1 = Slot[str](node, "text_encoder1", [])
        self.text_encoder2 = Slot[str](node, "text_encoder2", [])
        self.t5_min_length = Slot[int](node, "t5_min_length", 'INT')

class NunchakuTextEncoderLoaderV2Outputs(OutputSlots):
    clip: Slot[Clip]
    def __init__(self, node: "Node"):
        self.clip = Slot[Clip](node, "CLIP", 'CLIP')

class NunchakuTextEncoderLoaderV2(Node[NunchakuTextEncoderLoaderV2Inputs, NunchakuTextEncoderLoaderV2Outputs]):
    """
    Original name: NunchakuTextEncoderLoaderV2
    No description available.
    """
    _original_name: str = 'NunchakuTextEncoderLoaderV2'

    def __init__(self, model_type: str, text_encoder1: str, text_encoder2: str, t5_min_length: int = 512):
        super().__init__(**{"model_type": model_type, "text_encoder1": text_encoder1, "text_encoder2": text_encoder2, "t5_min_length": t5_min_length})
        self.inputs = NunchakuTextEncoderLoaderV2Inputs(self)
        self.outputs = NunchakuTextEncoderLoaderV2Outputs(self)
