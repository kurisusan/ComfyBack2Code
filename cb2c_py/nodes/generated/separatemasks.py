
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for SeparateMasks
class SeparateMasksInputs(InputSlots):
    mask: Slot[Image]
    size_threshold_width: Slot[int]
    size_threshold_height: Slot[int]
    mode: Slot[str]
    max_poly_points: Slot[int]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "mask", 'MASK')
        self.size_threshold_width = Slot[int](node, "size_threshold_width", 'INT')
        self.size_threshold_height = Slot[int](node, "size_threshold_height", 'INT')
        self.mode = Slot[str](node, "mode", ['convex_polygons', 'area', 'box'])
        self.max_poly_points = Slot[int](node, "max_poly_points", 'INT')

class SeparateMasksOutputs(OutputSlots):
    mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "mask", 'MASK')

class SeparateMasks(Node[SeparateMasksInputs, SeparateMasksOutputs]):
    """
    Original name: SeparateMasks
    No description available.
    """
    _original_name: str = 'SeparateMasks'

    def __init__(self, mask: Slot[Image], mode: str, size_threshold_width: int = 256, size_threshold_height: int = 256, max_poly_points: int = 8):
        super().__init__(**{"mask": mask, "size_threshold_width": size_threshold_width, "size_threshold_height": size_threshold_height, "mode": mode, "max_poly_points": max_poly_points})
        self.inputs = SeparateMasksInputs(self)
        self.outputs = SeparateMasksOutputs(self)
