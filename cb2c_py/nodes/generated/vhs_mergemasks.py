
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for VHS_MergeMasks
class VHS_MergeMasksInputs(InputSlots):
    mask_A: Slot[Image]
    mask_B: Slot[Image]
    merge_strategy: Slot[str]
    scale_method: Slot[str]
    crop: Slot[str]
    def __init__(self, node: "Node"):
        self.mask_A = Slot[Image](node, "mask_A", 'MASK')
        self.mask_B = Slot[Image](node, "mask_B", 'MASK')
        self.merge_strategy = Slot[str](node, "merge_strategy", ['match A', 'match B', 'match smaller', 'match larger'])
        self.scale_method = Slot[str](node, "scale_method", ['nearest-exact', 'bilinear', 'area', 'bicubic', 'bislerp'])
        self.crop = Slot[str](node, "crop", ['disabled', 'center'])

class VHS_MergeMasksOutputs(OutputSlots):
    mask: Slot[Image]
    count: Slot[int]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "MASK", 'MASK')
        self.count = Slot[int](node, "count", 'INT')

class VHS_MergeMasks(Node[VHS_MergeMasksInputs, VHS_MergeMasksOutputs]):
    """
    Original name: VHS_MergeMasks
    No description available.
    """
    _original_name: str = 'VHS_MergeMasks'

    def __init__(self, mask_A: Slot[Image], mask_B: Slot[Image], merge_strategy: str, scale_method: str, crop: str):
        super().__init__(**{"mask_A": mask_A, "mask_B": mask_B, "merge_strategy": merge_strategy, "scale_method": scale_method, "crop": crop})
        self.inputs = VHS_MergeMasksInputs(self)
        self.outputs = VHS_MergeMasksOutputs(self)
