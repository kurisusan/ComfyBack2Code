
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for VHS_MergeMasks
class VHS_MergeMasksInputs(InputSlots):
    mask_A: Slot[Image]
    mask_B: Slot[Image]
    merge_strategy: Slot[str]
    scale_method: Slot[str]
    crop: Slot[str]
    def __init__(self, node: "Node"):
        self.mask_A = Slot[Image](node, "mask_A", 'MASK')
        self.mask_B = Slot[Image](node, "mask_B", 'MASK')
        self.merge_strategy = Slot[str](node, "merge_strategy", ['match A', 'match B', 'match smaller', 'match larger'])
        self.scale_method = Slot[str](node, "scale_method", ['nearest-exact', 'bilinear', 'area', 'bicubic', 'bislerp'])
        self.crop = Slot[str](node, "crop", ['disabled', 'center'])

class VHS_MergeMasksOutputs(OutputSlots):
    mask: Slot[Image]
    count: Slot[int]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "MASK", 'MASK')
        self.count = Slot[int](node, "count", 'INT')

class VHS_MergeMasks(Node[VHS_MergeMasksInputs, VHS_MergeMasksOutputs]):
    """
    Original name: VHS_MergeMasks
    Category: Video Helper Suite ðŸŽ¥ðŸ…¥ðŸ…—ðŸ…¢/mask
    Merge Masks ðŸŽ¥ðŸ…¥ðŸ…—ðŸ…¢<div style="font-size: 0.8em"><div id=VHS_shortdesc>Combine two groups of masks into a single group of masks</div></div><div style="font-size: 0.8em"><div vhs_title="Inputs" style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">Inputs: <div vhs_title="mask_A" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">mask_A: The first group of masks</div></div><div vhs_title="mask_B" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">mask_B: The first group of masks</div></div></div></div><div vhs_title="Outputs" style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">Outputs: <div vhs_title="MASK" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">MASK: The combined group of masks</div></div><div vhs_title="count" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">count: The length of the combined group</div></div></div></div><div vhs_title="Widgets" style="display: flex; font-size: 0.8em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">Widgets: <div vhs_title="merge_strategy" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">merge_strategy: Determines what the output resolution will be if input resolutions don't match<div style="font-size: 1em"><div vhs_title="match A" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">match A: Always use the resolution for A</div></div><div vhs_title="match B" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">match B: Always use the resolution for B</div></div><div vhs_title="match smaller" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">match smaller: Pick the smaller resolution by area</div></div><div vhs_title="match larger" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">match larger: Pick the larger resolution by area</div></div></div></div></div><div vhs_title="scale_method" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">scale_method: Determines what method to use if scaling is required</div></div><div vhs_title="crop" style="display: flex; font-size: 1em" class="VHS_collapse"><div style="color: #AAA; height: 1.5em;">[<span style="font-family: monospace">-</span>]</div><div style="width: 100%">crop: When sizes don't match, should the resized image have it's aspect ratio changed, or be cropped to maintain aspect ratio</div></div></div></div></div>

    Inputs:
        - mask_A (Image)
        - mask_B (Image)
        - merge_strategy (str)
        - scale_method (str)
        - crop (str)

    Outputs:
        - mask (Image)
        - count (int)
    """
    _original_name: str = 'VHS_MergeMasks'

    def __init__(self, mask_A: Slot[Image], mask_B: Slot[Image], merge_strategy: str, scale_method: str, crop: str):
        super().__init__(**{"mask_A": mask_A, "mask_B": mask_B, "merge_strategy": merge_strategy, "scale_method": scale_method, "crop": crop})
        self.inputs = VHS_MergeMasksInputs(self)
        self.outputs = VHS_MergeMasksOutputs(self)
