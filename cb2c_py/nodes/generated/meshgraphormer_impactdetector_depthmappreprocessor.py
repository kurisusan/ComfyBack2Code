
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for MeshGraphormer_ImpactDetector_DepthMapPreprocessor
class MeshGraphormer_ImpactDetector_DepthMapPreprocessorInputs(InputSlots):
    image: Slot[Image]
    bbox_detector: Slot[Any]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.bbox_detector = Slot[Any](node, "bbox_detector", 'BBOX_DETECTOR')

class MeshGraphormer_ImpactDetector_DepthMapPreprocessorOutputs(OutputSlots):
    image: Slot[Image]
    inpainting_mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')
        self.inpainting_mask = Slot[Image](node, "INPAINTING_MASK", 'MASK')

class MeshGraphormer_ImpactDetector_DepthMapPreprocessor(Node[MeshGraphormer_ImpactDetector_DepthMapPreprocessorInputs, MeshGraphormer_ImpactDetector_DepthMapPreprocessorOutputs]):
    """
    Original name: MeshGraphormer+ImpactDetector-DepthMapPreprocessor
    No description available.
    """
    _original_name: str = 'MeshGraphormer+ImpactDetector-DepthMapPreprocessor'

    def __init__(self, image: Slot[Image], bbox_detector: Slot[Any]):
        super().__init__(**{"image": image, "bbox_detector": bbox_detector})
        self.inputs = MeshGraphormer_ImpactDetector_DepthMapPreprocessorInputs(self)
        self.outputs = MeshGraphormer_ImpactDetector_DepthMapPreprocessorOutputs(self)
