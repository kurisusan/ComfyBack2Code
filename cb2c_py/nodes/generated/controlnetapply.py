
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for ControlNetApply
class ControlNetApplyInputs(InputSlots):
    conditioning: Slot[Conditioning]
    control_net: Slot[Any]
    image: Slot[Image]
    strength: Slot[float]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "conditioning", 'CONDITIONING')
        self.control_net = Slot[Any](node, "control_net", 'CONTROL_NET')
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.strength = Slot[float](node, "strength", 'FLOAT')

class ControlNetApplyOutputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class ControlNetApply(Node[ControlNetApplyInputs, ControlNetApplyOutputs]):
    """
    Original name: ControlNetApply
    No description available.
    """
    _original_name: str = 'ControlNetApply'

    def __init__(self, conditioning: Slot[Conditioning], control_net: Slot[Any], image: Slot[Image], strength: float = 1.0):
        super().__init__(**{"conditioning": conditioning, "control_net": control_net, "image": image, "strength": strength})
        self.inputs = ControlNetApplyInputs(self)
        self.outputs = ControlNetApplyOutputs(self)
