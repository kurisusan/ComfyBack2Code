
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImageResizeKJ
class ImageResizeKJInputs(InputSlots):
    image: Slot[Image]
    width: Slot[int]
    height: Slot[int]
    upscale_method: Slot[str]
    keep_proportion: Slot[bool]
    divisible_by: Slot[int]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.upscale_method = Slot[str](node, "upscale_method", ['nearest-exact', 'bilinear', 'area', 'bicubic', 'lanczos'])
        self.keep_proportion = Slot[bool](node, "keep_proportion", 'BOOLEAN')
        self.divisible_by = Slot[int](node, "divisible_by", 'INT')

class ImageResizeKJOutputs(OutputSlots):
    image: Slot[Image]
    width: Slot[int]
    height: Slot[int]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')

class ImageResizeKJ(Node[ImageResizeKJInputs, ImageResizeKJOutputs]):
    """
    Original name: ImageResizeKJ
    Category: KJNodes/image
    
DEPRECATED!

Due to ComfyUI frontend changes, this node should no longer be used, please check the   
v2 of the node. This node is only kept to not completely break older workflows.  



    Inputs:
        - image (Image)
        - width (int) (default: 512)
        - height (int) (default: 512)
        - upscale_method (str)
        - keep_proportion (bool) (default: False)
        - divisible_by (int) (default: 2)

    Outputs:
        - image (Image)
        - width (int)
        - height (int)
    """
    _original_name: str = 'ImageResizeKJ'

    def __init__(self, image: Slot[Image], upscale_method: str, width: int = 512, height: int = 512, keep_proportion: bool = False, divisible_by: int = 2):
        super().__init__(**{"image": image, "width": width, "height": height, "upscale_method": upscale_method, "keep_proportion": keep_proportion, "divisible_by": divisible_by})
        self.inputs = ImageResizeKJInputs(self)
        self.outputs = ImageResizeKJOutputs(self)
