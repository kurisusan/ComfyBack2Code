
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for PairConditioningSetDefaultCombine
class PairConditioningSetDefaultCombineInputs(InputSlots):
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    positive_DEFAULT: Slot[Conditioning]
    negative_DEFAULT: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')
        self.positive_DEFAULT = Slot[Conditioning](node, "positive_DEFAULT", 'CONDITIONING')
        self.negative_DEFAULT = Slot[Conditioning](node, "negative_DEFAULT", 'CONDITIONING')

class PairConditioningSetDefaultCombineOutputs(OutputSlots):
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')

class PairConditioningSetDefaultCombine(Node[PairConditioningSetDefaultCombineInputs, PairConditioningSetDefaultCombineOutputs]):
    """
    Original name: PairConditioningSetDefaultCombine
    No description available.
    """
    _original_name: str = 'PairConditioningSetDefaultCombine'

    def __init__(self, positive: Slot[Conditioning], negative: Slot[Conditioning], positive_DEFAULT: Slot[Conditioning], negative_DEFAULT: Slot[Conditioning]):
        super().__init__(**{"positive": positive, "negative": negative, "positive_DEFAULT": positive_DEFAULT, "negative_DEFAULT": negative_DEFAULT})
        self.inputs = PairConditioningSetDefaultCombineInputs(self)
        self.outputs = PairConditioningSetDefaultCombineOutputs(self)
