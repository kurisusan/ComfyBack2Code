
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for Image_Resize__rgthree_
class Image_Resize__rgthree_Inputs(InputSlots):
    image: Slot[Image]
    measurement: Slot[str]
    width: Slot[int]
    height: Slot[int]
    fit: Slot[str]
    method: Slot[str]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.measurement = Slot[str](node, "measurement", ['pixels', 'percentage'])
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.fit = Slot[str](node, "fit", ['crop', 'pad', 'contain'])
        self.method = Slot[str](node, "method", ['nearest-exact', 'bilinear', 'area', 'bicubic', 'lanczos'])

class Image_Resize__rgthree_Outputs(OutputSlots):
    image: Slot[Image]
    width: Slot[int]
    height: Slot[int]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')
        self.width = Slot[int](node, "WIDTH", 'INT')
        self.height = Slot[int](node, "HEIGHT", 'INT')

class Image_Resize__rgthree_(Node[Image_Resize__rgthree_Inputs, Image_Resize__rgthree_Outputs]):
    """
    Original name: Image Resize (rgthree)
    Category: rgthree
    Resize the image.

    Inputs:
        - image (Image)
        - measurement (str)
        - width (int) (default: 0)
          The width of the desired resize. A pixel value if measurement is 'pixels' or a 100% scale percentage value if measurement is 'percentage'. Passing '0' will calculate the dimension based on the height.
        - height (int) (default: 0)
        - fit (str)
          'crop' resizes so the image covers the desired width and height, and center-crops the excess, returning exactly the desired width and height.
'pad' resizes so the image fits inside the desired width and height, and fills the empty space returning exactly the desired width and height.
'contain' resizes so the image fits inside the desired width and height, and returns the image with it's new size, with one side liekly smaller than the desired.

Note, if either width or height is '0', the effective fit is 'contain'.
        - method (str)

    Outputs:
        - image (Image)
        - width (int)
        - height (int)
    """
    _original_name: str = 'Image Resize (rgthree)'

    def __init__(self, image: Slot[Image], measurement: str, fit: str, method: str, width: int = 0, height: int = 0):
        super().__init__(**{"image": image, "measurement": measurement, "width": width, "height": height, "fit": fit, "method": method})
        self.inputs = Image_Resize__rgthree_Inputs(self)
        self.outputs = Image_Resize__rgthree_Outputs(self)
