
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for DrawInstanceDiffusionTracking
class DrawInstanceDiffusionTrackingInputs(InputSlots):
    image: Slot[Image]
    tracking: Slot[Any]
    box_line_width: Slot[int]
    draw_text: Slot[bool]
    font: Slot[str]
    font_size: Slot[int]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.tracking = Slot[Any](node, "tracking", 'TRACKING')
        self.box_line_width = Slot[int](node, "box_line_width", 'INT')
        self.draw_text = Slot[bool](node, "draw_text", 'BOOLEAN')
        self.font = Slot[str](node, "font", ['FreeMono.ttf', 'FreeMonoBoldOblique.otf', 'TTNorms-Black.otf'])
        self.font_size = Slot[int](node, "font_size", 'INT')

class DrawInstanceDiffusionTrackingOutputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')

class DrawInstanceDiffusionTracking(Node[DrawInstanceDiffusionTrackingInputs, DrawInstanceDiffusionTrackingOutputs]):
    """
    Original name: DrawInstanceDiffusionTracking
    No description available.
    """
    _original_name: str = 'DrawInstanceDiffusionTracking'

    def __init__(self, image: Slot[Image], tracking: Slot[Any], font: str, box_line_width: int = 2, draw_text: bool = True, font_size: int = 20):
        super().__init__(**{"image": image, "tracking": tracking, "box_line_width": box_line_width, "draw_text": draw_text, "font": font, "font_size": font_size})
        self.inputs = DrawInstanceDiffusionTrackingInputs(self)
        self.outputs = DrawInstanceDiffusionTrackingOutputs(self)
