
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ColorMatch
class ColorMatchInputs(InputSlots):
    image_ref: Slot[Image]
    image_target: Slot[Image]
    method: Slot[str]
    def __init__(self, node: "Node"):
        self.image_ref = Slot[Image](node, "image_ref", 'IMAGE')
        self.image_target = Slot[Image](node, "image_target", 'IMAGE')
        self.method = Slot[str](node, "method", ['mkl', 'hm', 'reinhard', 'mvgd', 'hm-mvgd-hm', 'hm-mkl-hm'])

class ColorMatchOutputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')

class ColorMatch(Node[ColorMatchInputs, ColorMatchOutputs]):
    """
    Original name: ColorMatch
    Category: KJNodes/image
    
color-matcher enables color transfer across images which comes in handy for automatic  
color-grading of photographs, paintings and film sequences as well as light-field  
and stopmotion corrections.  

The methods behind the mappings are based on the approach from Reinhard et al.,  
the Monge-Kantorovich Linearization (MKL) as proposed by Pitie et al. and our analytical solution  
to a Multi-Variate Gaussian Distribution (MVGD) transfer in conjunction with classical histogram   
matching. As shown below our HM-MVGD-HM compound outperforms existing methods.   
https://github.com/hahnec/color-matcher/



    Inputs:
        - image_ref (Image)
        - image_target (Image)
        - method (str) (default: 'mkl')

    Outputs:
        - image (Image)
    """
    _original_name: str = 'ColorMatch'

    def __init__(self, image_ref: Slot[Image], image_target: Slot[Image], method: str = 'mkl'):
        super().__init__(**{"image_ref": image_ref, "image_target": image_target, "method": method})
        self.inputs = ColorMatchInputs(self)
        self.outputs = ColorMatchOutputs(self)
