
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for CLIPTextEncodeFlux
class CLIPTextEncodeFluxInputs(InputSlots):
    clip: Slot[Clip]
    clip_l: Slot[str]
    t5xxl: Slot[str]
    guidance: Slot[float]
    def __init__(self, node: "Node"):
        self.clip = Slot[Clip](node, "clip", 'CLIP')
        self.clip_l = Slot[str](node, "clip_l", 'STRING')
        self.t5xxl = Slot[str](node, "t5xxl", 'STRING')
        self.guidance = Slot[float](node, "guidance", 'FLOAT')

class CLIPTextEncodeFluxOutputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class CLIPTextEncodeFlux(Node[CLIPTextEncodeFluxInputs, CLIPTextEncodeFluxOutputs]):
    """
    Original name: CLIPTextEncodeFlux
    Category: advanced/conditioning/flux
    

    Inputs:
        - clip (Clip)
        - clip_l (str)
        - t5xxl (str)
        - guidance (float) (default: 3.5)

    Outputs:
        - conditioning (Conditioning)
    """
    _original_name: str = 'CLIPTextEncodeFlux'

    def __init__(self, clip: Slot[Clip], clip_l: str, t5xxl: str, guidance: float = 3.5):
        super().__init__(**{"clip": clip, "clip_l": clip_l, "t5xxl": t5xxl, "guidance": guidance})
        self.inputs = CLIPTextEncodeFluxInputs(self)
        self.outputs = CLIPTextEncodeFluxOutputs(self)
