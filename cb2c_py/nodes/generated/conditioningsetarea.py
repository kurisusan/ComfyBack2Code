
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ConditioningSetArea
class ConditioningSetAreaInputs(InputSlots):
    conditioning: Slot[Conditioning]
    width: Slot[int]
    height: Slot[int]
    x: Slot[int]
    y: Slot[int]
    strength: Slot[float]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "conditioning", 'CONDITIONING')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.x = Slot[int](node, "x", 'INT')
        self.y = Slot[int](node, "y", 'INT')
        self.strength = Slot[float](node, "strength", 'FLOAT')

class ConditioningSetAreaOutputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class ConditioningSetArea(Node[ConditioningSetAreaInputs, ConditioningSetAreaOutputs]):
    """
    Original name: ConditioningSetArea
    No description available.
    """
    _original_name: str = 'ConditioningSetArea'

    def __init__(self, conditioning: Slot[Conditioning], width: int = 64, height: int = 64, x: int = 0, y: int = 0, strength: float = 1.0):
        super().__init__(**{"conditioning": conditioning, "width": width, "height": height, "x": x, "y": y, "strength": strength})
        self.inputs = ConditioningSetAreaInputs(self)
        self.outputs = ConditioningSetAreaOutputs(self)
