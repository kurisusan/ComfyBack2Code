
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ConditioningSetMask
class ConditioningSetMaskInputs(InputSlots):
    conditioning: Slot[Conditioning]
    mask: Slot[Image]
    strength: Slot[float]
    set_cond_area: Slot[str]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "conditioning", 'CONDITIONING')
        self.mask = Slot[Image](node, "mask", 'MASK')
        self.strength = Slot[float](node, "strength", 'FLOAT')
        self.set_cond_area = Slot[str](node, "set_cond_area", ['default', 'mask bounds'])

class ConditioningSetMaskOutputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class ConditioningSetMask(Node[ConditioningSetMaskInputs, ConditioningSetMaskOutputs]):
    """
    Original name: ConditioningSetMask
    Category: conditioning
    

    Inputs:
        - conditioning (Conditioning)
        - mask (Image)
        - strength (float) (default: 1.0)
        - set_cond_area (str)

    Outputs:
        - conditioning (Conditioning)
    """
    _original_name: str = 'ConditioningSetMask'

    def __init__(self, conditioning: Slot[Conditioning], mask: Slot[Image], set_cond_area: str, strength: float = 1.0):
        super().__init__(**{"conditioning": conditioning, "mask": mask, "strength": strength, "set_cond_area": set_cond_area})
        self.inputs = ConditioningSetMaskInputs(self)
        self.outputs = ConditioningSetMaskOutputs(self)
