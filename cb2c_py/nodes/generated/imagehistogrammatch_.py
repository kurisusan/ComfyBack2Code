
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImageHistogramMatch_
class ImageHistogramMatch_Inputs(InputSlots):
    image: Slot[Image]
    reference: Slot[Image]
    method: Slot[str]
    factor: Slot[float]
    device: Slot[str]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.reference = Slot[Image](node, "reference", 'IMAGE')
        self.method = Slot[str](node, "method", ['pytorch', 'skimage'])
        self.factor = Slot[float](node, "factor", 'FLOAT')
        self.device = Slot[str](node, "device", ['auto', 'cpu', 'gpu'])

class ImageHistogramMatch_Outputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class ImageHistogramMatch_(Node[ImageHistogramMatch_Inputs, ImageHistogramMatch_Outputs]):
    """
    Original name: ImageHistogramMatch+
    Category: essentials/image processing
    

    Inputs:
        - image (Image)
        - reference (Image)
        - method (str)
        - factor (float) (default: 1.0)
        - device (str)

    Outputs:
        - image (Image)
    """
    _original_name: str = 'ImageHistogramMatch+'

    def __init__(self, image: Slot[Image], reference: Slot[Image], method: str, device: str, factor: float = 1.0):
        super().__init__(**{"image": image, "reference": reference, "method": method, "factor": factor, "device": device})
        self.inputs = ImageHistogramMatch_Inputs(self)
        self.outputs = ImageHistogramMatch_Outputs(self)
