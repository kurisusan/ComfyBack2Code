
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for SamplerSelectHelper_
class SamplerSelectHelper_Inputs(InputSlots):
    euler: Slot[bool]
    euler_cfg_pp: Slot[bool]
    euler_ancestral: Slot[bool]
    euler_ancestral_cfg_pp: Slot[bool]
    heun: Slot[bool]
    heunpp2: Slot[bool]
    dpm_2: Slot[bool]
    dpm_2_ancestral: Slot[bool]
    lms: Slot[bool]
    dpm_fast: Slot[bool]
    dpm_adaptive: Slot[bool]
    dpmpp_2s_ancestral: Slot[bool]
    dpmpp_2s_ancestral_cfg_pp: Slot[bool]
    dpmpp_sde: Slot[bool]
    dpmpp_sde_gpu: Slot[bool]
    dpmpp_2m: Slot[bool]
    dpmpp_2m_cfg_pp: Slot[bool]
    dpmpp_2m_sde: Slot[bool]
    dpmpp_2m_sde_gpu: Slot[bool]
    dpmpp_3m_sde: Slot[bool]
    dpmpp_3m_sde_gpu: Slot[bool]
    ddpm: Slot[bool]
    lcm: Slot[bool]
    ipndm: Slot[bool]
    ipndm_v: Slot[bool]
    deis: Slot[bool]
    res_multistep: Slot[bool]
    res_multistep_cfg_pp: Slot[bool]
    res_multistep_ancestral: Slot[bool]
    res_multistep_ancestral_cfg_pp: Slot[bool]
    gradient_estimation: Slot[bool]
    gradient_estimation_cfg_pp: Slot[bool]
    er_sde: Slot[bool]
    seeds_2: Slot[bool]
    seeds_3: Slot[bool]
    ddim: Slot[bool]
    uni_pc: Slot[bool]
    uni_pc_bh2: Slot[bool]
    def __init__(self, node: "Node"):
        self.euler = Slot[bool](node, "euler", 'BOOLEAN')
        self.euler_cfg_pp = Slot[bool](node, "euler_cfg_pp", 'BOOLEAN')
        self.euler_ancestral = Slot[bool](node, "euler_ancestral", 'BOOLEAN')
        self.euler_ancestral_cfg_pp = Slot[bool](node, "euler_ancestral_cfg_pp", 'BOOLEAN')
        self.heun = Slot[bool](node, "heun", 'BOOLEAN')
        self.heunpp2 = Slot[bool](node, "heunpp2", 'BOOLEAN')
        self.dpm_2 = Slot[bool](node, "dpm_2", 'BOOLEAN')
        self.dpm_2_ancestral = Slot[bool](node, "dpm_2_ancestral", 'BOOLEAN')
        self.lms = Slot[bool](node, "lms", 'BOOLEAN')
        self.dpm_fast = Slot[bool](node, "dpm_fast", 'BOOLEAN')
        self.dpm_adaptive = Slot[bool](node, "dpm_adaptive", 'BOOLEAN')
        self.dpmpp_2s_ancestral = Slot[bool](node, "dpmpp_2s_ancestral", 'BOOLEAN')
        self.dpmpp_2s_ancestral_cfg_pp = Slot[bool](node, "dpmpp_2s_ancestral_cfg_pp", 'BOOLEAN')
        self.dpmpp_sde = Slot[bool](node, "dpmpp_sde", 'BOOLEAN')
        self.dpmpp_sde_gpu = Slot[bool](node, "dpmpp_sde_gpu", 'BOOLEAN')
        self.dpmpp_2m = Slot[bool](node, "dpmpp_2m", 'BOOLEAN')
        self.dpmpp_2m_cfg_pp = Slot[bool](node, "dpmpp_2m_cfg_pp", 'BOOLEAN')
        self.dpmpp_2m_sde = Slot[bool](node, "dpmpp_2m_sde", 'BOOLEAN')
        self.dpmpp_2m_sde_gpu = Slot[bool](node, "dpmpp_2m_sde_gpu", 'BOOLEAN')
        self.dpmpp_3m_sde = Slot[bool](node, "dpmpp_3m_sde", 'BOOLEAN')
        self.dpmpp_3m_sde_gpu = Slot[bool](node, "dpmpp_3m_sde_gpu", 'BOOLEAN')
        self.ddpm = Slot[bool](node, "ddpm", 'BOOLEAN')
        self.lcm = Slot[bool](node, "lcm", 'BOOLEAN')
        self.ipndm = Slot[bool](node, "ipndm", 'BOOLEAN')
        self.ipndm_v = Slot[bool](node, "ipndm_v", 'BOOLEAN')
        self.deis = Slot[bool](node, "deis", 'BOOLEAN')
        self.res_multistep = Slot[bool](node, "res_multistep", 'BOOLEAN')
        self.res_multistep_cfg_pp = Slot[bool](node, "res_multistep_cfg_pp", 'BOOLEAN')
        self.res_multistep_ancestral = Slot[bool](node, "res_multistep_ancestral", 'BOOLEAN')
        self.res_multistep_ancestral_cfg_pp = Slot[bool](node, "res_multistep_ancestral_cfg_pp", 'BOOLEAN')
        self.gradient_estimation = Slot[bool](node, "gradient_estimation", 'BOOLEAN')
        self.gradient_estimation_cfg_pp = Slot[bool](node, "gradient_estimation_cfg_pp", 'BOOLEAN')
        self.er_sde = Slot[bool](node, "er_sde", 'BOOLEAN')
        self.seeds_2 = Slot[bool](node, "seeds_2", 'BOOLEAN')
        self.seeds_3 = Slot[bool](node, "seeds_3", 'BOOLEAN')
        self.ddim = Slot[bool](node, "ddim", 'BOOLEAN')
        self.uni_pc = Slot[bool](node, "uni_pc", 'BOOLEAN')
        self.uni_pc_bh2 = Slot[bool](node, "uni_pc_bh2", 'BOOLEAN')

class SamplerSelectHelper_Outputs(OutputSlots):
    string: Slot[str]
    def __init__(self, node: "Node"):
        self.string = Slot[str](node, "STRING", 'STRING')

class SamplerSelectHelper_(Node[SamplerSelectHelper_Inputs, SamplerSelectHelper_Outputs]):
    """
    Original name: SamplerSelectHelper+
    No description available.
    """
    _original_name: str = 'SamplerSelectHelper+'

    def __init__(self, euler: bool = False, euler_cfg_pp: bool = False, euler_ancestral: bool = False, euler_ancestral_cfg_pp: bool = False, heun: bool = False, heunpp2: bool = False, dpm_2: bool = False, dpm_2_ancestral: bool = False, lms: bool = False, dpm_fast: bool = False, dpm_adaptive: bool = False, dpmpp_2s_ancestral: bool = False, dpmpp_2s_ancestral_cfg_pp: bool = False, dpmpp_sde: bool = False, dpmpp_sde_gpu: bool = False, dpmpp_2m: bool = False, dpmpp_2m_cfg_pp: bool = False, dpmpp_2m_sde: bool = False, dpmpp_2m_sde_gpu: bool = False, dpmpp_3m_sde: bool = False, dpmpp_3m_sde_gpu: bool = False, ddpm: bool = False, lcm: bool = False, ipndm: bool = False, ipndm_v: bool = False, deis: bool = False, res_multistep: bool = False, res_multistep_cfg_pp: bool = False, res_multistep_ancestral: bool = False, res_multistep_ancestral_cfg_pp: bool = False, gradient_estimation: bool = False, gradient_estimation_cfg_pp: bool = False, er_sde: bool = False, seeds_2: bool = False, seeds_3: bool = False, ddim: bool = False, uni_pc: bool = False, uni_pc_bh2: bool = False):
        super().__init__(**{"euler": euler, "euler_cfg_pp": euler_cfg_pp, "euler_ancestral": euler_ancestral, "euler_ancestral_cfg_pp": euler_ancestral_cfg_pp, "heun": heun, "heunpp2": heunpp2, "dpm_2": dpm_2, "dpm_2_ancestral": dpm_2_ancestral, "lms": lms, "dpm_fast": dpm_fast, "dpm_adaptive": dpm_adaptive, "dpmpp_2s_ancestral": dpmpp_2s_ancestral, "dpmpp_2s_ancestral_cfg_pp": dpmpp_2s_ancestral_cfg_pp, "dpmpp_sde": dpmpp_sde, "dpmpp_sde_gpu": dpmpp_sde_gpu, "dpmpp_2m": dpmpp_2m, "dpmpp_2m_cfg_pp": dpmpp_2m_cfg_pp, "dpmpp_2m_sde": dpmpp_2m_sde, "dpmpp_2m_sde_gpu": dpmpp_2m_sde_gpu, "dpmpp_3m_sde": dpmpp_3m_sde, "dpmpp_3m_sde_gpu": dpmpp_3m_sde_gpu, "ddpm": ddpm, "lcm": lcm, "ipndm": ipndm, "ipndm_v": ipndm_v, "deis": deis, "res_multistep": res_multistep, "res_multistep_cfg_pp": res_multistep_cfg_pp, "res_multistep_ancestral": res_multistep_ancestral, "res_multistep_ancestral_cfg_pp": res_multistep_ancestral_cfg_pp, "gradient_estimation": gradient_estimation, "gradient_estimation_cfg_pp": gradient_estimation_cfg_pp, "er_sde": er_sde, "seeds_2": seeds_2, "seeds_3": seeds_3, "ddim": ddim, "uni_pc": uni_pc, "uni_pc_bh2": uni_pc_bh2})
        self.inputs = SamplerSelectHelper_Inputs(self)
        self.outputs = SamplerSelectHelper_Outputs(self)
