
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for CheckpointLoader
class CheckpointLoaderInputs(InputSlots):
    config_name: Slot[str]
    ckpt_name: Slot[str]
    def __init__(self, node: "Node"):
        self.config_name = Slot[str](node, "config_name", [])
        self.ckpt_name = Slot[str](node, "ckpt_name", ['v1-5-pruned-emaonly.safetensors'])

class CheckpointLoaderOutputs(OutputSlots):
    model: Slot[Model]
    clip: Slot[Clip]
    vae: Slot[Vae]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')
        self.clip = Slot[Clip](node, "CLIP", 'CLIP')
        self.vae = Slot[Vae](node, "VAE", 'VAE')

class CheckpointLoader(Node[CheckpointLoaderInputs, CheckpointLoaderOutputs]):
    """
    Original name: CheckpointLoader
    Category: advanced/loaders
    

    Inputs:
        - config_name (str)
        - ckpt_name (str)

    Outputs:
        - model (Model)
        - clip (Clip)
        - vae (Vae)
    """
    _original_name: str = 'CheckpointLoader'

    def __init__(self, config_name: str, ckpt_name: str):
        super().__init__(**{"config_name": config_name, "ckpt_name": ckpt_name})
        self.inputs = CheckpointLoaderInputs(self)
        self.outputs = CheckpointLoaderOutputs(self)
