
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for KSamplerSelect
class KSamplerSelectInputs(InputSlots):
    sampler_name: Slot[str]
    def __init__(self, node: "Node"):
        self.sampler_name = Slot[str](node, "sampler_name", ['euler', 'euler_cfg_pp', 'euler_ancestral', 'euler_ancestral_cfg_pp', 'heun', 'heunpp2', 'dpm_2', 'dpm_2_ancestral', 'lms', 'dpm_fast', 'dpm_adaptive', 'dpmpp_2s_ancestral', 'dpmpp_2s_ancestral_cfg_pp', 'dpmpp_sde', 'dpmpp_sde_gpu', 'dpmpp_2m', 'dpmpp_2m_cfg_pp', 'dpmpp_2m_sde', 'dpmpp_2m_sde_gpu', 'dpmpp_3m_sde', 'dpmpp_3m_sde_gpu', 'ddpm', 'lcm', 'ipndm', 'ipndm_v', 'deis', 'res_multistep', 'res_multistep_cfg_pp', 'res_multistep_ancestral', 'res_multistep_ancestral_cfg_pp', 'gradient_estimation', 'gradient_estimation_cfg_pp', 'er_sde', 'seeds_2', 'seeds_3', 'ddim', 'uni_pc', 'uni_pc_bh2'])

class KSamplerSelectOutputs(OutputSlots):
    sampler: Slot[Any]
    def __init__(self, node: "Node"):
        self.sampler = Slot[Any](node, "SAMPLER", 'SAMPLER')

class KSamplerSelect(Node[KSamplerSelectInputs, KSamplerSelectOutputs]):
    """
    Original name: KSamplerSelect
    Category: sampling/custom_sampling/samplers
    

    Inputs:
        - sampler_name (str)

    Outputs:
        - sampler (Any)
    """
    _original_name: str = 'KSamplerSelect'

    def __init__(self, sampler_name: str):
        super().__init__(**{"sampler_name": sampler_name})
        self.inputs = KSamplerSelectInputs(self)
        self.outputs = KSamplerSelectOutputs(self)
