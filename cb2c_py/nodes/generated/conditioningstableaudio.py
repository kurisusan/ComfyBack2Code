
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ConditioningStableAudio
class ConditioningStableAudioInputs(InputSlots):
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    seconds_start: Slot[float]
    seconds_total: Slot[float]
    def __init__(self, node: "Node"):
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')
        self.seconds_start = Slot[float](node, "seconds_start", 'FLOAT')
        self.seconds_total = Slot[float](node, "seconds_total", 'FLOAT')

class ConditioningStableAudioOutputs(OutputSlots):
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')

class ConditioningStableAudio(Node[ConditioningStableAudioInputs, ConditioningStableAudioOutputs]):
    """
    Original name: ConditioningStableAudio
    Category: conditioning
    

    Inputs:
        - positive (Conditioning)
        - negative (Conditioning)
        - seconds_start (float) (default: 0.0)
        - seconds_total (float) (default: 47.0)

    Outputs:
        - positive (Conditioning)
        - negative (Conditioning)
    """
    _original_name: str = 'ConditioningStableAudio'

    def __init__(self, positive: Slot[Conditioning], negative: Slot[Conditioning], seconds_start: float = 0.0, seconds_total: float = 47.0):
        super().__init__(**{"positive": positive, "negative": negative, "seconds_start": seconds_start, "seconds_total": seconds_total})
        self.inputs = ConditioningStableAudioInputs(self)
        self.outputs = ConditioningStableAudioOutputs(self)
