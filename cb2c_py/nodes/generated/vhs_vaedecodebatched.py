
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for VHS_VAEDecodeBatched
class VHS_VAEDecodeBatchedInputs(InputSlots):
    samples: Slot[Latent]
    vae: Slot[Vae]
    per_batch: Slot[int]
    def __init__(self, node: "Node"):
        self.samples = Slot[Latent](node, "samples", 'LATENT')
        self.vae = Slot[Vae](node, "vae", 'VAE')
        self.per_batch = Slot[int](node, "per_batch", 'INT')

class VHS_VAEDecodeBatchedOutputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class VHS_VAEDecodeBatched(Node[VHS_VAEDecodeBatchedInputs, VHS_VAEDecodeBatchedOutputs]):
    """
    Original name: VHS_VAEDecodeBatched
    No description available.
    """
    _original_name: str = 'VHS_VAEDecodeBatched'

    def __init__(self, samples: Slot[Latent], vae: Slot[Vae], per_batch: int = 16):
        super().__init__(**{"samples": samples, "vae": vae, "per_batch": per_batch})
        self.inputs = VHS_VAEDecodeBatchedInputs(self)
        self.outputs = VHS_VAEDecodeBatchedOutputs(self)
