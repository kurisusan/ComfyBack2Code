
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for LatentInterpolate
class LatentInterpolateInputs(InputSlots):
    samples1: Slot[Latent]
    samples2: Slot[Latent]
    ratio: Slot[float]
    def __init__(self, node: "Node"):
        self.samples1 = Slot[Latent](node, "samples1", 'LATENT')
        self.samples2 = Slot[Latent](node, "samples2", 'LATENT')
        self.ratio = Slot[float](node, "ratio", 'FLOAT')

class LatentInterpolateOutputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class LatentInterpolate(Node[LatentInterpolateInputs, LatentInterpolateOutputs]):
    """
    Original name: LatentInterpolate
    No description available.
    """
    _original_name: str = 'LatentInterpolate'

    def __init__(self, samples1: Slot[Latent], samples2: Slot[Latent], ratio: float = 1.0):
        super().__init__(**{"samples1": samples1, "samples2": samples2, "ratio": ratio})
        self.inputs = LatentInterpolateInputs(self)
        self.outputs = LatentInterpolateOutputs(self)
