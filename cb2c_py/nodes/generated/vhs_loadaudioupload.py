
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for VHS_LoadAudioUpload
class VHS_LoadAudioUploadInputs(InputSlots):
    audio: Slot[str]
    start_time: Slot[Union[float, int]]
    duration: Slot[Union[float, int]]
    def __init__(self, node: "Node"):
        self.audio = Slot[str](node, "audio", [])
        self.start_time = Slot[Union[float, int]](node, "start_time", 'FLOAT')
        self.duration = Slot[Union[float, int]](node, "duration", 'FLOAT')

class VHS_LoadAudioUploadOutputs(OutputSlots):
    audio: Slot[Any]
    def __init__(self, node: "Node"):
        self.audio = Slot[Any](node, "audio", 'AUDIO')

class VHS_LoadAudioUpload(Node[VHS_LoadAudioUploadInputs, VHS_LoadAudioUploadOutputs]):
    """
    Original name: VHS_LoadAudioUpload
    No description available.
    """
    _original_name: str = 'VHS_LoadAudioUpload'

    def __init__(self, audio: str, start_time: Union[float, int] = 0, duration: Union[float, int] = 0):
        super().__init__(**{"audio": audio, "start_time": start_time, "duration": duration})
        self.inputs = VHS_LoadAudioUploadInputs(self)
        self.outputs = VHS_LoadAudioUploadOutputs(self)
