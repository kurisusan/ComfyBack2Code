
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for GradientToFloat
class GradientToFloatInputs(InputSlots):
    image: Slot[Image]
    steps: Slot[int]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.steps = Slot[int](node, "steps", 'INT')

class GradientToFloatOutputs(OutputSlots):
    float_x: Slot[float]
    float_y: Slot[float]
    def __init__(self, node: "Node"):
        self.float_x = Slot[float](node, "float_x", 'FLOAT')
        self.float_y = Slot[float](node, "float_y", 'FLOAT')

class GradientToFloat(Node[GradientToFloatInputs, GradientToFloatOutputs]):
    """
    Original name: GradientToFloat
    No description available.
    """
    _original_name: str = 'GradientToFloat'

    def __init__(self, image: Slot[Image], steps: int = 10):
        super().__init__(**{"image": image, "steps": steps})
        self.inputs = GradientToFloatInputs(self)
        self.outputs = GradientToFloatOutputs(self)
