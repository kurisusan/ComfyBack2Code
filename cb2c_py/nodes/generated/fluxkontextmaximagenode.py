
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for FluxKontextMaxImageNode
class FluxKontextMaxImageNodeInputs(InputSlots):
    prompt: Slot[str]
    aspect_ratio: Slot[str]
    guidance: Slot[float]
    steps: Slot[int]
    seed: Slot[int]
    prompt_upsampling: Slot[bool]
    def __init__(self, node: "Node"):
        self.prompt = Slot[str](node, "prompt", 'STRING')
        self.aspect_ratio = Slot[str](node, "aspect_ratio", 'STRING')
        self.guidance = Slot[float](node, "guidance", 'FLOAT')
        self.steps = Slot[int](node, "steps", 'INT')
        self.seed = Slot[int](node, "seed", 'INT')
        self.prompt_upsampling = Slot[bool](node, "prompt_upsampling", 'BOOLEAN')

class FluxKontextMaxImageNodeOutputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class FluxKontextMaxImageNode(Node[FluxKontextMaxImageNodeInputs, FluxKontextMaxImageNodeOutputs]):
    """
    Original name: FluxKontextMaxImageNode
    Category: api node/image/BFL
    Edits images using Flux.1 Kontext [max] via api based on prompt and aspect ratio.

    Inputs:
        - prompt (str) (default: '')
          Prompt for the image generation - specify what and how to edit.
        - aspect_ratio (str) (default: '16:9')
          Aspect ratio of image; must be between 1:4 and 4:1.
        - guidance (float) (default: 3.0)
          Guidance strength for the image generation process
        - steps (int) (default: 50)
          Number of steps for the image generation process
        - seed (int) (default: 1234)
          The random seed used for creating the noise.
        - prompt_upsampling (bool) (default: False)
          Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation, but results are nondeterministic (same seed will not produce exactly the same result).

    Outputs:
        - image (Image)
    """
    _original_name: str = 'FluxKontextMaxImageNode'

    def __init__(self, prompt: str = '', aspect_ratio: str = '16:9', guidance: float = 3.0, steps: int = 50, seed: int = 1234, prompt_upsampling: bool = False):
        super().__init__(**{"prompt": prompt, "aspect_ratio": aspect_ratio, "guidance": guidance, "steps": steps, "seed": seed, "prompt_upsampling": prompt_upsampling})
        self.inputs = FluxKontextMaxImageNodeInputs(self)
        self.outputs = FluxKontextMaxImageNodeOutputs(self)
