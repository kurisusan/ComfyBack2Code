
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node

class FluxKontextMaxImageNode(Node):
    """
    Original name: FluxKontextMaxImageNode
    No description available.
    """
    _inputs = {
    "prompt": [
        "STRING",
        {
            "multiline": True,
            "default": "",
            "tooltip": "Prompt for the image generation - specify what and how to edit."
        }
    ],
    "aspect_ratio": [
        "STRING",
        {
            "default": "16:9",
            "tooltip": "Aspect ratio of image; must be between 1:4 and 4:1."
        }
    ],
    "guidance": [
        "FLOAT",
        {
            "default": 3.0,
            "min": 0.1,
            "max": 99.0,
            "step": 0.1,
            "tooltip": "Guidance strength for the image generation process"
        }
    ],
    "steps": [
        "INT",
        {
            "default": 50,
            "min": 1,
            "max": 150,
            "tooltip": "Number of steps for the image generation process"
        }
    ],
    "seed": [
        "INT",
        {
            "default": 1234,
            "min": 0,
            "max": 18446744073709551615,
            "control_after_generate": True,
            "tooltip": "The random seed used for creating the noise."
        }
    ],
    "prompt_upsampling": [
        "BOOLEAN",
        {
            "default": False,
            "tooltip": "Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation, but results are nondeterministic (same seed will not produce exactly the same result)."
        }
    ]
}
    _outputs = [
    "IMAGE"
]
    _original_name = "FluxKontextMaxImageNode"

    def __init__(self, prompt="", aspect_ratio="16:9", guidance=3.0, steps=50, seed=1234, prompt_upsampling=False):
        super().__init__(prompt=prompt, aspect_ratio=aspect_ratio, guidance=guidance, steps=steps, seed=seed, prompt_upsampling=prompt_upsampling)

    @classmethod
    def get_inputs(cls):
        return cls._inputs

    @classmethod
    def get_outputs(cls):
        return cls._outputs
