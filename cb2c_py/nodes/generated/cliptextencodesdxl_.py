
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for CLIPTextEncodeSDXL_
class CLIPTextEncodeSDXL_Inputs(InputSlots):
    width: Slot[Union[int, float]]
    height: Slot[Union[int, float]]
    size_cond_factor: Slot[int]
    text: Slot[str]
    clip: Slot[Clip]
    def __init__(self, node: "Node"):
        self.width = Slot[Union[int, float]](node, "width", 'INT')
        self.height = Slot[Union[int, float]](node, "height", 'INT')
        self.size_cond_factor = Slot[int](node, "size_cond_factor", 'INT')
        self.text = Slot[str](node, "text", 'STRING')
        self.clip = Slot[Clip](node, "clip", 'CLIP')

class CLIPTextEncodeSDXL_Outputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class CLIPTextEncodeSDXL_(Node[CLIPTextEncodeSDXL_Inputs, CLIPTextEncodeSDXL_Outputs]):
    """
    Original name: CLIPTextEncodeSDXL+
    Category: essentials/conditioning
    

    Inputs:
        - width (int) (default: 1024.0)
        - height (int) (default: 1024.0)
        - size_cond_factor (int) (default: 4)
        - text (str) (default: '')
        - clip (Clip)

    Outputs:
        - conditioning (Conditioning)
    """
    _original_name: str = 'CLIPTextEncodeSDXL+'

    def __init__(self, clip: Slot[Clip], width: Union[int, float] = 1024.0, height: Union[int, float] = 1024.0, size_cond_factor: int = 4, text: str = ''):
        super().__init__(**{"width": width, "height": height, "size_cond_factor": size_cond_factor, "text": text, "clip": clip})
        self.inputs = CLIPTextEncodeSDXL_Inputs(self)
        self.outputs = CLIPTextEncodeSDXL_Outputs(self)
