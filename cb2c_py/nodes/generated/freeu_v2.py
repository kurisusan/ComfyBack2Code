
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for FreeU_V2
class FreeU_V2Inputs(InputSlots):
    model: Slot[Model]
    b1: Slot[float]
    b2: Slot[float]
    s1: Slot[float]
    s2: Slot[float]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.b1 = Slot[float](node, "b1", 'FLOAT')
        self.b2 = Slot[float](node, "b2", 'FLOAT')
        self.s1 = Slot[float](node, "s1", 'FLOAT')
        self.s2 = Slot[float](node, "s2", 'FLOAT')

class FreeU_V2Outputs(OutputSlots):
    model: Slot[Model]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')

class FreeU_V2(Node[FreeU_V2Inputs, FreeU_V2Outputs]):
    """
    Original name: FreeU_V2
    Category: model_patches/unet
    

    Inputs:
        - model (Model)
        - b1 (float) (default: 1.3)
        - b2 (float) (default: 1.4)
        - s1 (float) (default: 0.9)
        - s2 (float) (default: 0.2)

    Outputs:
        - model (Model)
    """
    _original_name: str = 'FreeU_V2'

    def __init__(self, model: Slot[Model], b1: float = 1.3, b2: float = 1.4, s1: float = 0.9, s2: float = 0.2):
        super().__init__(**{"model": model, "b1": b1, "b2": b2, "s1": s1, "s2": s2})
        self.inputs = FreeU_V2Inputs(self)
        self.outputs = FreeU_V2Outputs(self)
