
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for InjectNoiseToLatent
class InjectNoiseToLatentInputs(InputSlots):
    latents: Slot[Latent]
    strength: Slot[float]
    noise: Slot[Latent]
    normalize: Slot[bool]
    average: Slot[bool]
    def __init__(self, node: "Node"):
        self.latents = Slot[Latent](node, "latents", 'LATENT')
        self.strength = Slot[float](node, "strength", 'FLOAT')
        self.noise = Slot[Latent](node, "noise", 'LATENT')
        self.normalize = Slot[bool](node, "normalize", 'BOOLEAN')
        self.average = Slot[bool](node, "average", 'BOOLEAN')

class InjectNoiseToLatentOutputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class InjectNoiseToLatent(Node[InjectNoiseToLatentInputs, InjectNoiseToLatentOutputs]):
    """
    Original name: InjectNoiseToLatent
    Category: KJNodes/noise
    

    Inputs:
        - latents (Latent)
        - strength (float) (default: 0.1)
        - noise (Latent)
        - normalize (bool) (default: False)
        - average (bool) (default: False)

    Outputs:
        - latent (Latent)
    """
    _original_name: str = 'InjectNoiseToLatent'

    def __init__(self, latents: Slot[Latent], noise: Slot[Latent], strength: float = 0.1, normalize: bool = False, average: bool = False):
        super().__init__(**{"latents": latents, "strength": strength, "noise": noise, "normalize": normalize, "average": average})
        self.inputs = InjectNoiseToLatentInputs(self)
        self.outputs = InjectNoiseToLatentOutputs(self)
