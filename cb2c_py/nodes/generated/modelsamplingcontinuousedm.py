
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ModelSamplingContinuousEDM
class ModelSamplingContinuousEDMInputs(InputSlots):
    model: Slot[Model]
    sampling: Slot[str]
    sigma_max: Slot[float]
    sigma_min: Slot[float]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.sampling = Slot[str](node, "sampling", ['v_prediction', 'edm', 'edm_playground_v2.5', 'eps', 'cosmos_rflow'])
        self.sigma_max = Slot[float](node, "sigma_max", 'FLOAT')
        self.sigma_min = Slot[float](node, "sigma_min", 'FLOAT')

class ModelSamplingContinuousEDMOutputs(OutputSlots):
    model: Slot[Model]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')

class ModelSamplingContinuousEDM(Node[ModelSamplingContinuousEDMInputs, ModelSamplingContinuousEDMOutputs]):
    """
    Original name: ModelSamplingContinuousEDM
    No description available.
    """
    _original_name: str = 'ModelSamplingContinuousEDM'

    def __init__(self, model: Slot[Model], sampling: str, sigma_max: float = 120.0, sigma_min: float = 0.002):
        super().__init__(**{"model": model, "sampling": sampling, "sigma_max": sigma_max, "sigma_min": sigma_min})
        self.inputs = ModelSamplingContinuousEDMInputs(self)
        self.outputs = ModelSamplingContinuousEDMOutputs(self)
