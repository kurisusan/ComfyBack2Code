
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImageCrop_
class ImageCrop_Inputs(InputSlots):
    image: Slot[Image]
    width: Slot[int]
    height: Slot[int]
    position: Slot[str]
    x_offset: Slot[int]
    y_offset: Slot[int]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.position = Slot[str](node, "position", ['top-left', 'top-center', 'top-right', 'right-center', 'bottom-right', 'bottom-center', 'bottom-left', 'left-center', 'center'])
        self.x_offset = Slot[int](node, "x_offset", 'INT')
        self.y_offset = Slot[int](node, "y_offset", 'INT')

class ImageCrop_Outputs(OutputSlots):
    image: Slot[Image]
    x: Slot[int]
    y: Slot[int]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')
        self.x = Slot[int](node, "x", 'INT')
        self.y = Slot[int](node, "y", 'INT')

class ImageCrop_(Node[ImageCrop_Inputs, ImageCrop_Outputs]):
    """
    Original name: ImageCrop+
    No description available.
    """
    _original_name: str = 'ImageCrop+'

    def __init__(self, image: Slot[Image], position: str, width: int = 256, height: int = 256, x_offset: int = 0, y_offset: int = 0):
        super().__init__(**{"image": image, "width": width, "height": height, "position": position, "x_offset": x_offset, "y_offset": y_offset})
        self.inputs = ImageCrop_Inputs(self)
        self.outputs = ImageCrop_Outputs(self)
