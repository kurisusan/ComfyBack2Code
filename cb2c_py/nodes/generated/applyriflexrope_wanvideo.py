
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ApplyRifleXRoPE_WanVideo
class ApplyRifleXRoPE_WanVideoInputs(InputSlots):
    model: Slot[Model]
    latent: Slot[Latent]
    k: Slot[int]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.latent = Slot[Latent](node, "latent", 'LATENT')
        self.k = Slot[int](node, "k", 'INT')

class ApplyRifleXRoPE_WanVideoOutputs(OutputSlots):
    model: Slot[Model]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')

class ApplyRifleXRoPE_WanVideo(Node[ApplyRifleXRoPE_WanVideoInputs, ApplyRifleXRoPE_WanVideoOutputs]):
    """
    Original name: ApplyRifleXRoPE_WanVideo
    Category: KJNodes/experimental
    Extends the potential frame count of HunyuanVideo using this method: https://github.com/thu-ml/RIFLEx

    Inputs:
        - model (Model)
        - latent (Latent)
          Only used to get the latent count
        - k (int) (default: 6)
          Index of intrinsic frequency

    Outputs:
        - model (Model)
    """
    _original_name: str = 'ApplyRifleXRoPE_WanVideo'

    def __init__(self, model: Slot[Model], latent: Slot[Latent], k: int = 6):
        super().__init__(**{"model": model, "latent": latent, "k": k})
        self.inputs = ApplyRifleXRoPE_WanVideoInputs(self)
        self.outputs = ApplyRifleXRoPE_WanVideoOutputs(self)
