
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for ConditioningMultiCombine
class ConditioningMultiCombineInputs(InputSlots):
    inputcount: Slot[int]
    operation: Slot[str]
    conditioning_1: Slot[Conditioning]
    conditioning_2: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.inputcount = Slot[int](node, "inputcount", 'INT')
        self.operation = Slot[str](node, "operation", ['combine', 'concat'])
        self.conditioning_1 = Slot[Conditioning](node, "conditioning_1", 'CONDITIONING')
        self.conditioning_2 = Slot[Conditioning](node, "conditioning_2", 'CONDITIONING')

class ConditioningMultiCombineOutputs(OutputSlots):
    combined: Slot[Conditioning]
    inputcount: Slot[int]
    def __init__(self, node: "Node"):
        self.combined = Slot[Conditioning](node, "combined", 'CONDITIONING')
        self.inputcount = Slot[int](node, "inputcount", 'INT')

class ConditioningMultiCombine(Node[ConditioningMultiCombineInputs, ConditioningMultiCombineOutputs]):
    """
    Original name: ConditioningMultiCombine
    No description available.
    """
    _original_name: str = 'ConditioningMultiCombine'

    def __init__(self, conditioning_1: Slot[Conditioning], conditioning_2: Slot[Conditioning], inputcount: int = 2, operation: str = 'combine'):
        super().__init__(**{"inputcount": inputcount, "operation": operation, "conditioning_1": conditioning_1, "conditioning_2": conditioning_2})
        self.inputs = ConditioningMultiCombineInputs(self)
        self.outputs = ConditioningMultiCombineOutputs(self)
