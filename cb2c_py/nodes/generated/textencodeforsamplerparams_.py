
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for TextEncodeForSamplerParams_
class TextEncodeForSamplerParams_Inputs(InputSlots):
    text: Slot[str]
    clip: Slot[Clip]
    def __init__(self, node: "Node"):
        self.text = Slot[str](node, "text", 'STRING')
        self.clip = Slot[Clip](node, "clip", 'CLIP')

class TextEncodeForSamplerParams_Outputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class TextEncodeForSamplerParams_(Node[TextEncodeForSamplerParams_Inputs, TextEncodeForSamplerParams_Outputs]):
    """
    Original name: TextEncodeForSamplerParams+
    No description available.
    """
    _original_name: str = 'TextEncodeForSamplerParams+'

    def __init__(self, clip: Slot[Clip], text: str = 'Separate prompts with at least three dashes\n---\nLike so'):
        super().__init__(**{"text": text, "clip": clip})
        self.inputs = TextEncodeForSamplerParams_Inputs(self)
        self.outputs = TextEncodeForSamplerParams_Outputs(self)
