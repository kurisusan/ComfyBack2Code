
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImageCompositeFromMaskBatch_
class ImageCompositeFromMaskBatch_Inputs(InputSlots):
    image_from: Slot[Image]
    image_to: Slot[Image]
    mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.image_from = Slot[Image](node, "image_from", 'IMAGE')
        self.image_to = Slot[Image](node, "image_to", 'IMAGE')
        self.mask = Slot[Image](node, "mask", 'MASK')

class ImageCompositeFromMaskBatch_Outputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class ImageCompositeFromMaskBatch_(Node[ImageCompositeFromMaskBatch_Inputs, ImageCompositeFromMaskBatch_Outputs]):
    """
    Original name: ImageCompositeFromMaskBatch+
    Category: essentials/image manipulation
    

    Inputs:
        - image_from (Image)
        - image_to (Image)
        - mask (Image)

    Outputs:
        - image (Image)
    """
    _original_name: str = 'ImageCompositeFromMaskBatch+'

    def __init__(self, image_from: Slot[Image], image_to: Slot[Image], mask: Slot[Image]):
        super().__init__(**{"image_from": image_from, "image_to": image_to, "mask": mask})
        self.inputs = ImageCompositeFromMaskBatch_Inputs(self)
        self.outputs = ImageCompositeFromMaskBatch_Outputs(self)
