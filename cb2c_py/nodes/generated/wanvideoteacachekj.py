
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node

class WanVideoTeaCacheKJ(Node):
    """
    Original name: WanVideoTeaCacheKJ
    No description available.
    """
    _inputs = {
    "model": [
        "MODEL"
    ],
    "rel_l1_thresh": [
        "FLOAT",
        {
            "default": 0.275,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001,
            "tooltip": "Threshold for to determine when to apply the cache, compromise between speed and accuracy. When using coefficients a good value range is something between 0.2-0.4 for all but 1.3B model, which should be about 10 times smaller, same as when not using coefficients."
        }
    ],
    "start_percent": [
        "FLOAT",
        {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The start percentage of the steps to use with TeaCache."
        }
    ],
    "end_percent": [
        "FLOAT",
        {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The end percentage of the steps to use with TeaCache."
        }
    ],
    "cache_device": [
        [
            "main_device",
            "offload_device"
        ],
        {
            "default": "offload_device",
            "tooltip": "Device to cache to"
        }
    ],
    "coefficients": [
        [
            "disabled",
            "1.3B",
            "14B",
            "i2v_480",
            "i2v_720"
        ],
        {
            "default": "i2v_480",
            "tooltip": "Coefficients for rescaling the relative l1 distance, if disabled the threshold value should be about 10 times smaller than the value used with coefficients."
        }
    ]
}
    _outputs = [
    "MODEL"
]
    _original_name = "WanVideoTeaCacheKJ"

    def __init__(self, model, rel_l1_thresh=0.275, start_percent=0.1, end_percent=1.0, cache_device="offload_device", coefficients="i2v_480"):
        super().__init__(model=model, rel_l1_thresh=rel_l1_thresh, start_percent=start_percent, end_percent=end_percent, cache_device=cache_device, coefficients=coefficients)

    @classmethod
    def get_inputs(cls):
        return cls._inputs

    @classmethod
    def get_outputs(cls):
        return cls._outputs
