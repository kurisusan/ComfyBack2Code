
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

class KSamplerVariationsStochastic+:
    def __init__(self, **kwargs):
        self.name = "KSamplerVariationsStochastic+"
        self.inputs = kwargs

    @classmethod
    def get_docs(cls):
        return "No description available."

    @classmethod
    def get_inputs(cls):
        return {
    "model": [
        "MODEL"
    ],
    "latent_image": [
        "LATENT"
    ],
    "noise_seed": [
        "INT",
        {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
        }
    ],
    "steps": [
        "INT",
        {
            "default": 25,
            "min": 1,
            "max": 10000
        }
    ],
    "cfg": [
        "FLOAT",
        {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
        }
    ],
    "sampler": [
        [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
        ]
    ],
    "scheduler": [
        [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
        ]
    ],
    "positive": [
        "CONDITIONING"
    ],
    "negative": [
        "CONDITIONING"
    ],
    "variation_seed": [
        "INT:seed",
        {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
        }
    ],
    "variation_strength": [
        "FLOAT",
        {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05,
            "round": 0.01
        }
    ],
    "cfg_scale": [
        "FLOAT",
        {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05,
            "round": 0.01
        }
    ]
}

    @classmethod
    def get_outputs(cls):
        return [
    "LATENT"
]
