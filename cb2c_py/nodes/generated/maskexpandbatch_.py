
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for MaskExpandBatch_
class MaskExpandBatch_Inputs(InputSlots):
    mask: Slot[Image]
    size: Slot[int]
    method: Slot[str]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "mask", 'MASK')
        self.size = Slot[int](node, "size", 'INT')
        self.method = Slot[str](node, "method", ['expand', 'repeat all', 'repeat first', 'repeat last'])

class MaskExpandBatch_Outputs(OutputSlots):
    mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "MASK", 'MASK')

class MaskExpandBatch_(Node[MaskExpandBatch_Inputs, MaskExpandBatch_Outputs]):
    """
    Original name: MaskExpandBatch+
    Category: essentials/mask batch
    

    Inputs:
        - mask (Image)
        - size (int) (default: 16)
        - method (str)

    Outputs:
        - mask (Image)
    """
    _original_name: str = 'MaskExpandBatch+'

    def __init__(self, mask: Slot[Image], method: str, size: int = 16):
        super().__init__(**{"mask": mask, "size": size, "method": method})
        self.inputs = MaskExpandBatch_Inputs(self)
        self.outputs = MaskExpandBatch_Outputs(self)
