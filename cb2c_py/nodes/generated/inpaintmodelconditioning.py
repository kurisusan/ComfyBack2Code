
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for InpaintModelConditioning
class InpaintModelConditioningInputs(InputSlots):
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    vae: Slot[Vae]
    pixels: Slot[Image]
    mask: Slot[Any]
    noise_mask: Slot[bool]
    def __init__(self, node: "Node"):
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')
        self.vae = Slot[Vae](node, "vae", 'VAE')
        self.pixels = Slot[Image](node, "pixels", 'IMAGE')
        self.mask = Slot[Any](node, "mask", 'MASK')
        self.noise_mask = Slot[bool](node, "noise_mask", 'BOOLEAN')

class InpaintModelConditioningOutputs(OutputSlots):
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')
        self.latent = Slot[Latent](node, "latent", 'LATENT')

class InpaintModelConditioning(Node[InpaintModelConditioningInputs, InpaintModelConditioningOutputs]):
    """
    Original name: InpaintModelConditioning
    No description available.
    """
    _original_name: str = 'InpaintModelConditioning'

    def __init__(self, positive: Slot[Conditioning], negative: Slot[Conditioning], vae: Slot[Vae], pixels: Slot[Image], mask: Slot[Any], noise_mask: bool = True):
        super().__init__(**{"positive": positive, "negative": negative, "vae": vae, "pixels": pixels, "mask": mask, "noise_mask": noise_mask})
        self.inputs = InpaintModelConditioningInputs(self)
        self.outputs = InpaintModelConditioningOutputs(self)
