
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for Load3D
class Load3DInputs(InputSlots):
    model_file: Slot[str]
    image: Slot[Any]
    width: Slot[int]
    height: Slot[int]
    def __init__(self, node: "Node"):
        self.model_file = Slot[str](node, "model_file", [])
        self.image = Slot[Any](node, "image", 'LOAD_3D')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')

class Load3DOutputs(OutputSlots):
    image: Slot[Image]
    mask: Slot[Image]
    mesh_path: Slot[str]
    normal: Slot[Image]
    lineart: Slot[Image]
    camera_info: Slot[Any]
    recording_video: Slot[Any]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.mask = Slot[Image](node, "mask", 'MASK')
        self.mesh_path = Slot[str](node, "mesh_path", 'STRING')
        self.normal = Slot[Image](node, "normal", 'IMAGE')
        self.lineart = Slot[Image](node, "lineart", 'IMAGE')
        self.camera_info = Slot[Any](node, "camera_info", 'LOAD3D_CAMERA')
        self.recording_video = Slot[Any](node, "recording_video", 'VIDEO')

class Load3D(Node[Load3DInputs, Load3DOutputs]):
    """
    Original name: Load3D
    No description available.
    """
    _original_name: str = 'Load3D'

    def __init__(self, model_file: str, image: Slot[Any], width: int = 1024, height: int = 1024):
        super().__init__(**{"model_file": model_file, "image": image, "width": width, "height": height})
        self.inputs = Load3DInputs(self)
        self.outputs = Load3DOutputs(self)
