
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for FluxProCannyNode
class FluxProCannyNodeInputs(InputSlots):
    control_image: Slot[Image]
    prompt: Slot[str]
    prompt_upsampling: Slot[bool]
    canny_low_threshold: Slot[float]
    canny_high_threshold: Slot[float]
    skip_preprocessing: Slot[bool]
    guidance: Slot[Union[float, int]]
    steps: Slot[int]
    seed: Slot[int]
    def __init__(self, node: "Node"):
        self.control_image = Slot[Image](node, "control_image", 'IMAGE')
        self.prompt = Slot[str](node, "prompt", 'STRING')
        self.prompt_upsampling = Slot[bool](node, "prompt_upsampling", 'BOOLEAN')
        self.canny_low_threshold = Slot[float](node, "canny_low_threshold", 'FLOAT')
        self.canny_high_threshold = Slot[float](node, "canny_high_threshold", 'FLOAT')
        self.skip_preprocessing = Slot[bool](node, "skip_preprocessing", 'BOOLEAN')
        self.guidance = Slot[Union[float, int]](node, "guidance", 'FLOAT')
        self.steps = Slot[int](node, "steps", 'INT')
        self.seed = Slot[int](node, "seed", 'INT')

class FluxProCannyNodeOutputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class FluxProCannyNode(Node[FluxProCannyNodeInputs, FluxProCannyNodeOutputs]):
    """
    Original name: FluxProCannyNode
    Category: api node/image/BFL
    Generate image using a control image (canny).

    Inputs:
        - control_image (Image)
        - prompt (str) (default: '')
          Prompt for the image generation
        - prompt_upsampling (bool) (default: False)
          Whether to perform upsampling on the prompt. If active, automatically modifies the prompt for more creative generation, but results are nondeterministic (same seed will not produce exactly the same result).
        - canny_low_threshold (float) (default: 0.1)
          Low threshold for Canny edge detection; ignored if skip_processing is True
        - canny_high_threshold (float) (default: 0.4)
          High threshold for Canny edge detection; ignored if skip_processing is True
        - skip_preprocessing (bool) (default: False)
          Whether to skip preprocessing; set to True if control_image already is canny-fied, False if it is a raw image.
        - guidance (float) (default: 30)
          Guidance strength for the image generation process
        - steps (int) (default: 50)
          Number of steps for the image generation process
        - seed (int) (default: 0)
          The random seed used for creating the noise.

    Outputs:
        - image (Image)
    """
    _original_name: str = 'FluxProCannyNode'

    def __init__(self, control_image: Slot[Image], prompt: str = '', prompt_upsampling: bool = False, canny_low_threshold: float = 0.1, canny_high_threshold: float = 0.4, skip_preprocessing: bool = False, guidance: Union[float, int] = 30, steps: int = 50, seed: int = 0):
        super().__init__(**{"control_image": control_image, "prompt": prompt, "prompt_upsampling": prompt_upsampling, "canny_low_threshold": canny_low_threshold, "canny_high_threshold": canny_high_threshold, "skip_preprocessing": skip_preprocessing, "guidance": guidance, "steps": steps, "seed": seed})
        self.inputs = FluxProCannyNodeInputs(self)
        self.outputs = FluxProCannyNodeOutputs(self)
