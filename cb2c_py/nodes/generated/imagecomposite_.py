
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImageComposite_
class ImageComposite_Inputs(InputSlots):
    destination: Slot[Image]
    source: Slot[Image]
    x: Slot[int]
    y: Slot[int]
    offset_x: Slot[int]
    offset_y: Slot[int]
    def __init__(self, node: "Node"):
        self.destination = Slot[Image](node, "destination", 'IMAGE')
        self.source = Slot[Image](node, "source", 'IMAGE')
        self.x = Slot[int](node, "x", 'INT')
        self.y = Slot[int](node, "y", 'INT')
        self.offset_x = Slot[int](node, "offset_x", 'INT')
        self.offset_y = Slot[int](node, "offset_y", 'INT')

class ImageComposite_Outputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class ImageComposite_(Node[ImageComposite_Inputs, ImageComposite_Outputs]):
    """
    Original name: ImageComposite+
    No description available.
    """
    _original_name: str = 'ImageComposite+'

    def __init__(self, destination: Slot[Image], source: Slot[Image], x: int = 0, y: int = 0, offset_x: int = 0, offset_y: int = 0):
        super().__init__(**{"destination": destination, "source": source, "x": x, "y": y, "offset_x": offset_x, "offset_y": offset_y})
        self.inputs = ImageComposite_Inputs(self)
        self.outputs = ImageComposite_Outputs(self)
