
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for CreateTextMask
class CreateTextMaskInputs(InputSlots):
    invert: Slot[bool]
    frames: Slot[int]
    text_x: Slot[int]
    text_y: Slot[int]
    font_size: Slot[int]
    font_color: Slot[str]
    text: Slot[str]
    font: Slot[str]
    width: Slot[int]
    height: Slot[int]
    start_rotation: Slot[int]
    end_rotation: Slot[int]
    def __init__(self, node: "Node"):
        self.invert = Slot[bool](node, "invert", 'BOOLEAN')
        self.frames = Slot[int](node, "frames", 'INT')
        self.text_x = Slot[int](node, "text_x", 'INT')
        self.text_y = Slot[int](node, "text_y", 'INT')
        self.font_size = Slot[int](node, "font_size", 'INT')
        self.font_color = Slot[str](node, "font_color", 'STRING')
        self.text = Slot[str](node, "text", 'STRING')
        self.font = Slot[str](node, "font", ['FreeMono.ttf', 'FreeMonoBoldOblique.otf', 'TTNorms-Black.otf'])
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.start_rotation = Slot[int](node, "start_rotation", 'INT')
        self.end_rotation = Slot[int](node, "end_rotation", 'INT')

class CreateTextMaskOutputs(OutputSlots):
    image: Slot[Image]
    mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')
        self.mask = Slot[Image](node, "MASK", 'MASK')

class CreateTextMask(Node[CreateTextMaskInputs, CreateTextMaskOutputs]):
    """
    Original name: CreateTextMask
    Category: KJNodes/text
    
Creates a text image and mask.  
Looks for fonts from this folder:  
ComfyUI/custom_nodes/ComfyUI-KJNodes/fonts
  
If start_rotation and/or end_rotation are different values,  
creates animation between them.


    Inputs:
        - invert (bool) (default: False)
        - frames (int) (default: 1)
        - text_x (int) (default: 0)
        - text_y (int) (default: 0)
        - font_size (int) (default: 32)
        - font_color (str) (default: 'white')
        - text (str) (default: 'HELLO!')
        - font (str)
        - width (int) (default: 512)
        - height (int) (default: 512)
        - start_rotation (int) (default: 0)
        - end_rotation (int) (default: 0)

    Outputs:
        - image (Image)
        - mask (Image)
    """
    _original_name: str = 'CreateTextMask'

    def __init__(self, font: str, invert: bool = False, frames: int = 1, text_x: int = 0, text_y: int = 0, font_size: int = 32, font_color: str = 'white', text: str = 'HELLO!', width: int = 512, height: int = 512, start_rotation: int = 0, end_rotation: int = 0):
        super().__init__(**{"invert": invert, "frames": frames, "text_x": text_x, "text_y": text_y, "font_size": font_size, "font_color": font_color, "text": text, "font": font, "width": width, "height": height, "start_rotation": start_rotation, "end_rotation": end_rotation})
        self.inputs = CreateTextMaskInputs(self)
        self.outputs = CreateTextMaskOutputs(self)
