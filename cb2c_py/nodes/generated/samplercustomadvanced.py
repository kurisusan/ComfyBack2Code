
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for SamplerCustomAdvanced
class SamplerCustomAdvancedInputs(InputSlots):
    noise: Slot[Any]
    guider: Slot[Any]
    sampler: Slot[Any]
    sigmas: Slot[Any]
    latent_image: Slot[Latent]
    def __init__(self, node: "Node"):
        self.noise = Slot[Any](node, "noise", 'NOISE')
        self.guider = Slot[Any](node, "guider", 'GUIDER')
        self.sampler = Slot[Any](node, "sampler", 'SAMPLER')
        self.sigmas = Slot[Any](node, "sigmas", 'SIGMAS')
        self.latent_image = Slot[Latent](node, "latent_image", 'LATENT')

class SamplerCustomAdvancedOutputs(OutputSlots):
    output: Slot[Latent]
    denoised_output: Slot[Latent]
    def __init__(self, node: "Node"):
        self.output = Slot[Latent](node, "output", 'LATENT')
        self.denoised_output = Slot[Latent](node, "denoised_output", 'LATENT')

class SamplerCustomAdvanced(Node[SamplerCustomAdvancedInputs, SamplerCustomAdvancedOutputs]):
    """
    Original name: SamplerCustomAdvanced
    No description available.
    """
    _original_name: str = 'SamplerCustomAdvanced'

    def __init__(self, noise: Slot[Any], guider: Slot[Any], sampler: Slot[Any], sigmas: Slot[Any], latent_image: Slot[Latent]):
        super().__init__(**{"noise": noise, "guider": guider, "sampler": sampler, "sigmas": sigmas, "latent_image": latent_image})
        self.inputs = SamplerCustomAdvancedInputs(self)
        self.outputs = SamplerCustomAdvancedOutputs(self)
