
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for VAEEncodeTiled
class VAEEncodeTiledInputs(InputSlots):
    pixels: Slot[Image]
    vae: Slot[Vae]
    tile_size: Slot[int]
    overlap: Slot[int]
    temporal_size: Slot[int]
    temporal_overlap: Slot[int]
    def __init__(self, node: "Node"):
        self.pixels = Slot[Image](node, "pixels", 'IMAGE')
        self.vae = Slot[Vae](node, "vae", 'VAE')
        self.tile_size = Slot[int](node, "tile_size", 'INT')
        self.overlap = Slot[int](node, "overlap", 'INT')
        self.temporal_size = Slot[int](node, "temporal_size", 'INT')
        self.temporal_overlap = Slot[int](node, "temporal_overlap", 'INT')

class VAEEncodeTiledOutputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class VAEEncodeTiled(Node[VAEEncodeTiledInputs, VAEEncodeTiledOutputs]):
    """
    Original name: VAEEncodeTiled
    No description available.
    """
    _original_name: str = 'VAEEncodeTiled'

    def __init__(self, pixels: Slot[Image], vae: Slot[Vae], tile_size: int = 512, overlap: int = 64, temporal_size: int = 64, temporal_overlap: int = 8):
        super().__init__(**{"pixels": pixels, "vae": vae, "tile_size": tile_size, "overlap": overlap, "temporal_size": temporal_size, "temporal_overlap": temporal_overlap})
        self.inputs = VAEEncodeTiledInputs(self)
        self.outputs = VAEEncodeTiledOutputs(self)
