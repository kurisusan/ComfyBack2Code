
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImagePrepForICLora
class ImagePrepForICLoraInputs(InputSlots):
    reference_image: Slot[Image]
    output_width: Slot[int]
    output_height: Slot[int]
    border_width: Slot[int]
    def __init__(self, node: "Node"):
        self.reference_image = Slot[Image](node, "reference_image", 'IMAGE')
        self.output_width = Slot[int](node, "output_width", 'INT')
        self.output_height = Slot[int](node, "output_height", 'INT')
        self.border_width = Slot[int](node, "border_width", 'INT')

class ImagePrepForICLoraOutputs(OutputSlots):
    image: Slot[Image]
    mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')
        self.mask = Slot[Image](node, "MASK", 'MASK')

class ImagePrepForICLora(Node[ImagePrepForICLoraInputs, ImagePrepForICLoraOutputs]):
    """
    Original name: ImagePrepForICLora
    Category: image
    

    Inputs:
        - reference_image (Image)
        - output_width (int) (default: 1024)
        - output_height (int) (default: 1024)
        - border_width (int) (default: 0)

    Outputs:
        - image (Image)
        - mask (Image)
    """
    _original_name: str = 'ImagePrepForICLora'

    def __init__(self, reference_image: Slot[Image], output_width: int = 1024, output_height: int = 1024, border_width: int = 0):
        super().__init__(**{"reference_image": reference_image, "output_width": output_width, "output_height": output_height, "border_width": border_width})
        self.inputs = ImagePrepForICLoraInputs(self)
        self.outputs = ImagePrepForICLoraOutputs(self)
