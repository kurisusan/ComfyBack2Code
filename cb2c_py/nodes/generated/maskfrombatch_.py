
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for MaskFromBatch_
class MaskFromBatch_Inputs(InputSlots):
    mask: Slot[Image]
    start: Slot[int]
    length: Slot[int]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "mask", 'MASK')
        self.start = Slot[int](node, "start", 'INT')
        self.length = Slot[int](node, "length", 'INT')

class MaskFromBatch_Outputs(OutputSlots):
    mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "MASK", 'MASK')

class MaskFromBatch_(Node[MaskFromBatch_Inputs, MaskFromBatch_Outputs]):
    """
    Original name: MaskFromBatch+
    No description available.
    """
    _original_name: str = 'MaskFromBatch+'

    def __init__(self, mask: Slot[Image], start: int = 0, length: int = 1):
        super().__init__(**{"mask": mask, "start": start, "length": length})
        self.inputs = MaskFromBatch_Inputs(self)
        self.outputs = MaskFromBatch_Outputs(self)
