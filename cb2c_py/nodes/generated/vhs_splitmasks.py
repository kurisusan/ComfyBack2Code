
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for VHS_SplitMasks
class VHS_SplitMasksInputs(InputSlots):
    mask: Slot[Any]
    split_index: Slot[int]
    def __init__(self, node: "Node"):
        self.mask = Slot[Any](node, "mask", 'MASK')
        self.split_index = Slot[int](node, "split_index", 'INT')

class VHS_SplitMasksOutputs(OutputSlots):
    mask_a: Slot[Any]
    a_count: Slot[int]
    mask_b: Slot[Any]
    b_count: Slot[int]
    def __init__(self, node: "Node"):
        self.mask_a = Slot[Any](node, "MASK_A", 'MASK')
        self.a_count = Slot[int](node, "A_count", 'INT')
        self.mask_b = Slot[Any](node, "MASK_B", 'MASK')
        self.b_count = Slot[int](node, "B_count", 'INT')

class VHS_SplitMasks(Node[VHS_SplitMasksInputs, VHS_SplitMasksOutputs]):
    """
    Original name: VHS_SplitMasks
    No description available.
    """
    _original_name: str = 'VHS_SplitMasks'

    def __init__(self, mask: Slot[Any], split_index: int = 0):
        super().__init__(**{"mask": mask, "split_index": split_index})
        self.inputs = VHS_SplitMasksInputs(self)
        self.outputs = VHS_SplitMasksOutputs(self)
