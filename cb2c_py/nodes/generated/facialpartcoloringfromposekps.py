
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node

class FacialPartColoringFromPoseKps(Node):
    """
    Original name: FacialPartColoringFromPoseKps
    No description available.
    """
    _inputs = {
    "pose_kps": [
        "POSE_KEYPOINT"
    ],
    "mode": [
        [
            "point",
            "polygon"
        ],
        {
            "default": "polygon"
        }
    ],
    "skin": [
        "STRING",
        {
            "default": "rgb(0, 153, 255)",
            "multiline": False
        }
    ],
    "left_eye": [
        "STRING",
        {
            "default": "rgb(0, 204, 153)",
            "multiline": False
        }
    ],
    "right_eye": [
        "STRING",
        {
            "default": "rgb(255, 153, 0)",
            "multiline": False
        }
    ],
    "nose": [
        "STRING",
        {
            "default": "rgb(255, 102, 255)",
            "multiline": False
        }
    ],
    "upper_lip": [
        "STRING",
        {
            "default": "rgb(102, 0, 51)",
            "multiline": False
        }
    ],
    "inner_mouth": [
        "STRING",
        {
            "default": "rgb(255, 204, 255)",
            "multiline": False
        }
    ],
    "lower_lip": [
        "STRING",
        {
            "default": "rgb(255, 0, 102)",
            "multiline": False
        }
    ]
}
    _outputs = [
    "IMAGE"
]
    _original_name = "FacialPartColoringFromPoseKps"

    def __init__(self, pose_kps, mode="polygon", skin="rgb(0, 153, 255)", left_eye="rgb(0, 204, 153)", right_eye="rgb(255, 153, 0)", nose="rgb(255, 102, 255)", upper_lip="rgb(102, 0, 51)", inner_mouth="rgb(255, 204, 255)", lower_lip="rgb(255, 0, 102)"):
        super().__init__(pose_kps=pose_kps, mode=mode, skin=skin, left_eye=left_eye, right_eye=right_eye, nose=nose, upper_lip=upper_lip, inner_mouth=inner_mouth, lower_lip=lower_lip)

    @classmethod
    def get_inputs(cls):
        return cls._inputs

    @classmethod
    def get_outputs(cls):
        return cls._outputs
