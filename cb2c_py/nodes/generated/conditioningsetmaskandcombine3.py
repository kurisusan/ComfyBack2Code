
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node

class ConditioningSetMaskAndCombine3(Node):
    """
    Original name: ConditioningSetMaskAndCombine3
    No description available.
    """
    _inputs = {
    "positive_1": [
        "CONDITIONING"
    ],
    "negative_1": [
        "CONDITIONING"
    ],
    "positive_2": [
        "CONDITIONING"
    ],
    "negative_2": [
        "CONDITIONING"
    ],
    "positive_3": [
        "CONDITIONING"
    ],
    "negative_3": [
        "CONDITIONING"
    ],
    "mask_1": [
        "MASK"
    ],
    "mask_2": [
        "MASK"
    ],
    "mask_3": [
        "MASK"
    ],
    "mask_1_strength": [
        "FLOAT",
        {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
        }
    ],
    "mask_2_strength": [
        "FLOAT",
        {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
        }
    ],
    "mask_3_strength": [
        "FLOAT",
        {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
        }
    ],
    "set_cond_area": [
        [
            "default",
            "mask bounds"
        ]
    ]
}
    _outputs = [
    "CONDITIONING",
    "CONDITIONING"
]
    _original_name = "ConditioningSetMaskAndCombine3"

    def __init__(self, positive_1, negative_1, positive_2, negative_2, positive_3, negative_3, mask_1, mask_2, mask_3, set_cond_area, mask_1_strength=1.0, mask_2_strength=1.0, mask_3_strength=1.0):
        super().__init__(positive_1=positive_1, negative_1=negative_1, positive_2=positive_2, negative_2=negative_2, positive_3=positive_3, negative_3=negative_3, mask_1=mask_1, mask_2=mask_2, mask_3=mask_3, mask_1_strength=mask_1_strength, mask_2_strength=mask_2_strength, mask_3_strength=mask_3_strength, set_cond_area=set_cond_area)

    @classmethod
    def get_inputs(cls):
        return cls._inputs

    @classmethod
    def get_outputs(cls):
        return cls._outputs
