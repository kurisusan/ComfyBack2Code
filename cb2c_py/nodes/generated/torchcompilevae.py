
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for TorchCompileVAE
class TorchCompileVAEInputs(InputSlots):
    vae: Slot[Vae]
    backend: Slot[str]
    fullgraph: Slot[bool]
    mode: Slot[str]
    compile_encoder: Slot[bool]
    compile_decoder: Slot[bool]
    def __init__(self, node: "Node"):
        self.vae = Slot[Vae](node, "vae", 'VAE')
        self.backend = Slot[str](node, "backend", ['inductor', 'cudagraphs'])
        self.fullgraph = Slot[bool](node, "fullgraph", 'BOOLEAN')
        self.mode = Slot[str](node, "mode", ['default', 'max-autotune', 'max-autotune-no-cudagraphs', 'reduce-overhead'])
        self.compile_encoder = Slot[bool](node, "compile_encoder", 'BOOLEAN')
        self.compile_decoder = Slot[bool](node, "compile_decoder", 'BOOLEAN')

class TorchCompileVAEOutputs(OutputSlots):
    vae: Slot[Vae]
    def __init__(self, node: "Node"):
        self.vae = Slot[Vae](node, "VAE", 'VAE')

class TorchCompileVAE(Node[TorchCompileVAEInputs, TorchCompileVAEOutputs]):
    """
    Original name: TorchCompileVAE
    No description available.
    """
    _original_name: str = 'TorchCompileVAE'

    def __init__(self, vae: Slot[Vae], backend: str, fullgraph: bool = False, mode: str = 'default', compile_encoder: bool = True, compile_decoder: bool = True):
        super().__init__(**{"vae": vae, "backend": backend, "fullgraph": fullgraph, "mode": mode, "compile_encoder": compile_encoder, "compile_decoder": compile_decoder})
        self.inputs = TorchCompileVAEInputs(self)
        self.outputs = TorchCompileVAEOutputs(self)
