
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ModelSamplingDiscrete
class ModelSamplingDiscreteInputs(InputSlots):
    model: Slot[Model]
    sampling: Slot[str]
    zsnr: Slot[bool]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.sampling = Slot[str](node, "sampling", ['eps', 'v_prediction', 'lcm', 'x0', 'img_to_img'])
        self.zsnr = Slot[bool](node, "zsnr", 'BOOLEAN')

class ModelSamplingDiscreteOutputs(OutputSlots):
    model: Slot[Model]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')

class ModelSamplingDiscrete(Node[ModelSamplingDiscreteInputs, ModelSamplingDiscreteOutputs]):
    """
    Original name: ModelSamplingDiscrete
    Category: advanced/model
    

    Inputs:
        - model (Model)
        - sampling (str)
        - zsnr (bool) (default: False)

    Outputs:
        - model (Model)
    """
    _original_name: str = 'ModelSamplingDiscrete'

    def __init__(self, model: Slot[Model], sampling: str, zsnr: bool = False):
        super().__init__(**{"model": model, "sampling": sampling, "zsnr": zsnr})
        self.inputs = ModelSamplingDiscreteInputs(self)
        self.outputs = ModelSamplingDiscreteOutputs(self)
