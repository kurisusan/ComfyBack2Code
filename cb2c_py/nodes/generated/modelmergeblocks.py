
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ModelMergeBlocks
class ModelMergeBlocksInputs(InputSlots):
    model1: Slot[Model]
    model2: Slot[Model]
    input: Slot[float]
    middle: Slot[float]
    out: Slot[float]
    def __init__(self, node: "Node"):
        self.model1 = Slot[Model](node, "model1", 'MODEL')
        self.model2 = Slot[Model](node, "model2", 'MODEL')
        self.input = Slot[float](node, "input", 'FLOAT')
        self.middle = Slot[float](node, "middle", 'FLOAT')
        self.out = Slot[float](node, "out", 'FLOAT')

class ModelMergeBlocksOutputs(OutputSlots):
    model: Slot[Model]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')

class ModelMergeBlocks(Node[ModelMergeBlocksInputs, ModelMergeBlocksOutputs]):
    """
    Original name: ModelMergeBlocks
    Category: advanced/model_merging
    

    Inputs:
        - model1 (Model)
        - model2 (Model)
        - input (float) (default: 1.0)
        - middle (float) (default: 1.0)
        - out (float) (default: 1.0)

    Outputs:
        - model (Model)
    """
    _original_name: str = 'ModelMergeBlocks'

    def __init__(self, model1: Slot[Model], model2: Slot[Model], input: float = 1.0, middle: float = 1.0, out: float = 1.0):
        super().__init__(**{"model1": model1, "model2": model2, "input": input, "middle": middle, "out": out})
        self.inputs = ModelMergeBlocksInputs(self)
        self.outputs = ModelMergeBlocksOutputs(self)
