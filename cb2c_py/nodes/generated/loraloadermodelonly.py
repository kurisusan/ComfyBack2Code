
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for LoraLoaderModelOnly
class LoraLoaderModelOnlyInputs(InputSlots):
    model: Slot[Model]
    lora_name: Slot[str]
    strength_model: Slot[float]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.lora_name = Slot[str](node, "lora_name", [])
        self.strength_model = Slot[float](node, "strength_model", 'FLOAT')

class LoraLoaderModelOnlyOutputs(OutputSlots):
    model: Slot[Model]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')

class LoraLoaderModelOnly(Node[LoraLoaderModelOnlyInputs, LoraLoaderModelOnlyOutputs]):
    """
    Original name: LoraLoaderModelOnly
    Category: loaders
    LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.

    Inputs:
        - model (Model)
        - lora_name (str)
        - strength_model (float) (default: 1.0)

    Outputs:
        - model (Model)
          The modified diffusion model.
    """
    _original_name: str = 'LoraLoaderModelOnly'

    def __init__(self, model: Slot[Model], lora_name: str, strength_model: float = 1.0):
        super().__init__(**{"model": model, "lora_name": lora_name, "strength_model": strength_model})
        self.inputs = LoraLoaderModelOnlyInputs(self)
        self.outputs = LoraLoaderModelOnlyOutputs(self)
