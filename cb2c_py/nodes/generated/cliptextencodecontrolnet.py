
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for CLIPTextEncodeControlnet
class CLIPTextEncodeControlnetInputs(InputSlots):
    clip: Slot[Clip]
    conditioning: Slot[Conditioning]
    text: Slot[str]
    def __init__(self, node: "Node"):
        self.clip = Slot[Clip](node, "clip", 'CLIP')
        self.conditioning = Slot[Conditioning](node, "conditioning", 'CONDITIONING')
        self.text = Slot[str](node, "text", 'STRING')

class CLIPTextEncodeControlnetOutputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class CLIPTextEncodeControlnet(Node[CLIPTextEncodeControlnetInputs, CLIPTextEncodeControlnetOutputs]):
    """
    Original name: CLIPTextEncodeControlnet
    No description available.
    """
    _original_name: str = 'CLIPTextEncodeControlnet'

    def __init__(self, clip: Slot[Clip], conditioning: Slot[Conditioning], text: str):
        super().__init__(**{"clip": clip, "conditioning": conditioning, "text": text})
        self.inputs = CLIPTextEncodeControlnetInputs(self)
        self.outputs = CLIPTextEncodeControlnetOutputs(self)
