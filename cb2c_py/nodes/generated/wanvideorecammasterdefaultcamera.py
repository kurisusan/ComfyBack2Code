
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for WanVideoReCamMasterDefaultCamera
class WanVideoReCamMasterDefaultCameraInputs(InputSlots):
    camera_type: Slot[str]
    latents: Slot[Latent]
    def __init__(self, node: "Node"):
        self.camera_type = Slot[str](node, "camera_type", ['pan_right', 'pan_left', 'tilt_up', 'tilt_down', 'zoom_in', 'zoom_out', 'translate_up', 'translate_down', 'arc_left', 'arc_right'])
        self.latents = Slot[Latent](node, "latents", 'LATENT')

class WanVideoReCamMasterDefaultCameraOutputs(OutputSlots):
    camera_poses: Slot[Any]
    def __init__(self, node: "Node"):
        self.camera_poses = Slot[Any](node, "camera_poses", 'CAMERAPOSES')

class WanVideoReCamMasterDefaultCamera(Node[WanVideoReCamMasterDefaultCameraInputs, WanVideoReCamMasterDefaultCameraOutputs]):
    """
    Original name: WanVideoReCamMasterDefaultCamera
    Category: WanVideoWrapper
    https://github.com/KwaiVGI/ReCamMaster

    Inputs:
        - camera_type (str) (default: 'pan_right')
          Camera type to use
        - latents (Latent)
          source video

    Outputs:
        - camera_poses (Any)
    """
    _original_name: str = 'WanVideoReCamMasterDefaultCamera'

    def __init__(self, latents: Slot[Latent], camera_type: str = 'pan_right'):
        super().__init__(**{"camera_type": camera_type, "latents": latents})
        self.inputs = WanVideoReCamMasterDefaultCameraInputs(self)
        self.outputs = WanVideoReCamMasterDefaultCameraOutputs(self)
