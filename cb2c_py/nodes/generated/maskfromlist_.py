
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for MaskFromList_
class MaskFromList_Inputs(InputSlots):
    width: Slot[int]
    height: Slot[int]
    def __init__(self, node: "Node"):
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')

class MaskFromList_Outputs(OutputSlots):
    mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "MASK", 'MASK')

class MaskFromList_(Node[MaskFromList_Inputs, MaskFromList_Outputs]):
    """
    Original name: MaskFromList+
    Category: essentials/mask
    

    Inputs:
        - width (int) (default: 32)
        - height (int) (default: 32)

    Outputs:
        - mask (Image)
    """
    _original_name: str = 'MaskFromList+'

    def __init__(self, width: int = 32, height: int = 32):
        super().__init__(**{"width": width, "height": height})
        self.inputs = MaskFromList_Inputs(self)
        self.outputs = MaskFromList_Outputs(self)
