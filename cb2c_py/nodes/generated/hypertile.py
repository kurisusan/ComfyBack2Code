
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for HyperTile
class HyperTileInputs(InputSlots):
    model: Slot[Model]
    tile_size: Slot[int]
    swap_size: Slot[int]
    max_depth: Slot[int]
    scale_depth: Slot[bool]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.tile_size = Slot[int](node, "tile_size", 'INT')
        self.swap_size = Slot[int](node, "swap_size", 'INT')
        self.max_depth = Slot[int](node, "max_depth", 'INT')
        self.scale_depth = Slot[bool](node, "scale_depth", 'BOOLEAN')

class HyperTileOutputs(OutputSlots):
    model: Slot[Model]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')

class HyperTile(Node[HyperTileInputs, HyperTileOutputs]):
    """
    Original name: HyperTile
    No description available.
    """
    _original_name: str = 'HyperTile'

    def __init__(self, model: Slot[Model], tile_size: int = 256, swap_size: int = 2, max_depth: int = 0, scale_depth: bool = False):
        super().__init__(**{"model": model, "tile_size": tile_size, "swap_size": swap_size, "max_depth": max_depth, "scale_depth": scale_depth})
        self.inputs = HyperTileInputs(self)
        self.outputs = HyperTileOutputs(self)
