
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for CropMask
class CropMaskInputs(InputSlots):
    mask: Slot[Any]
    x: Slot[int]
    y: Slot[int]
    width: Slot[int]
    height: Slot[int]
    def __init__(self, node: "Node"):
        self.mask = Slot[Any](node, "mask", 'MASK')
        self.x = Slot[int](node, "x", 'INT')
        self.y = Slot[int](node, "y", 'INT')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')

class CropMaskOutputs(OutputSlots):
    mask: Slot[Any]
    def __init__(self, node: "Node"):
        self.mask = Slot[Any](node, "MASK", 'MASK')

class CropMask(Node[CropMaskInputs, CropMaskOutputs]):
    """
    Original name: CropMask
    No description available.
    """
    _original_name: str = 'CropMask'

    def __init__(self, mask: Slot[Any], x: int = 0, y: int = 0, width: int = 512, height: int = 512):
        super().__init__(**{"mask": mask, "x": x, "y": y, "width": width, "height": height})
        self.inputs = CropMaskInputs(self)
        self.outputs = CropMaskOutputs(self)
