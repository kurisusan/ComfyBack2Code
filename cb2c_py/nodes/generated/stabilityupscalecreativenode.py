
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node

class StabilityUpscaleCreativeNode(Node):
    """
    Original name: StabilityUpscaleCreativeNode
    No description available.
    """
    _inputs = {
    "image": [
        "IMAGE"
    ],
    "prompt": [
        "STRING",
        {
            "multiline": True,
            "default": "",
            "tooltip": "What you wish to see in the output image. A strong, descriptive prompt that clearly defines elements, colors, and subjects will lead to better results."
        }
    ],
    "creativity": [
        "FLOAT",
        {
            "default": 0.3,
            "min": 0.1,
            "max": 0.5,
            "step": 0.01,
            "tooltip": "Controls the likelihood of creating additional details not heavily conditioned by the init image."
        }
    ],
    "style_preset": [
        [
            "None",
            "3d-model",
            "analog-film",
            "anime",
            "cinematic",
            "comic-book",
            "digital-art",
            "enhance",
            "fantasy-art",
            "isometric",
            "line-art",
            "low-poly",
            "modeling-compound",
            "neon-punk",
            "origami",
            "photographic",
            "pixel-art",
            "tile-texture"
        ],
        {
            "tooltip": "Optional desired style of generated image."
        }
    ],
    "seed": [
        "INT",
        {
            "default": 0,
            "min": 0,
            "max": 4294967294,
            "control_after_generate": True,
            "tooltip": "The random seed used for creating the noise."
        }
    ]
}
    _outputs = [
    "IMAGE"
]
    _original_name = "StabilityUpscaleCreativeNode"

    def __init__(self, image, style_preset, prompt="", creativity=0.3, seed=0):
        super().__init__(image=image, prompt=prompt, creativity=creativity, style_preset=style_preset, seed=seed)

    @classmethod
    def get_inputs(cls):
        return cls._inputs

    @classmethod
    def get_outputs(cls):
        return cls._outputs
