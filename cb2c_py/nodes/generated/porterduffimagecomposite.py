
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for PorterDuffImageComposite
class PorterDuffImageCompositeInputs(InputSlots):
    source: Slot[Image]
    source_alpha: Slot[Any]
    destination: Slot[Image]
    destination_alpha: Slot[Any]
    mode: Slot[str]
    def __init__(self, node: "Node"):
        self.source = Slot[Image](node, "source", 'IMAGE')
        self.source_alpha = Slot[Any](node, "source_alpha", 'MASK')
        self.destination = Slot[Image](node, "destination", 'IMAGE')
        self.destination_alpha = Slot[Any](node, "destination_alpha", 'MASK')
        self.mode = Slot[str](node, "mode", ['ADD', 'CLEAR', 'DARKEN', 'DST', 'DST_ATOP', 'DST_IN', 'DST_OUT', 'DST_OVER', 'LIGHTEN', 'MULTIPLY', 'OVERLAY', 'SCREEN', 'SRC', 'SRC_ATOP', 'SRC_IN', 'SRC_OUT', 'SRC_OVER', 'XOR'])

class PorterDuffImageCompositeOutputs(OutputSlots):
    image: Slot[Image]
    mask: Slot[Any]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')
        self.mask = Slot[Any](node, "MASK", 'MASK')

class PorterDuffImageComposite(Node[PorterDuffImageCompositeInputs, PorterDuffImageCompositeOutputs]):
    """
    Original name: PorterDuffImageComposite
    No description available.
    """
    _original_name: str = 'PorterDuffImageComposite'

    def __init__(self, source: Slot[Image], source_alpha: Slot[Any], destination: Slot[Image], destination_alpha: Slot[Any], mode: str = 'DST'):
        super().__init__(**{"source": source, "source_alpha": source_alpha, "destination": destination, "destination_alpha": destination_alpha, "mode": mode})
        self.inputs = PorterDuffImageCompositeInputs(self)
        self.outputs = PorterDuffImageCompositeOutputs(self)
