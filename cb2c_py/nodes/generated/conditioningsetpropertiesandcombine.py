
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ConditioningSetPropertiesAndCombine
class ConditioningSetPropertiesAndCombineInputs(InputSlots):
    cond: Slot[Conditioning]
    cond_NEW: Slot[Conditioning]
    strength: Slot[float]
    set_cond_area: Slot[str]
    def __init__(self, node: "Node"):
        self.cond = Slot[Conditioning](node, "cond", 'CONDITIONING')
        self.cond_NEW = Slot[Conditioning](node, "cond_NEW", 'CONDITIONING')
        self.strength = Slot[float](node, "strength", 'FLOAT')
        self.set_cond_area = Slot[str](node, "set_cond_area", ['default', 'mask bounds'])

class ConditioningSetPropertiesAndCombineOutputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class ConditioningSetPropertiesAndCombine(Node[ConditioningSetPropertiesAndCombineInputs, ConditioningSetPropertiesAndCombineOutputs]):
    """
    Original name: ConditioningSetPropertiesAndCombine
    No description available.
    """
    _original_name: str = 'ConditioningSetPropertiesAndCombine'

    def __init__(self, cond: Slot[Conditioning], cond_NEW: Slot[Conditioning], set_cond_area: str, strength: float = 1.0):
        super().__init__(**{"cond": cond, "cond_NEW": cond_NEW, "strength": strength, "set_cond_area": set_cond_area})
        self.inputs = ConditioningSetPropertiesAndCombineInputs(self)
        self.outputs = ConditioningSetPropertiesAndCombineOutputs(self)
