
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImageConcanate
class ImageConcanateInputs(InputSlots):
    image1: Slot[Image]
    image2: Slot[Image]
    direction: Slot[str]
    match_image_size: Slot[bool]
    def __init__(self, node: "Node"):
        self.image1 = Slot[Image](node, "image1", 'IMAGE')
        self.image2 = Slot[Image](node, "image2", 'IMAGE')
        self.direction = Slot[str](node, "direction", ['right', 'down', 'left', 'up'])
        self.match_image_size = Slot[bool](node, "match_image_size", 'BOOLEAN')

class ImageConcanateOutputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class ImageConcanate(Node[ImageConcanateInputs, ImageConcanateOutputs]):
    """
    Original name: ImageConcanate
    Category: KJNodes/image
    
Concatenates the image2 to image1 in the specified direction.


    Inputs:
        - image1 (Image)
        - image2 (Image)
        - direction (str) (default: 'right')
        - match_image_size (bool) (default: True)

    Outputs:
        - image (Image)
    """
    _original_name: str = 'ImageConcanate'

    def __init__(self, image1: Slot[Image], image2: Slot[Image], direction: str = 'right', match_image_size: bool = True):
        super().__init__(**{"image1": image1, "image2": image2, "direction": direction, "match_image_size": match_image_size})
        self.inputs = ImageConcanateInputs(self)
        self.outputs = ImageConcanateOutputs(self)
