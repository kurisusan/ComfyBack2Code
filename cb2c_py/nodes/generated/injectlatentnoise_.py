
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for InjectLatentNoise_
class InjectLatentNoise_Inputs(InputSlots):
    latent: Slot[Latent]
    noise_seed: Slot[int]
    noise_strength: Slot[float]
    normalize: Slot[str]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "latent", 'LATENT')
        self.noise_seed = Slot[int](node, "noise_seed", 'INT')
        self.noise_strength = Slot[float](node, "noise_strength", 'FLOAT')
        self.normalize = Slot[str](node, "normalize", ['false', 'true'])

class InjectLatentNoise_Outputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class InjectLatentNoise_(Node[InjectLatentNoise_Inputs, InjectLatentNoise_Outputs]):
    """
    Original name: InjectLatentNoise+
    No description available.
    """
    _original_name: str = 'InjectLatentNoise+'

    def __init__(self, latent: Slot[Latent], noise_seed: int = 0, noise_strength: float = 1.0, normalize: str = 'false'):
        super().__init__(**{"latent": latent, "noise_seed": noise_seed, "noise_strength": noise_strength, "normalize": normalize})
        self.inputs = InjectLatentNoise_Inputs(self)
        self.outputs = InjectLatentNoise_Outputs(self)
