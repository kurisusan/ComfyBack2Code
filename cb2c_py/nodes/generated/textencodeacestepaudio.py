
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for TextEncodeAceStepAudio
class TextEncodeAceStepAudioInputs(InputSlots):
    clip: Slot[Clip]
    tags: Slot[str]
    lyrics: Slot[str]
    lyrics_strength: Slot[float]
    def __init__(self, node: "Node"):
        self.clip = Slot[Clip](node, "clip", 'CLIP')
        self.tags = Slot[str](node, "tags", 'STRING')
        self.lyrics = Slot[str](node, "lyrics", 'STRING')
        self.lyrics_strength = Slot[float](node, "lyrics_strength", 'FLOAT')

class TextEncodeAceStepAudioOutputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class TextEncodeAceStepAudio(Node[TextEncodeAceStepAudioInputs, TextEncodeAceStepAudioOutputs]):
    """
    Original name: TextEncodeAceStepAudio
    Category: conditioning
    

    Inputs:
        - clip (Clip)
        - tags (str)
        - lyrics (str)
        - lyrics_strength (float) (default: 1.0)

    Outputs:
        - conditioning (Conditioning)
    """
    _original_name: str = 'TextEncodeAceStepAudio'

    def __init__(self, clip: Slot[Clip], tags: str, lyrics: str, lyrics_strength: float = 1.0):
        super().__init__(**{"clip": clip, "tags": tags, "lyrics": lyrics, "lyrics_strength": lyrics_strength})
        self.inputs = TextEncodeAceStepAudioInputs(self)
        self.outputs = TextEncodeAceStepAudioOutputs(self)
