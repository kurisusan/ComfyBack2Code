
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for DifferentialDiffusionAdvanced
class DifferentialDiffusionAdvancedInputs(InputSlots):
    model: Slot[Model]
    samples: Slot[Latent]
    mask: Slot[Any]
    multiplier: Slot[float]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.samples = Slot[Latent](node, "samples", 'LATENT')
        self.mask = Slot[Any](node, "mask", 'MASK')
        self.multiplier = Slot[float](node, "multiplier", 'FLOAT')

class DifferentialDiffusionAdvancedOutputs(OutputSlots):
    model: Slot[Model]
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class DifferentialDiffusionAdvanced(Node[DifferentialDiffusionAdvancedInputs, DifferentialDiffusionAdvancedOutputs]):
    """
    Original name: DifferentialDiffusionAdvanced
    No description available.
    """
    _original_name: str = 'DifferentialDiffusionAdvanced'

    def __init__(self, model: Slot[Model], samples: Slot[Latent], mask: Slot[Any], multiplier: float = 1.0):
        super().__init__(**{"model": model, "samples": samples, "mask": mask, "multiplier": multiplier})
        self.inputs = DifferentialDiffusionAdvancedInputs(self)
        self.outputs = DifferentialDiffusionAdvancedOutputs(self)
