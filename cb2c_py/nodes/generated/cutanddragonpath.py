
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for CutAndDragOnPath
class CutAndDragOnPathInputs(InputSlots):
    image: Slot[Image]
    coordinates: Slot[str]
    mask: Slot[Any]
    frame_width: Slot[int]
    frame_height: Slot[int]
    inpaint: Slot[bool]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.coordinates = Slot[str](node, "coordinates", 'STRING')
        self.mask = Slot[Any](node, "mask", 'MASK')
        self.frame_width = Slot[int](node, "frame_width", 'INT')
        self.frame_height = Slot[int](node, "frame_height", 'INT')
        self.inpaint = Slot[bool](node, "inpaint", 'BOOLEAN')

class CutAndDragOnPathOutputs(OutputSlots):
    image: Slot[Image]
    mask: Slot[Any]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.mask = Slot[Any](node, "mask", 'MASK')

class CutAndDragOnPath(Node[CutAndDragOnPathInputs, CutAndDragOnPathOutputs]):
    """
    Original name: CutAndDragOnPath
    No description available.
    """
    _original_name: str = 'CutAndDragOnPath'

    def __init__(self, image: Slot[Image], coordinates: str, mask: Slot[Any], frame_width: int = 512, frame_height: int = 512, inpaint: bool = True):
        super().__init__(**{"image": image, "coordinates": coordinates, "mask": mask, "frame_width": frame_width, "frame_height": frame_height, "inpaint": inpaint})
        self.inputs = CutAndDragOnPathInputs(self)
        self.outputs = CutAndDragOnPathOutputs(self)
