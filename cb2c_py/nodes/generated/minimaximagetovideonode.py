
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for MinimaxImageToVideoNode
class MinimaxImageToVideoNodeInputs(InputSlots):
    image: Slot[Image]
    prompt_text: Slot[str]
    model: Slot[str]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.prompt_text = Slot[str](node, "prompt_text", 'STRING')
        self.model = Slot[str](node, "model", ['I2V-01-Director', 'I2V-01', 'I2V-01-live'])

class MinimaxImageToVideoNodeOutputs(OutputSlots):
    video: Slot[Any]
    def __init__(self, node: "Node"):
        self.video = Slot[Any](node, "VIDEO", 'VIDEO')

class MinimaxImageToVideoNode(Node[MinimaxImageToVideoNodeInputs, MinimaxImageToVideoNodeOutputs]):
    """
    Original name: MinimaxImageToVideoNode
    Category: api node/video/MiniMax
    Generates videos from an image and prompts using MiniMax's API

    Inputs:
        - image (Image)
          Image to use as first frame of video generation
        - prompt_text (str) (default: '')
          Text prompt to guide the video generation
        - model (str) (default: 'I2V-01')
          Model to use for video generation

    Outputs:
        - video (Any)
    """
    _original_name: str = 'MinimaxImageToVideoNode'

    def __init__(self, image: Slot[Image], prompt_text: str = '', model: str = 'I2V-01'):
        super().__init__(**{"image": image, "prompt_text": prompt_text, "model": model})
        self.inputs = MinimaxImageToVideoNodeInputs(self)
        self.outputs = MinimaxImageToVideoNodeOutputs(self)
