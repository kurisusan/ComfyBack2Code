
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for CreateGradientMask
class CreateGradientMaskInputs(InputSlots):
    invert: Slot[bool]
    frames: Slot[int]
    width: Slot[int]
    height: Slot[int]
    def __init__(self, node: "Node"):
        self.invert = Slot[bool](node, "invert", 'BOOLEAN')
        self.frames = Slot[int](node, "frames", 'INT')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')

class CreateGradientMaskOutputs(OutputSlots):
    mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "MASK", 'MASK')

class CreateGradientMask(Node[CreateGradientMaskInputs, CreateGradientMaskOutputs]):
    """
    Original name: CreateGradientMask
    Category: KJNodes/masking/generate
    

    Inputs:
        - invert (bool) (default: False)
        - frames (int) (default: 0)
        - width (int) (default: 256)
        - height (int) (default: 256)

    Outputs:
        - mask (Image)
    """
    _original_name: str = 'CreateGradientMask'

    def __init__(self, invert: bool = False, frames: int = 0, width: int = 256, height: int = 256):
        super().__init__(**{"invert": invert, "frames": frames, "width": width, "height": height})
        self.inputs = CreateGradientMaskInputs(self)
        self.outputs = CreateGradientMaskOutputs(self)
