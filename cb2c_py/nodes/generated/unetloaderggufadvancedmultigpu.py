
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for UnetLoaderGGUFAdvancedMultiGPU
class UnetLoaderGGUFAdvancedMultiGPUInputs(InputSlots):
    unet_name: Slot[str]
    dequant_dtype: Slot[str]
    patch_dtype: Slot[str]
    patch_on_device: Slot[bool]
    def __init__(self, node: "Node"):
        self.unet_name = Slot[str](node, "unet_name", [])
        self.dequant_dtype = Slot[str](node, "dequant_dtype", ['default', 'target', 'float32', 'float16', 'bfloat16'])
        self.patch_dtype = Slot[str](node, "patch_dtype", ['default', 'target', 'float32', 'float16', 'bfloat16'])
        self.patch_on_device = Slot[bool](node, "patch_on_device", 'BOOLEAN')

class UnetLoaderGGUFAdvancedMultiGPUOutputs(OutputSlots):
    model: Slot[Model]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')

class UnetLoaderGGUFAdvancedMultiGPU(Node[UnetLoaderGGUFAdvancedMultiGPUInputs, UnetLoaderGGUFAdvancedMultiGPUOutputs]):
    """
    Original name: UnetLoaderGGUFAdvancedMultiGPU
    No description available.
    """
    _original_name: str = 'UnetLoaderGGUFAdvancedMultiGPU'

    def __init__(self, unet_name: str, dequant_dtype: str = 'default', patch_dtype: str = 'default', patch_on_device: bool = False):
        super().__init__(**{"unet_name": unet_name, "dequant_dtype": dequant_dtype, "patch_dtype": patch_dtype, "patch_on_device": patch_on_device})
        self.inputs = UnetLoaderGGUFAdvancedMultiGPUInputs(self)
        self.outputs = UnetLoaderGGUFAdvancedMultiGPUOutputs(self)
