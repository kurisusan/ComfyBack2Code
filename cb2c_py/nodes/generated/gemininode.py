
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for GeminiNode
class GeminiNodeInputs(InputSlots):
    prompt: Slot[str]
    model: Slot[Any]
    seed: Slot[int]
    def __init__(self, node: "Node"):
        self.prompt = Slot[str](node, "prompt", 'STRING')
        self.model = Slot[Any](node, "model", 'COMBO')
        self.seed = Slot[int](node, "seed", 'INT')

class GeminiNodeOutputs(OutputSlots):
    string: Slot[str]
    def __init__(self, node: "Node"):
        self.string = Slot[str](node, "STRING", 'STRING')

class GeminiNode(Node[GeminiNodeInputs, GeminiNodeOutputs]):
    """
    Original name: GeminiNode
    No description available.
    """
    _original_name: str = 'GeminiNode'

    def __init__(self, prompt: str = '', model: Slot[Any] = 'gemini-2.5-pro-preview-05-06', seed: int = 42):
        super().__init__(**{"prompt": prompt, "model": model, "seed": seed})
        self.inputs = GeminiNodeInputs(self)
        self.outputs = GeminiNodeOutputs(self)
