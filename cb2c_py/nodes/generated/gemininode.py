
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for GeminiNode
class GeminiNodeInputs(InputSlots):
    prompt: Slot[str]
    model: Slot[str]
    seed: Slot[int]
    def __init__(self, node: "Node"):
        self.prompt = Slot[str](node, "prompt", 'STRING')
        self.model = Slot[str](node, "model", 'COMBO')
        self.seed = Slot[int](node, "seed", 'INT')

class GeminiNodeOutputs(OutputSlots):
    string: Slot[str]
    def __init__(self, node: "Node"):
        self.string = Slot[str](node, "STRING", 'STRING')

class GeminiNode(Node[GeminiNodeInputs, GeminiNodeOutputs]):
    """
    Original name: GeminiNode
    Category: api node/text/Gemini
    Generate text responses with Google's Gemini AI model. You can provide multiple types of inputs (text, images, audio, video) as context for generating more relevant and meaningful responses.

    Inputs:
        - prompt (str) (default: '')
          Text inputs to the model, used to generate a response. You can include detailed instructions, questions, or context for the model.
        - model (Any) (default: 'gemini-2.5-pro-preview-05-06')
          The Gemini model to use for generating responses.
        - seed (int) (default: 42)
          When seed is fixed to a specific value, the model makes a best effort to provide the same response for repeated requests. Deterministic output isn't guaranteed. Also, changing the model or parameter settings, such as the temperature, can cause variations in the response even when you use the same seed value. By default, a random seed value is used.

    Outputs:
        - string (str)
    """
    _original_name: str = 'GeminiNode'

    def __init__(self, prompt: str = '', model: str = 'gemini-2.5-pro-preview-05-06', seed: int = 42):
        super().__init__(**{"prompt": prompt, "model": model, "seed": seed})
        self.inputs = GeminiNodeInputs(self)
        self.outputs = GeminiNodeOutputs(self)
