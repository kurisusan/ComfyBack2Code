
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for LoadAndResizeImage
class LoadAndResizeImageInputs(InputSlots):
    image: Slot[str]
    resize: Slot[bool]
    width: Slot[int]
    height: Slot[int]
    repeat: Slot[int]
    keep_proportion: Slot[bool]
    divisible_by: Slot[int]
    mask_channel: Slot[str]
    background_color: Slot[str]
    def __init__(self, node: "Node"):
        self.image = Slot[str](node, "image", ['example.png'])
        self.resize = Slot[bool](node, "resize", 'BOOLEAN')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.repeat = Slot[int](node, "repeat", 'INT')
        self.keep_proportion = Slot[bool](node, "keep_proportion", 'BOOLEAN')
        self.divisible_by = Slot[int](node, "divisible_by", 'INT')
        self.mask_channel = Slot[str](node, "mask_channel", ['alpha', 'red', 'green', 'blue'])
        self.background_color = Slot[str](node, "background_color", 'STRING')

class LoadAndResizeImageOutputs(OutputSlots):
    image: Slot[Image]
    mask: Slot[Image]
    width: Slot[int]
    height: Slot[int]
    image_path: Slot[str]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.mask = Slot[Image](node, "mask", 'MASK')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.image_path = Slot[str](node, "image_path", 'STRING')

class LoadAndResizeImage(Node[LoadAndResizeImageInputs, LoadAndResizeImageOutputs]):
    """
    Original name: LoadAndResizeImage
    No description available.
    """
    _original_name: str = 'LoadAndResizeImage'

    def __init__(self, image: str, mask_channel: str, resize: bool = False, width: int = 512, height: int = 512, repeat: int = 1, keep_proportion: bool = False, divisible_by: int = 2, background_color: str = ''):
        super().__init__(**{"image": image, "resize": resize, "width": width, "height": height, "repeat": repeat, "keep_proportion": keep_proportion, "divisible_by": divisible_by, "mask_channel": mask_channel, "background_color": background_color})
        self.inputs = LoadAndResizeImageInputs(self)
        self.outputs = LoadAndResizeImageOutputs(self)
