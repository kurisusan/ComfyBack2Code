
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node

class LoadAndResizeImage(Node):
    """
    Original name: LoadAndResizeImage
    No description available.
    """
    _inputs = {
    "image": [
        [
            "example.png"
        ],
        {
            "image_upload": True
        }
    ],
    "resize": [
        "BOOLEAN",
        {
            "default": False
        }
    ],
    "width": [
        "INT",
        {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
        }
    ],
    "height": [
        "INT",
        {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
        }
    ],
    "repeat": [
        "INT",
        {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
        }
    ],
    "keep_proportion": [
        "BOOLEAN",
        {
            "default": False
        }
    ],
    "divisible_by": [
        "INT",
        {
            "default": 2,
            "min": 0,
            "max": 512,
            "step": 1
        }
    ],
    "mask_channel": [
        [
            "alpha",
            "red",
            "green",
            "blue"
        ],
        {
            "tooltip": "Channel to use for the mask output"
        }
    ],
    "background_color": [
        "STRING",
        {
            "default": "",
            "tooltip": "Fills the alpha channel with the specified color."
        }
    ]
}
    _outputs = [
    "IMAGE",
    "MASK",
    "INT",
    "INT",
    "STRING"
]
    _original_name = "LoadAndResizeImage"

    def __init__(self, image, mask_channel, resize=False, width=512, height=512, repeat=1, keep_proportion=False, divisible_by=2, background_color=""):
        super().__init__(image=image, resize=resize, width=width, height=height, repeat=repeat, keep_proportion=keep_proportion, divisible_by=divisible_by, mask_channel=mask_channel, background_color=background_color)

    @classmethod
    def get_inputs(cls):
        return cls._inputs

    @classmethod
    def get_outputs(cls):
        return cls._outputs
