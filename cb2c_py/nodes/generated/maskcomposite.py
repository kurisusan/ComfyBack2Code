
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for MaskComposite
class MaskCompositeInputs(InputSlots):
    destination: Slot[Any]
    source: Slot[Any]
    x: Slot[int]
    y: Slot[int]
    operation: Slot[str]
    def __init__(self, node: "Node"):
        self.destination = Slot[Any](node, "destination", 'MASK')
        self.source = Slot[Any](node, "source", 'MASK')
        self.x = Slot[int](node, "x", 'INT')
        self.y = Slot[int](node, "y", 'INT')
        self.operation = Slot[str](node, "operation", ['multiply', 'add', 'subtract', 'and', 'or', 'xor'])

class MaskCompositeOutputs(OutputSlots):
    mask: Slot[Any]
    def __init__(self, node: "Node"):
        self.mask = Slot[Any](node, "MASK", 'MASK')

class MaskComposite(Node[MaskCompositeInputs, MaskCompositeOutputs]):
    """
    Original name: MaskComposite
    No description available.
    """
    _original_name: str = 'MaskComposite'

    def __init__(self, destination: Slot[Any], source: Slot[Any], operation: str, x: int = 0, y: int = 0):
        super().__init__(**{"destination": destination, "source": source, "x": x, "y": y, "operation": operation})
        self.inputs = MaskCompositeInputs(self)
        self.outputs = MaskCompositeOutputs(self)
