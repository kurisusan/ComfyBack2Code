
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImageCropByMaskBatch
class ImageCropByMaskBatchInputs(InputSlots):
    image: Slot[Image]
    masks: Slot[Image]
    width: Slot[int]
    height: Slot[int]
    padding: Slot[int]
    preserve_size: Slot[bool]
    bg_color: Slot[str]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.masks = Slot[Image](node, "masks", 'MASK')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.padding = Slot[int](node, "padding", 'INT')
        self.preserve_size = Slot[bool](node, "preserve_size", 'BOOLEAN')
        self.bg_color = Slot[str](node, "bg_color", 'STRING')

class ImageCropByMaskBatchOutputs(OutputSlots):
    images: Slot[Image]
    masks: Slot[Image]
    def __init__(self, node: "Node"):
        self.images = Slot[Image](node, "images", 'IMAGE')
        self.masks = Slot[Image](node, "masks", 'MASK')

class ImageCropByMaskBatch(Node[ImageCropByMaskBatchInputs, ImageCropByMaskBatchOutputs]):
    """
    Original name: ImageCropByMaskBatch
    Category: KJNodes/image
    Crops the input images based on the provided masks.

    Inputs:
        - image (Image)
        - masks (Image)
        - width (int) (default: 512)
        - height (int) (default: 512)
        - padding (int) (default: 0)
        - preserve_size (bool) (default: False)
        - bg_color (str) (default: '0, 0, 0')
          Color as RGB values in range 0-255, separated by commas.

    Outputs:
        - images (Image)
        - masks (Image)
    """
    _original_name: str = 'ImageCropByMaskBatch'

    def __init__(self, image: Slot[Image], masks: Slot[Image], width: int = 512, height: int = 512, padding: int = 0, preserve_size: bool = False, bg_color: str = '0, 0, 0'):
        super().__init__(**{"image": image, "masks": masks, "width": width, "height": height, "padding": padding, "preserve_size": preserve_size, "bg_color": bg_color})
        self.inputs = ImageCropByMaskBatchInputs(self)
        self.outputs = ImageCropByMaskBatchOutputs(self)
