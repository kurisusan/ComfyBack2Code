
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImageConcatFromBatch
class ImageConcatFromBatchInputs(InputSlots):
    images: Slot[Image]
    num_columns: Slot[int]
    match_image_size: Slot[bool]
    max_resolution: Slot[int]
    def __init__(self, node: "Node"):
        self.images = Slot[Image](node, "images", 'IMAGE')
        self.num_columns = Slot[int](node, "num_columns", 'INT')
        self.match_image_size = Slot[bool](node, "match_image_size", 'BOOLEAN')
        self.max_resolution = Slot[int](node, "max_resolution", 'INT')

class ImageConcatFromBatchOutputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class ImageConcatFromBatch(Node[ImageConcatFromBatchInputs, ImageConcatFromBatchOutputs]):
    """
    Original name: ImageConcatFromBatch
    No description available.
    """
    _original_name: str = 'ImageConcatFromBatch'

    def __init__(self, images: Slot[Image], num_columns: int = 3, match_image_size: bool = False, max_resolution: int = 4096):
        super().__init__(**{"images": images, "num_columns": num_columns, "match_image_size": match_image_size, "max_resolution": max_resolution})
        self.inputs = ImageConcatFromBatchInputs(self)
        self.outputs = ImageConcatFromBatchOutputs(self)
