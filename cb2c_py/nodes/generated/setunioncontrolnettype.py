
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for SetUnionControlNetType
class SetUnionControlNetTypeInputs(InputSlots):
    control_net: Slot[Any]
    type: Slot[str]
    def __init__(self, node: "Node"):
        self.control_net = Slot[Any](node, "control_net", 'CONTROL_NET')
        self.type = Slot[str](node, "type", ['auto', 'openpose', 'depth', 'hed/pidi/scribble/ted', 'canny/lineart/anime_lineart/mlsd', 'normal', 'segment', 'tile', 'repaint'])

class SetUnionControlNetTypeOutputs(OutputSlots):
    control_net: Slot[Any]
    def __init__(self, node: "Node"):
        self.control_net = Slot[Any](node, "CONTROL_NET", 'CONTROL_NET')

class SetUnionControlNetType(Node[SetUnionControlNetTypeInputs, SetUnionControlNetTypeOutputs]):
    """
    Original name: SetUnionControlNetType
    No description available.
    """
    _original_name: str = 'SetUnionControlNetType'

    def __init__(self, control_net: Slot[Any], type: str):
        super().__init__(**{"control_net": control_net, "type": type})
        self.inputs = SetUnionControlNetTypeInputs(self)
        self.outputs = SetUnionControlNetTypeOutputs(self)
