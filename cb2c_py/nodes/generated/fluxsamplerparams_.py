
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node

class FluxSamplerParams_(Node):
    """
    Original name: FluxSamplerParams+
    No description available.
    """
    _inputs = {
    "model": [
        "MODEL"
    ],
    "conditioning": [
        "CONDITIONING"
    ],
    "latent_image": [
        "LATENT"
    ],
    "seed": [
        "STRING",
        {
            "multiline": False,
            "dynamicPrompts": False,
            "default": "?"
        }
    ],
    "sampler": [
        "STRING",
        {
            "multiline": False,
            "dynamicPrompts": False,
            "default": "euler"
        }
    ],
    "scheduler": [
        "STRING",
        {
            "multiline": False,
            "dynamicPrompts": False,
            "default": "simple"
        }
    ],
    "steps": [
        "STRING",
        {
            "multiline": False,
            "dynamicPrompts": False,
            "default": "20"
        }
    ],
    "guidance": [
        "STRING",
        {
            "multiline": False,
            "dynamicPrompts": False,
            "default": "3.5"
        }
    ],
    "max_shift": [
        "STRING",
        {
            "multiline": False,
            "dynamicPrompts": False,
            "default": ""
        }
    ],
    "base_shift": [
        "STRING",
        {
            "multiline": False,
            "dynamicPrompts": False,
            "default": ""
        }
    ],
    "denoise": [
        "STRING",
        {
            "multiline": False,
            "dynamicPrompts": False,
            "default": "1.0"
        }
    ]
}
    _outputs = [
    "LATENT",
    "SAMPLER_PARAMS"
]
    _original_name = "FluxSamplerParams+"

    def __init__(self, model, conditioning, latent_image, seed="?", sampler="euler", scheduler="simple", steps="20", guidance="3.5", max_shift="", base_shift="", denoise="1.0"):
        super().__init__(model=model, conditioning=conditioning, latent_image=latent_image, seed=seed, sampler=sampler, scheduler=scheduler, steps=steps, guidance=guidance, max_shift=max_shift, base_shift=base_shift, denoise=denoise)

    @classmethod
    def get_inputs(cls):
        return cls._inputs

    @classmethod
    def get_outputs(cls):
        return cls._outputs
