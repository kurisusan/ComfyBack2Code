
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for FluxSamplerParams_
class FluxSamplerParams_Inputs(InputSlots):
    model: Slot[Model]
    conditioning: Slot[Conditioning]
    latent_image: Slot[Latent]
    seed: Slot[str]
    sampler: Slot[str]
    scheduler: Slot[str]
    steps: Slot[str]
    guidance: Slot[str]
    max_shift: Slot[str]
    base_shift: Slot[str]
    denoise: Slot[str]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.conditioning = Slot[Conditioning](node, "conditioning", 'CONDITIONING')
        self.latent_image = Slot[Latent](node, "latent_image", 'LATENT')
        self.seed = Slot[str](node, "seed", 'STRING')
        self.sampler = Slot[str](node, "sampler", 'STRING')
        self.scheduler = Slot[str](node, "scheduler", 'STRING')
        self.steps = Slot[str](node, "steps", 'STRING')
        self.guidance = Slot[str](node, "guidance", 'STRING')
        self.max_shift = Slot[str](node, "max_shift", 'STRING')
        self.base_shift = Slot[str](node, "base_shift", 'STRING')
        self.denoise = Slot[str](node, "denoise", 'STRING')

class FluxSamplerParams_Outputs(OutputSlots):
    latent: Slot[Latent]
    params: Slot[Any]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "latent", 'LATENT')
        self.params = Slot[Any](node, "params", 'SAMPLER_PARAMS')

class FluxSamplerParams_(Node[FluxSamplerParams_Inputs, FluxSamplerParams_Outputs]):
    """
    Original name: FluxSamplerParams+
    No description available.
    """
    _original_name: str = 'FluxSamplerParams+'

    def __init__(self, model: Slot[Model], conditioning: Slot[Conditioning], latent_image: Slot[Latent], seed: str = '?', sampler: str = 'euler', scheduler: str = 'simple', steps: str = '20', guidance: str = '3.5', max_shift: str = '', base_shift: str = '', denoise: str = '1.0'):
        super().__init__(**{"model": model, "conditioning": conditioning, "latent_image": latent_image, "seed": seed, "sampler": sampler, "scheduler": scheduler, "steps": steps, "guidance": guidance, "max_shift": max_shift, "base_shift": base_shift, "denoise": denoise})
        self.inputs = FluxSamplerParams_Inputs(self)
        self.outputs = FluxSamplerParams_Outputs(self)
