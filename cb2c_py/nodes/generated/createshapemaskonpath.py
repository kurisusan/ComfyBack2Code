
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for CreateShapeMaskOnPath
class CreateShapeMaskOnPathInputs(InputSlots):
    shape: Slot[str]
    coordinates: Slot[str]
    frame_width: Slot[int]
    frame_height: Slot[int]
    shape_width: Slot[int]
    shape_height: Slot[int]
    def __init__(self, node: "Node"):
        self.shape = Slot[str](node, "shape", ['circle', 'square', 'triangle'])
        self.coordinates = Slot[str](node, "coordinates", 'STRING')
        self.frame_width = Slot[int](node, "frame_width", 'INT')
        self.frame_height = Slot[int](node, "frame_height", 'INT')
        self.shape_width = Slot[int](node, "shape_width", 'INT')
        self.shape_height = Slot[int](node, "shape_height", 'INT')

class CreateShapeMaskOnPathOutputs(OutputSlots):
    mask: Slot[Any]
    mask_inverted: Slot[Any]
    def __init__(self, node: "Node"):
        self.mask = Slot[Any](node, "mask", 'MASK')
        self.mask_inverted = Slot[Any](node, "mask_inverted", 'MASK')

class CreateShapeMaskOnPath(Node[CreateShapeMaskOnPathInputs, CreateShapeMaskOnPathOutputs]):
    """
    Original name: CreateShapeMaskOnPath
    No description available.
    """
    _original_name: str = 'CreateShapeMaskOnPath'

    def __init__(self, coordinates: str, shape: str = 'circle', frame_width: int = 512, frame_height: int = 512, shape_width: int = 128, shape_height: int = 128):
        super().__init__(**{"shape": shape, "coordinates": coordinates, "frame_width": frame_width, "frame_height": frame_height, "shape_width": shape_width, "shape_height": shape_height})
        self.inputs = CreateShapeMaskOnPathInputs(self)
        self.outputs = CreateShapeMaskOnPathOutputs(self)
