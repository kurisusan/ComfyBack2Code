
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for RecraftStyleV3DigitalIllustration
class RecraftStyleV3DigitalIllustrationInputs(InputSlots):
    substyle: Slot[str]
    def __init__(self, node: "Node"):
        self.substyle = Slot[str](node, "substyle", ['None', '2d_art_poster', '2d_art_poster_2', 'antiquarian', 'bold_fantasy', 'child_book', 'child_books', 'cover', 'crosshatch', 'digital_engraving', 'engraving_color', 'expressionism', 'freehand_details', 'grain', 'grain_20', 'graphic_intensity', 'hand_drawn', 'hand_drawn_outline', 'handmade_3d', 'hard_comics', 'infantile_sketch', 'long_shadow', 'modern_folk', 'multicolor', 'neon_calm', 'noir', 'nostalgic_pastel', 'outline_details', 'pastel_gradient', 'pastel_sketch', 'pixel_art', 'plastic', 'pop_art', 'pop_renaissance', 'seamless', 'street_art', 'tablet_sketch', 'urban_glow', 'urban_sketching', 'vanilla_dreams', 'young_adult_book', 'young_adult_book_2'])

class RecraftStyleV3DigitalIllustrationOutputs(OutputSlots):
    recraft_style: Slot[Any]
    def __init__(self, node: "Node"):
        self.recraft_style = Slot[Any](node, "recraft_style", 'RECRAFT_V3_STYLE')

class RecraftStyleV3DigitalIllustration(Node[RecraftStyleV3DigitalIllustrationInputs, RecraftStyleV3DigitalIllustrationOutputs]):
    """
    Original name: RecraftStyleV3DigitalIllustration
    Category: api node/image/Recraft
    Select realistic_image style and optional substyle.

    Inputs:
        - substyle (str)

    Outputs:
        - recraft_style (Any)
    """
    _original_name: str = 'RecraftStyleV3DigitalIllustration'

    def __init__(self, substyle: str):
        super().__init__(**{"substyle": substyle})
        self.inputs = RecraftStyleV3DigitalIllustrationInputs(self)
        self.outputs = RecraftStyleV3DigitalIllustrationOutputs(self)
