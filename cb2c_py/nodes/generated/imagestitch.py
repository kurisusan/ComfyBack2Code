
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for ImageStitch
class ImageStitchInputs(InputSlots):
    image1: Slot[Image]
    direction: Slot[str]
    match_image_size: Slot[bool]
    spacing_width: Slot[int]
    spacing_color: Slot[str]
    def __init__(self, node: "Node"):
        self.image1 = Slot[Image](node, "image1", 'IMAGE')
        self.direction = Slot[str](node, "direction", ['right', 'down', 'left', 'up'])
        self.match_image_size = Slot[bool](node, "match_image_size", 'BOOLEAN')
        self.spacing_width = Slot[int](node, "spacing_width", 'INT')
        self.spacing_color = Slot[str](node, "spacing_color", ['white', 'black', 'red', 'green', 'blue'])

class ImageStitchOutputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class ImageStitch(Node[ImageStitchInputs, ImageStitchOutputs]):
    """
    Original name: ImageStitch
    No description available.
    """
    _original_name: str = 'ImageStitch'

    def __init__(self, image1: Slot[Image], direction: str = 'right', match_image_size: bool = True, spacing_width: int = 0, spacing_color: str = 'white'):
        super().__init__(**{"image1": image1, "direction": direction, "match_image_size": match_image_size, "spacing_width": spacing_width, "spacing_color": spacing_color})
        self.inputs = ImageStitchInputs(self)
        self.outputs = ImageStitchOutputs(self)
