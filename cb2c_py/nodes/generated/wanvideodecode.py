
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for WanVideoDecode
class WanVideoDecodeInputs(InputSlots):
    vae: Slot[Any]
    samples: Slot[Latent]
    enable_vae_tiling: Slot[bool]
    tile_x: Slot[int]
    tile_y: Slot[int]
    tile_stride_x: Slot[int]
    tile_stride_y: Slot[int]
    def __init__(self, node: "Node"):
        self.vae = Slot[Any](node, "vae", 'WANVAE')
        self.samples = Slot[Latent](node, "samples", 'LATENT')
        self.enable_vae_tiling = Slot[bool](node, "enable_vae_tiling", 'BOOLEAN')
        self.tile_x = Slot[int](node, "tile_x", 'INT')
        self.tile_y = Slot[int](node, "tile_y", 'INT')
        self.tile_stride_x = Slot[int](node, "tile_stride_x", 'INT')
        self.tile_stride_y = Slot[int](node, "tile_stride_y", 'INT')

class WanVideoDecodeOutputs(OutputSlots):
    images: Slot[Image]
    def __init__(self, node: "Node"):
        self.images = Slot[Image](node, "images", 'IMAGE')

class WanVideoDecode(Node[WanVideoDecodeInputs, WanVideoDecodeOutputs]):
    """
    Original name: WanVideoDecode
    No description available.
    """
    _original_name: str = 'WanVideoDecode'

    def __init__(self, vae: Slot[Any], samples: Slot[Latent], enable_vae_tiling: bool = False, tile_x: int = 272, tile_y: int = 272, tile_stride_x: int = 144, tile_stride_y: int = 128):
        super().__init__(**{"vae": vae, "samples": samples, "enable_vae_tiling": enable_vae_tiling, "tile_x": tile_x, "tile_y": tile_y, "tile_stride_x": tile_stride_x, "tile_stride_y": tile_stride_y})
        self.inputs = WanVideoDecodeInputs(self)
        self.outputs = WanVideoDecodeOutputs(self)
