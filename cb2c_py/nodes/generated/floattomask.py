
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for FloatToMask
class FloatToMaskInputs(InputSlots):
    input_values: Slot[Union[float, int]]
    width: Slot[int]
    height: Slot[int]
    def __init__(self, node: "Node"):
        self.input_values = Slot[Union[float, int]](node, "input_values", 'FLOAT')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')

class FloatToMaskOutputs(OutputSlots):
    mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "MASK", 'MASK')

class FloatToMask(Node[FloatToMaskInputs, FloatToMaskOutputs]):
    """
    Original name: FloatToMask
    No description available.
    """
    _original_name: str = 'FloatToMask'

    def __init__(self, input_values: Union[float, int] = 0, width: int = 100, height: int = 100):
        super().__init__(**{"input_values": input_values, "width": width, "height": height})
        self.inputs = FloatToMaskInputs(self)
        self.outputs = FloatToMaskOutputs(self)
