
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImageConcatMulti
class ImageConcatMultiInputs(InputSlots):
    inputcount: Slot[int]
    image_1: Slot[Image]
    image_2: Slot[Image]
    direction: Slot[str]
    match_image_size: Slot[bool]
    def __init__(self, node: "Node"):
        self.inputcount = Slot[int](node, "inputcount", 'INT')
        self.image_1 = Slot[Image](node, "image_1", 'IMAGE')
        self.image_2 = Slot[Image](node, "image_2", 'IMAGE')
        self.direction = Slot[str](node, "direction", ['right', 'down', 'left', 'up'])
        self.match_image_size = Slot[bool](node, "match_image_size", 'BOOLEAN')

class ImageConcatMultiOutputs(OutputSlots):
    images: Slot[Image]
    def __init__(self, node: "Node"):
        self.images = Slot[Image](node, "images", 'IMAGE')

class ImageConcatMulti(Node[ImageConcatMultiInputs, ImageConcatMultiOutputs]):
    """
    Original name: ImageConcatMulti
    Category: KJNodes/image
    
Creates an image from multiple images.  
You can set how many inputs the node has,  
with the **inputcount** and clicking update.


    Inputs:
        - inputcount (int) (default: 2)
        - image_1 (Image)
        - image_2 (Image)
        - direction (str) (default: 'right')
        - match_image_size (bool) (default: False)

    Outputs:
        - images (Image)
    """
    _original_name: str = 'ImageConcatMulti'

    def __init__(self, image_1: Slot[Image], image_2: Slot[Image], inputcount: int = 2, direction: str = 'right', match_image_size: bool = False):
        super().__init__(**{"inputcount": inputcount, "image_1": image_1, "image_2": image_2, "direction": direction, "match_image_size": match_image_size})
        self.inputs = ImageConcatMultiInputs(self)
        self.outputs = ImageConcatMultiOutputs(self)
