
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for CheckpointSave
class CheckpointSaveInputs(InputSlots):
    model: Slot[Model]
    clip: Slot[Clip]
    vae: Slot[Vae]
    filename_prefix: Slot[str]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.clip = Slot[Clip](node, "clip", 'CLIP')
        self.vae = Slot[Vae](node, "vae", 'VAE')
        self.filename_prefix = Slot[str](node, "filename_prefix", 'STRING')

class CheckpointSaveOutputs(OutputSlots):

    def __init__(self, node: "Node"):
        pass

class CheckpointSave(Node[CheckpointSaveInputs, CheckpointSaveOutputs]):
    """
    Original name: CheckpointSave
    No description available.
    """
    _original_name: str = 'CheckpointSave'

    def __init__(self, model: Slot[Model], clip: Slot[Clip], vae: Slot[Vae], filename_prefix: str = 'checkpoints/ComfyUI'):
        super().__init__(**{"model": model, "clip": clip, "vae": vae, "filename_prefix": filename_prefix})
        self.inputs = CheckpointSaveInputs(self)
        self.outputs = CheckpointSaveOutputs(self)
