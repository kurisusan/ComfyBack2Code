
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for CLIPTextEncodeSDXLRefiner
class CLIPTextEncodeSDXLRefinerInputs(InputSlots):
    ascore: Slot[float]
    width: Slot[int]
    height: Slot[int]
    text: Slot[str]
    clip: Slot[Clip]
    def __init__(self, node: "Node"):
        self.ascore = Slot[float](node, "ascore", 'FLOAT')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.text = Slot[str](node, "text", 'STRING')
        self.clip = Slot[Clip](node, "clip", 'CLIP')

class CLIPTextEncodeSDXLRefinerOutputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class CLIPTextEncodeSDXLRefiner(Node[CLIPTextEncodeSDXLRefinerInputs, CLIPTextEncodeSDXLRefinerOutputs]):
    """
    Original name: CLIPTextEncodeSDXLRefiner
    No description available.
    """
    _original_name: str = 'CLIPTextEncodeSDXLRefiner'

    def __init__(self, text: str, clip: Slot[Clip], ascore: float = 6.0, width: int = 1024.0, height: int = 1024.0):
        super().__init__(**{"ascore": ascore, "width": width, "height": height, "text": text, "clip": clip})
        self.inputs = CLIPTextEncodeSDXLRefinerInputs(self)
        self.outputs = CLIPTextEncodeSDXLRefinerOutputs(self)
