
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for LatentBlend
class LatentBlendInputs(InputSlots):
    samples1: Slot[Latent]
    samples2: Slot[Latent]
    blend_factor: Slot[float]
    def __init__(self, node: "Node"):
        self.samples1 = Slot[Latent](node, "samples1", 'LATENT')
        self.samples2 = Slot[Latent](node, "samples2", 'LATENT')
        self.blend_factor = Slot[float](node, "blend_factor", 'FLOAT')

class LatentBlendOutputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class LatentBlend(Node[LatentBlendInputs, LatentBlendOutputs]):
    """
    Original name: LatentBlend
    Category: _for_testing
    

    Inputs:
        - samples1 (Latent)
        - samples2 (Latent)
        - blend_factor (float) (default: 0.5)

    Outputs:
        - latent (Latent)
    """
    _original_name: str = 'LatentBlend'

    def __init__(self, samples1: Slot[Latent], samples2: Slot[Latent], blend_factor: float = 0.5):
        super().__init__(**{"samples1": samples1, "samples2": samples2, "blend_factor": blend_factor})
        self.inputs = LatentBlendInputs(self)
        self.outputs = LatentBlendOutputs(self)
