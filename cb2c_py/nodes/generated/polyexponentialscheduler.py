
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for PolyexponentialScheduler
class PolyexponentialSchedulerInputs(InputSlots):
    steps: Slot[int]
    sigma_max: Slot[float]
    sigma_min: Slot[float]
    rho: Slot[float]
    def __init__(self, node: "Node"):
        self.steps = Slot[int](node, "steps", 'INT')
        self.sigma_max = Slot[float](node, "sigma_max", 'FLOAT')
        self.sigma_min = Slot[float](node, "sigma_min", 'FLOAT')
        self.rho = Slot[float](node, "rho", 'FLOAT')

class PolyexponentialSchedulerOutputs(OutputSlots):
    sigmas: Slot[Any]
    def __init__(self, node: "Node"):
        self.sigmas = Slot[Any](node, "SIGMAS", 'SIGMAS')

class PolyexponentialScheduler(Node[PolyexponentialSchedulerInputs, PolyexponentialSchedulerOutputs]):
    """
    Original name: PolyexponentialScheduler
    Category: sampling/custom_sampling/schedulers
    

    Inputs:
        - steps (int) (default: 20)
        - sigma_max (float) (default: 14.614642)
        - sigma_min (float) (default: 0.0291675)
        - rho (float) (default: 1.0)

    Outputs:
        - sigmas (Any)
    """
    _original_name: str = 'PolyexponentialScheduler'

    def __init__(self, steps: int = 20, sigma_max: float = 14.614642, sigma_min: float = 0.0291675, rho: float = 1.0):
        super().__init__(**{"steps": steps, "sigma_max": sigma_max, "sigma_min": sigma_min, "rho": rho})
        self.inputs = PolyexponentialSchedulerInputs(self)
        self.outputs = PolyexponentialSchedulerOutputs(self)
