
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for ImageColorMatch_
class ImageColorMatch_Inputs(InputSlots):
    image: Slot[Image]
    reference: Slot[Image]
    color_space: Slot[str]
    factor: Slot[float]
    device: Slot[str]
    batch_size: Slot[int]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.reference = Slot[Image](node, "reference", 'IMAGE')
        self.color_space = Slot[str](node, "color_space", ['LAB', 'YCbCr', 'RGB', 'LUV', 'YUV', 'XYZ'])
        self.factor = Slot[float](node, "factor", 'FLOAT')
        self.device = Slot[str](node, "device", ['auto', 'cpu', 'gpu'])
        self.batch_size = Slot[int](node, "batch_size", 'INT')

class ImageColorMatch_Outputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class ImageColorMatch_(Node[ImageColorMatch_Inputs, ImageColorMatch_Outputs]):
    """
    Original name: ImageColorMatch+
    No description available.
    """
    _original_name: str = 'ImageColorMatch+'

    def __init__(self, image: Slot[Image], reference: Slot[Image], color_space: str, device: str, factor: float = 1.0, batch_size: int = 0):
        super().__init__(**{"image": image, "reference": reference, "color_space": color_space, "factor": factor, "device": device, "batch_size": batch_size})
        self.inputs = ImageColorMatch_Inputs(self)
        self.outputs = ImageColorMatch_Outputs(self)
