
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for VAEEncodeForInpaint
class VAEEncodeForInpaintInputs(InputSlots):
    pixels: Slot[Image]
    vae: Slot[Vae]
    mask: Slot[Image]
    grow_mask_by: Slot[int]
    def __init__(self, node: "Node"):
        self.pixels = Slot[Image](node, "pixels", 'IMAGE')
        self.vae = Slot[Vae](node, "vae", 'VAE')
        self.mask = Slot[Image](node, "mask", 'MASK')
        self.grow_mask_by = Slot[int](node, "grow_mask_by", 'INT')

class VAEEncodeForInpaintOutputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class VAEEncodeForInpaint(Node[VAEEncodeForInpaintInputs, VAEEncodeForInpaintOutputs]):
    """
    Original name: VAEEncodeForInpaint
    Category: latent/inpaint
    

    Inputs:
        - pixels (Image)
        - vae (Vae)
        - mask (Image)
        - grow_mask_by (int) (default: 6)

    Outputs:
        - latent (Latent)
    """
    _original_name: str = 'VAEEncodeForInpaint'

    def __init__(self, pixels: Slot[Image], vae: Slot[Vae], mask: Slot[Image], grow_mask_by: int = 6):
        super().__init__(**{"pixels": pixels, "vae": vae, "mask": mask, "grow_mask_by": grow_mask_by})
        self.inputs = VAEEncodeForInpaintInputs(self)
        self.outputs = VAEEncodeForInpaintOutputs(self)
