
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for InterpolateCoords
class InterpolateCoordsInputs(InputSlots):
    coordinates: Slot[str]
    interpolation_curve: Slot[float]
    def __init__(self, node: "Node"):
        self.coordinates = Slot[str](node, "coordinates", 'STRING')
        self.interpolation_curve = Slot[float](node, "interpolation_curve", 'FLOAT')

class InterpolateCoordsOutputs(OutputSlots):
    coordinates: Slot[str]
    def __init__(self, node: "Node"):
        self.coordinates = Slot[str](node, "coordinates", 'STRING')

class InterpolateCoords(Node[InterpolateCoordsInputs, InterpolateCoordsOutputs]):
    """
    Original name: InterpolateCoords
    Category: KJNodes/experimental
    
Interpolates coordinates based on a curve.   


    Inputs:
        - coordinates (str)
        - interpolation_curve (float)

    Outputs:
        - coordinates (str)
    """
    _original_name: str = 'InterpolateCoords'

    def __init__(self, coordinates: str, interpolation_curve: float):
        super().__init__(**{"coordinates": coordinates, "interpolation_curve": interpolation_curve})
        self.inputs = InterpolateCoordsInputs(self)
        self.outputs = InterpolateCoordsOutputs(self)
