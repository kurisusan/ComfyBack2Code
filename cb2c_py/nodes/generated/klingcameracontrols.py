
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for KlingCameraControls
class KlingCameraControlsInputs(InputSlots):
    camera_control_type: Slot[str]
    horizontal_movement: Slot[float]
    vertical_movement: Slot[float]
    pan: Slot[float]
    tilt: Slot[float]
    roll: Slot[float]
    zoom: Slot[float]
    def __init__(self, node: "Node"):
        self.camera_control_type = Slot[str](node, "camera_control_type", 'COMBO')
        self.horizontal_movement = Slot[float](node, "horizontal_movement", 'FLOAT')
        self.vertical_movement = Slot[float](node, "vertical_movement", 'FLOAT')
        self.pan = Slot[float](node, "pan", 'FLOAT')
        self.tilt = Slot[float](node, "tilt", 'FLOAT')
        self.roll = Slot[float](node, "roll", 'FLOAT')
        self.zoom = Slot[float](node, "zoom", 'FLOAT')

class KlingCameraControlsOutputs(OutputSlots):
    camera_control: Slot[Any]
    def __init__(self, node: "Node"):
        self.camera_control = Slot[Any](node, "camera_control", 'CAMERA_CONTROL')

class KlingCameraControls(Node[KlingCameraControlsInputs, KlingCameraControlsOutputs]):
    """
    Original name: KlingCameraControls
    No description available.
    """
    _original_name: str = 'KlingCameraControls'

    def __init__(self, camera_control_type: str = 'None', horizontal_movement: float = 0.0, vertical_movement: float = 0.0, pan: float = 0.5, tilt: float = 0.0, roll: float = 0.0, zoom: float = 0.0):
        super().__init__(**{"camera_control_type": camera_control_type, "horizontal_movement": horizontal_movement, "vertical_movement": vertical_movement, "pan": pan, "tilt": tilt, "roll": roll, "zoom": zoom})
        self.inputs = KlingCameraControlsInputs(self)
        self.outputs = KlingCameraControlsOutputs(self)
