
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for RepeatLatentBatch
class RepeatLatentBatchInputs(InputSlots):
    samples: Slot[Latent]
    amount: Slot[int]
    def __init__(self, node: "Node"):
        self.samples = Slot[Latent](node, "samples", 'LATENT')
        self.amount = Slot[int](node, "amount", 'INT')

class RepeatLatentBatchOutputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class RepeatLatentBatch(Node[RepeatLatentBatchInputs, RepeatLatentBatchOutputs]):
    """
    Original name: RepeatLatentBatch
    Category: latent/batch
    

    Inputs:
        - samples (Latent)
        - amount (int) (default: 1)

    Outputs:
        - latent (Latent)
    """
    _original_name: str = 'RepeatLatentBatch'

    def __init__(self, samples: Slot[Latent], amount: int = 1):
        super().__init__(**{"samples": samples, "amount": amount})
        self.inputs = RepeatLatentBatchInputs(self)
        self.outputs = RepeatLatentBatchOutputs(self)
