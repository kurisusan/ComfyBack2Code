
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for CosmosPredict2ImageToVideoLatent
class CosmosPredict2ImageToVideoLatentInputs(InputSlots):
    vae: Slot[Vae]
    width: Slot[int]
    height: Slot[int]
    length: Slot[int]
    batch_size: Slot[int]
    def __init__(self, node: "Node"):
        self.vae = Slot[Vae](node, "vae", 'VAE')
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.length = Slot[int](node, "length", 'INT')
        self.batch_size = Slot[int](node, "batch_size", 'INT')

class CosmosPredict2ImageToVideoLatentOutputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class CosmosPredict2ImageToVideoLatent(Node[CosmosPredict2ImageToVideoLatentInputs, CosmosPredict2ImageToVideoLatentOutputs]):
    """
    Original name: CosmosPredict2ImageToVideoLatent
    No description available.
    """
    _original_name: str = 'CosmosPredict2ImageToVideoLatent'

    def __init__(self, vae: Slot[Vae], width: int = 848, height: int = 480, length: int = 93, batch_size: int = 1):
        super().__init__(**{"vae": vae, "width": width, "height": height, "length": length, "batch_size": batch_size})
        self.inputs = CosmosPredict2ImageToVideoLatentInputs(self)
        self.outputs = CosmosPredict2ImageToVideoLatentOutputs(self)
