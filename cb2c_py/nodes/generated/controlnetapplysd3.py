
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for ControlNetApplySD3
class ControlNetApplySD3Inputs(InputSlots):
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    control_net: Slot[Any]
    vae: Slot[Vae]
    image: Slot[Image]
    strength: Slot[float]
    start_percent: Slot[float]
    end_percent: Slot[float]
    def __init__(self, node: "Node"):
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')
        self.control_net = Slot[Any](node, "control_net", 'CONTROL_NET')
        self.vae = Slot[Vae](node, "vae", 'VAE')
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.strength = Slot[float](node, "strength", 'FLOAT')
        self.start_percent = Slot[float](node, "start_percent", 'FLOAT')
        self.end_percent = Slot[float](node, "end_percent", 'FLOAT')

class ControlNetApplySD3Outputs(OutputSlots):
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')

class ControlNetApplySD3(Node[ControlNetApplySD3Inputs, ControlNetApplySD3Outputs]):
    """
    Original name: ControlNetApplySD3
    No description available.
    """
    _original_name: str = 'ControlNetApplySD3'

    def __init__(self, positive: Slot[Conditioning], negative: Slot[Conditioning], control_net: Slot[Any], vae: Slot[Vae], image: Slot[Image], strength: float = 1.0, start_percent: float = 0.0, end_percent: float = 1.0):
        super().__init__(**{"positive": positive, "negative": negative, "control_net": control_net, "vae": vae, "image": image, "strength": strength, "start_percent": start_percent, "end_percent": end_percent})
        self.inputs = ControlNetApplySD3Inputs(self)
        self.outputs = ControlNetApplySD3Outputs(self)
