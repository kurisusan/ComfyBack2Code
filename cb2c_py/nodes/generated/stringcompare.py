
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for StringCompare
class StringCompareInputs(InputSlots):
    string_a: Slot[str]
    string_b: Slot[str]
    mode: Slot[str]
    case_sensitive: Slot[bool]
    def __init__(self, node: "Node"):
        self.string_a = Slot[str](node, "string_a", 'STRING')
        self.string_b = Slot[str](node, "string_b", 'STRING')
        self.mode = Slot[str](node, "mode", 'COMBO')
        self.case_sensitive = Slot[bool](node, "case_sensitive", 'BOOLEAN')

class StringCompareOutputs(OutputSlots):
    boolean: Slot[bool]
    def __init__(self, node: "Node"):
        self.boolean = Slot[bool](node, "BOOLEAN", 'BOOLEAN')

class StringCompare(Node[StringCompareInputs, StringCompareOutputs]):
    """
    Original name: StringCompare
    Category: utils/string
    

    Inputs:
        - string_a (str)
        - string_b (str)
        - mode (Any)
        - case_sensitive (bool) (default: True)

    Outputs:
        - boolean (bool)
    """
    _original_name: str = 'StringCompare'

    def __init__(self, string_a: str, string_b: str, mode: str, case_sensitive: bool = True):
        super().__init__(**{"string_a": string_a, "string_b": string_b, "mode": mode, "case_sensitive": case_sensitive})
        self.inputs = StringCompareInputs(self)
        self.outputs = StringCompareOutputs(self)
