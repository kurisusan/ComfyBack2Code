
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for GetLatentRangeFromBatch
class GetLatentRangeFromBatchInputs(InputSlots):
    latents: Slot[Latent]
    start_index: Slot[int]
    num_frames: Slot[int]
    def __init__(self, node: "Node"):
        self.latents = Slot[Latent](node, "latents", 'LATENT')
        self.start_index = Slot[int](node, "start_index", 'INT')
        self.num_frames = Slot[int](node, "num_frames", 'INT')

class GetLatentRangeFromBatchOutputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class GetLatentRangeFromBatch(Node[GetLatentRangeFromBatchInputs, GetLatentRangeFromBatchOutputs]):
    """
    Original name: GetLatentRangeFromBatch
    Category: KJNodes/latents
    
Returns a range of latents from a batch.


    Inputs:
        - latents (Latent)
        - start_index (int) (default: 0)
        - num_frames (int) (default: 1)

    Outputs:
        - latent (Latent)
    """
    _original_name: str = 'GetLatentRangeFromBatch'

    def __init__(self, latents: Slot[Latent], start_index: int = 0, num_frames: int = 1):
        super().__init__(**{"latents": latents, "start_index": start_index, "num_frames": num_frames})
        self.inputs = GetLatentRangeFromBatchInputs(self)
        self.outputs = GetLatentRangeFromBatchOutputs(self)
