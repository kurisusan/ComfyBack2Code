
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ImageAddMulti
class ImageAddMultiInputs(InputSlots):
    inputcount: Slot[int]
    image_1: Slot[Image]
    image_2: Slot[Image]
    blending: Slot[str]
    blend_amount: Slot[float]
    def __init__(self, node: "Node"):
        self.inputcount = Slot[int](node, "inputcount", 'INT')
        self.image_1 = Slot[Image](node, "image_1", 'IMAGE')
        self.image_2 = Slot[Image](node, "image_2", 'IMAGE')
        self.blending = Slot[str](node, "blending", ['add', 'subtract', 'multiply', 'difference'])
        self.blend_amount = Slot[float](node, "blend_amount", 'FLOAT')

class ImageAddMultiOutputs(OutputSlots):
    images: Slot[Image]
    def __init__(self, node: "Node"):
        self.images = Slot[Image](node, "images", 'IMAGE')

class ImageAddMulti(Node[ImageAddMultiInputs, ImageAddMultiOutputs]):
    """
    Original name: ImageAddMulti
    Category: KJNodes/image
    
Add blends multiple images together.    
You can set how many inputs the node has,  
with the **inputcount** and clicking update.


    Inputs:
        - inputcount (int) (default: 2)
        - image_1 (Image)
        - image_2 (Image)
        - blending (str) (default: 'add')
        - blend_amount (float) (default: 0.5)

    Outputs:
        - images (Image)
    """
    _original_name: str = 'ImageAddMulti'

    def __init__(self, image_1: Slot[Image], image_2: Slot[Image], inputcount: int = 2, blending: str = 'add', blend_amount: float = 0.5):
        super().__init__(**{"inputcount": inputcount, "image_1": image_1, "image_2": image_2, "blending": blending, "blend_amount": blend_amount})
        self.inputs = ImageAddMultiInputs(self)
        self.outputs = ImageAddMultiOutputs(self)
