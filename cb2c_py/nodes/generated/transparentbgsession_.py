
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for TransparentBGSession_
class TransparentBGSession_Inputs(InputSlots):
    mode: Slot[str]
    use_jit: Slot[bool]
    def __init__(self, node: "Node"):
        self.mode = Slot[str](node, "mode", ['base', 'fast', 'base-nightly'])
        self.use_jit = Slot[bool](node, "use_jit", 'BOOLEAN')

class TransparentBGSession_Outputs(OutputSlots):
    rembg_session: Slot[Any]
    def __init__(self, node: "Node"):
        self.rembg_session = Slot[Any](node, "REMBG_SESSION", 'REMBG_SESSION')

class TransparentBGSession_(Node[TransparentBGSession_Inputs, TransparentBGSession_Outputs]):
    """
    Original name: TransparentBGSession+
    No description available.
    """
    _original_name: str = 'TransparentBGSession+'

    def __init__(self, mode: str, use_jit: bool = True):
        super().__init__(**{"mode": mode, "use_jit": use_jit})
        self.inputs = TransparentBGSession_Inputs(self)
        self.outputs = TransparentBGSession_Outputs(self)
