
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for KlingTextToVideoNode
class KlingTextToVideoNodeInputs(InputSlots):
    prompt: Slot[str]
    negative_prompt: Slot[str]
    cfg_scale: Slot[float]
    aspect_ratio: Slot[str]
    mode: Slot[str]
    def __init__(self, node: "Node"):
        self.prompt = Slot[str](node, "prompt", 'STRING')
        self.negative_prompt = Slot[str](node, "negative_prompt", 'STRING')
        self.cfg_scale = Slot[float](node, "cfg_scale", 'FLOAT')
        self.aspect_ratio = Slot[str](node, "aspect_ratio", 'COMBO')
        self.mode = Slot[str](node, "mode", ['standard mode / 5s duration / kling-v1', 'standard mode / 10s duration / kling-v1', 'pro mode / 5s duration / kling-v1', 'pro mode / 10s duration / kling-v1', 'standard mode / 5s duration / kling-v1-6', 'standard mode / 10s duration / kling-v1-6', 'pro mode / 5s duration / kling-v2-master', 'pro mode / 10s duration / kling-v2-master', 'standard mode / 5s duration / kling-v2-master', 'standard mode / 10s duration / kling-v2-master'])

class KlingTextToVideoNodeOutputs(OutputSlots):
    video: Slot[Any]
    video_id: Slot[str]
    duration: Slot[str]
    def __init__(self, node: "Node"):
        self.video = Slot[Any](node, "VIDEO", 'VIDEO')
        self.video_id = Slot[str](node, "video_id", 'STRING')
        self.duration = Slot[str](node, "duration", 'STRING')

class KlingTextToVideoNode(Node[KlingTextToVideoNodeInputs, KlingTextToVideoNodeOutputs]):
    """
    Original name: KlingTextToVideoNode
    Category: api node/video/Kling
    Kling Text to Video Node

    Inputs:
        - prompt (str) (default: None)
          Positive text prompt
        - negative_prompt (str) (default: None)
          Negative text prompt
        - cfg_scale (float) (default: 1.0)
        - aspect_ratio (Any) (default: '16:9')
        - mode (str) (default: 'standard mode / 5s duration / kling-v1-6')
          The configuration to use for the video generation following the format: mode / duration / model_name.

    Outputs:
        - video (Any)
        - video_id (str)
        - duration (str)
    """
    _original_name: str = 'KlingTextToVideoNode'

    def __init__(self, prompt: str = None, negative_prompt: str = None, cfg_scale: float = 1.0, aspect_ratio: str = '16:9', mode: str = 'standard mode / 5s duration / kling-v1-6'):
        super().__init__(**{"prompt": prompt, "negative_prompt": negative_prompt, "cfg_scale": cfg_scale, "aspect_ratio": aspect_ratio, "mode": mode})
        self.inputs = KlingTextToVideoNodeInputs(self)
        self.outputs = KlingTextToVideoNodeOutputs(self)
