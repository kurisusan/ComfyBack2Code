
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for RecraftTextToVectorNode
class RecraftTextToVectorNodeInputs(InputSlots):
    prompt: Slot[str]
    substyle: Slot[str]
    size: Slot[str]
    n: Slot[int]
    seed: Slot[int]
    def __init__(self, node: "Node"):
        self.prompt = Slot[str](node, "prompt", 'STRING')
        self.substyle = Slot[str](node, "substyle", ['None', 'bold_stroke', 'chemistry', 'colored_stencil', 'contour_pop_art', 'cosmics', 'cutout', 'depressive', 'editorial', 'emotional_flat', 'engraving', 'infographical', 'line_art', 'line_circuit', 'linocut', 'marker_outline', 'mosaic', 'naivector', 'roundish_flat', 'seamless', 'segmented_colors', 'sharp_contrast', 'thin', 'vector_photo', 'vivid_shapes'])
        self.size = Slot[str](node, "size", ['1024x1024', '1365x1024', '1024x1365', '1536x1024', '1024x1536', '1820x1024', '1024x1820', '1024x2048', '2048x1024', '1434x1024', '1024x1434', '1024x1280', '1280x1024', '1024x1707', '1707x1024'])
        self.n = Slot[int](node, "n", 'INT')
        self.seed = Slot[int](node, "seed", 'INT')

class RecraftTextToVectorNodeOutputs(OutputSlots):
    svg: Slot[Any]
    def __init__(self, node: "Node"):
        self.svg = Slot[Any](node, "SVG", 'SVG')

class RecraftTextToVectorNode(Node[RecraftTextToVectorNodeInputs, RecraftTextToVectorNodeOutputs]):
    """
    Original name: RecraftTextToVectorNode
    Category: api node/image/Recraft
    Generates SVG synchronously based on prompt and resolution.

    Inputs:
        - prompt (str) (default: '')
          Prompt for the image generation.
        - substyle (str)
        - size (str) (default: '1024x1024')
          The size of the generated image.
        - n (int) (default: 1)
          The number of images to generate.
        - seed (int) (default: 0)
          Seed to determine if node should re-run; actual results are nondeterministic regardless of seed.

    Outputs:
        - svg (Any)
    """
    _original_name: str = 'RecraftTextToVectorNode'

    def __init__(self, substyle: str, prompt: str = '', size: str = '1024x1024', n: int = 1, seed: int = 0):
        super().__init__(**{"prompt": prompt, "substyle": substyle, "size": size, "n": n, "seed": seed})
        self.inputs = RecraftTextToVectorNodeInputs(self)
        self.outputs = RecraftTextToVectorNodeOutputs(self)
