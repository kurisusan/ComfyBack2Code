
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for DualCFGGuider
class DualCFGGuiderInputs(InputSlots):
    model: Slot[Model]
    cond1: Slot[Conditioning]
    cond2: Slot[Conditioning]
    negative: Slot[Conditioning]
    cfg_conds: Slot[float]
    cfg_cond2_negative: Slot[float]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.cond1 = Slot[Conditioning](node, "cond1", 'CONDITIONING')
        self.cond2 = Slot[Conditioning](node, "cond2", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')
        self.cfg_conds = Slot[float](node, "cfg_conds", 'FLOAT')
        self.cfg_cond2_negative = Slot[float](node, "cfg_cond2_negative", 'FLOAT')

class DualCFGGuiderOutputs(OutputSlots):
    guider: Slot[Any]
    def __init__(self, node: "Node"):
        self.guider = Slot[Any](node, "GUIDER", 'GUIDER')

class DualCFGGuider(Node[DualCFGGuiderInputs, DualCFGGuiderOutputs]):
    """
    Original name: DualCFGGuider
    Category: sampling/custom_sampling/guiders
    

    Inputs:
        - model (Model)
        - cond1 (Conditioning)
        - cond2 (Conditioning)
        - negative (Conditioning)
        - cfg_conds (float) (default: 8.0)
        - cfg_cond2_negative (float) (default: 8.0)

    Outputs:
        - guider (Any)
    """
    _original_name: str = 'DualCFGGuider'

    def __init__(self, model: Slot[Model], cond1: Slot[Conditioning], cond2: Slot[Conditioning], negative: Slot[Conditioning], cfg_conds: float = 8.0, cfg_cond2_negative: float = 8.0):
        super().__init__(**{"model": model, "cond1": cond1, "cond2": cond2, "negative": negative, "cfg_conds": cfg_conds, "cfg_cond2_negative": cfg_cond2_negative})
        self.inputs = DualCFGGuiderInputs(self)
        self.outputs = DualCFGGuiderOutputs(self)
