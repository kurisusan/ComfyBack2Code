
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for PixelOEPixelize_
class PixelOEPixelize_Inputs(InputSlots):
    image: Slot[Image]
    downscale_mode: Slot[str]
    target_size: Slot[int]
    patch_size: Slot[int]
    thickness: Slot[int]
    color_matching: Slot[bool]
    upscale: Slot[bool]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.downscale_mode = Slot[str](node, "downscale_mode", ['contrast', 'bicubic', 'nearest', 'center', 'k-centroid'])
        self.target_size = Slot[int](node, "target_size", 'INT')
        self.patch_size = Slot[int](node, "patch_size", 'INT')
        self.thickness = Slot[int](node, "thickness", 'INT')
        self.color_matching = Slot[bool](node, "color_matching", 'BOOLEAN')
        self.upscale = Slot[bool](node, "upscale", 'BOOLEAN')

class PixelOEPixelize_Outputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class PixelOEPixelize_(Node[PixelOEPixelize_Inputs, PixelOEPixelize_Outputs]):
    """
    Original name: PixelOEPixelize+
    No description available.
    """
    _original_name: str = 'PixelOEPixelize+'

    def __init__(self, image: Slot[Image], downscale_mode: str, target_size: int = 128, patch_size: int = 16, thickness: int = 2, color_matching: bool = True, upscale: bool = True):
        super().__init__(**{"image": image, "downscale_mode": downscale_mode, "target_size": target_size, "patch_size": patch_size, "thickness": thickness, "color_matching": color_matching, "upscale": upscale})
        self.inputs = PixelOEPixelize_Inputs(self)
        self.outputs = PixelOEPixelize_Outputs(self)
