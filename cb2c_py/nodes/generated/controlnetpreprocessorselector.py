
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node

class ControlNetPreprocessorSelector(Node):
    """
    Original name: ControlNetPreprocessorSelector
    No description available.
    """
    _inputs = {
    "preprocessor": [
        [
            "none",
            "BAE-NormalMapPreprocessor",
            "OneFormer-COCO-SemSegPreprocessor",
            "OneFormer-ADE20K-SemSegPreprocessor",
            "TilePreprocessor",
            "TTPlanet_TileGF_Preprocessor",
            "TTPlanet_TileSimple_Preprocessor",
            "SAMPreprocessor",
            "AnyLineArtPreprocessor_aux",
            "DepthAnythingV2Preprocessor",
            "LineartStandardPreprocessor",
            "ImageLuminanceDetector",
            "ImageIntensityDetector",
            "AnimeLineArtPreprocessor",
            "DensePosePreprocessor",
            "PiDiNetPreprocessor",
            "DWPreprocessor",
            "AnimalPosePreprocessor",
            "ShufflePreprocessor",
            "Zoe-DepthMapPreprocessor",
            "ScribblePreprocessor",
            "Scribble_XDoG_Preprocessor",
            "Scribble_PiDiNet_Preprocessor",
            "DepthAnythingPreprocessor",
            "Zoe_DepthAnythingPreprocessor",
            "DSINE-NormalMapPreprocessor",
            "PyraCannyPreprocessor",
            "Manga2Anime_LineArt_Preprocessor",
            "MeshGraphormer-DepthMapPreprocessor",
            "Metric3D-DepthMapPreprocessor",
            "Metric3D-NormalMapPreprocessor",
            "UniFormer-SemSegPreprocessor",
            "SemSegPreprocessor",
            "CannyEdgePreprocessor",
            "ColorPreprocessor",
            "BinaryPreprocessor",
            "M-LSDPreprocessor",
            "MiDaS-NormalMapPreprocessor",
            "MiDaS-DepthMapPreprocessor",
            "AnimeFace_SemSegPreprocessor",
            "LeReS-DepthMapPreprocessor",
            "TEEDPreprocessor",
            "OpenposePreprocessor",
            "HEDPreprocessor",
            "FakeScribblePreprocessor",
            "MediaPipe-FaceMeshPreprocessor",
            "LineArtPreprocessor"
        ]
    ]
}
    _outputs = [
    [
        "none",
        "BAE-NormalMapPreprocessor",
        "OneFormer-COCO-SemSegPreprocessor",
        "OneFormer-ADE20K-SemSegPreprocessor",
        "TilePreprocessor",
        "TTPlanet_TileGF_Preprocessor",
        "TTPlanet_TileSimple_Preprocessor",
        "SAMPreprocessor",
        "AnyLineArtPreprocessor_aux",
        "DepthAnythingV2Preprocessor",
        "LineartStandardPreprocessor",
        "ImageLuminanceDetector",
        "ImageIntensityDetector",
        "AnimeLineArtPreprocessor",
        "DensePosePreprocessor",
        "PiDiNetPreprocessor",
        "DWPreprocessor",
        "AnimalPosePreprocessor",
        "ShufflePreprocessor",
        "Zoe-DepthMapPreprocessor",
        "ScribblePreprocessor",
        "Scribble_XDoG_Preprocessor",
        "Scribble_PiDiNet_Preprocessor",
        "DepthAnythingPreprocessor",
        "Zoe_DepthAnythingPreprocessor",
        "DSINE-NormalMapPreprocessor",
        "PyraCannyPreprocessor",
        "Manga2Anime_LineArt_Preprocessor",
        "MeshGraphormer-DepthMapPreprocessor",
        "Metric3D-DepthMapPreprocessor",
        "Metric3D-NormalMapPreprocessor",
        "UniFormer-SemSegPreprocessor",
        "SemSegPreprocessor",
        "CannyEdgePreprocessor",
        "ColorPreprocessor",
        "BinaryPreprocessor",
        "M-LSDPreprocessor",
        "MiDaS-NormalMapPreprocessor",
        "MiDaS-DepthMapPreprocessor",
        "AnimeFace_SemSegPreprocessor",
        "LeReS-DepthMapPreprocessor",
        "TEEDPreprocessor",
        "OpenposePreprocessor",
        "HEDPreprocessor",
        "FakeScribblePreprocessor",
        "MediaPipe-FaceMeshPreprocessor",
        "LineArtPreprocessor"
    ]
]
    _original_name = "ControlNetPreprocessorSelector"

    def __init__(self, preprocessor):
        super().__init__(preprocessor=preprocessor)

    @classmethod
    def get_inputs(cls):
        return cls._inputs

    @classmethod
    def get_outputs(cls):
        return cls._outputs
