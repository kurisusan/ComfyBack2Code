
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node

class CreateFadeMask(Node):
    """
    Original name: CreateFadeMask
    No description available.
    """
    _inputs = {
    "invert": [
        "BOOLEAN",
        {
            "default": False
        }
    ],
    "frames": [
        "INT",
        {
            "default": 2,
            "min": 2,
            "max": 10000,
            "step": 1
        }
    ],
    "width": [
        "INT",
        {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
        }
    ],
    "height": [
        "INT",
        {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
        }
    ],
    "interpolation": [
        [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
        ]
    ],
    "start_level": [
        "FLOAT",
        {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
        }
    ],
    "midpoint_level": [
        "FLOAT",
        {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
        }
    ],
    "end_level": [
        "FLOAT",
        {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
        }
    ],
    "midpoint_frame": [
        "INT",
        {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
        }
    ]
}
    _outputs = [
    "MASK"
]
    _original_name = "CreateFadeMask"

    def __init__(self, interpolation, invert=False, frames=2, width=256, height=256, start_level=1.0, midpoint_level=0.5, end_level=0.0, midpoint_frame=0):
        super().__init__(invert=invert, frames=frames, width=width, height=height, interpolation=interpolation, start_level=start_level, midpoint_level=midpoint_level, end_level=end_level, midpoint_frame=midpoint_frame)

    @classmethod
    def get_inputs(cls):
        return cls._inputs

    @classmethod
    def get_outputs(cls):
        return cls._outputs
