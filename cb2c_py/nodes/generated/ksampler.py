
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node

class KSampler(Node):
    """
    Original name: KSampler
    No description available.
    """
    _inputs = {
    "model": [
        "MODEL",
        {
            "tooltip": "The model used for denoising the input latent."
        }
    ],
    "seed": [
        "INT",
        {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "control_after_generate": True,
            "tooltip": "The random seed used for creating the noise."
        }
    ],
    "steps": [
        "INT",
        {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "The number of steps used in the denoising process."
        }
    ],
    "cfg": [
        "FLOAT",
        {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01,
            "tooltip": "The Classifier-Free Guidance scale balances creativity and adherence to the prompt. Higher values result in images more closely matching the prompt however too high values will negatively impact quality."
        }
    ],
    "sampler_name": [
        [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "gradient_estimation_cfg_pp",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
        ],
        {
            "tooltip": "The algorithm used when sampling, this can affect the quality, speed, and style of the generated output."
        }
    ],
    "scheduler": [
        [
            "simple",
            "sgm_uniform",
            "karras",
            "exponential",
            "ddim_uniform",
            "beta",
            "normal",
            "linear_quadratic",
            "kl_optimal"
        ],
        {
            "tooltip": "The scheduler controls how noise is gradually removed to form the image."
        }
    ],
    "positive": [
        "CONDITIONING",
        {
            "tooltip": "The conditioning describing the attributes you want to include in the image."
        }
    ],
    "negative": [
        "CONDITIONING",
        {
            "tooltip": "The conditioning describing the attributes you want to exclude from the image."
        }
    ],
    "latent_image": [
        "LATENT",
        {
            "tooltip": "The latent image to denoise."
        }
    ],
    "denoise": [
        "FLOAT",
        {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The amount of denoising applied, lower values will maintain the structure of the initial image allowing for image to image sampling."
        }
    ]
}
    _outputs = [
    "LATENT"
]
    _original_name = "KSampler"

    def __init__(self, model, sampler_name, scheduler, positive, negative, latent_image, seed=0, steps=20, cfg=8.0, denoise=1.0):
        super().__init__(model=model, seed=seed, steps=steps, cfg=cfg, sampler_name=sampler_name, scheduler=scheduler, positive=positive, negative=negative, latent_image=latent_image, denoise=denoise)

    @classmethod
    def get_inputs(cls):
        return cls._inputs

    @classmethod
    def get_outputs(cls):
        return cls._outputs
