
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ConditioningConcat
class ConditioningConcatInputs(InputSlots):
    conditioning_to: Slot[Conditioning]
    conditioning_from: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning_to = Slot[Conditioning](node, "conditioning_to", 'CONDITIONING')
        self.conditioning_from = Slot[Conditioning](node, "conditioning_from", 'CONDITIONING')

class ConditioningConcatOutputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class ConditioningConcat(Node[ConditioningConcatInputs, ConditioningConcatOutputs]):
    """
    Original name: ConditioningConcat
    Category: conditioning
    

    Inputs:
        - conditioning_to (Conditioning)
        - conditioning_from (Conditioning)

    Outputs:
        - conditioning (Conditioning)
    """
    _original_name: str = 'ConditioningConcat'

    def __init__(self, conditioning_to: Slot[Conditioning], conditioning_from: Slot[Conditioning]):
        super().__init__(**{"conditioning_to": conditioning_to, "conditioning_from": conditioning_from})
        self.inputs = ConditioningConcatInputs(self)
        self.outputs = ConditioningConcatOutputs(self)
