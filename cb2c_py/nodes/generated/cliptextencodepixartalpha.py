
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for CLIPTextEncodePixArtAlpha
class CLIPTextEncodePixArtAlphaInputs(InputSlots):
    width: Slot[Union[int, float]]
    height: Slot[Union[int, float]]
    text: Slot[str]
    clip: Slot[Clip]
    def __init__(self, node: "Node"):
        self.width = Slot[Union[int, float]](node, "width", 'INT')
        self.height = Slot[Union[int, float]](node, "height", 'INT')
        self.text = Slot[str](node, "text", 'STRING')
        self.clip = Slot[Clip](node, "clip", 'CLIP')

class CLIPTextEncodePixArtAlphaOutputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class CLIPTextEncodePixArtAlpha(Node[CLIPTextEncodePixArtAlphaInputs, CLIPTextEncodePixArtAlphaOutputs]):
    """
    Original name: CLIPTextEncodePixArtAlpha
    No description available.
    """
    _original_name: str = 'CLIPTextEncodePixArtAlpha'

    def __init__(self, text: str, clip: Slot[Clip], width: Union[int, float] = 1024.0, height: Union[int, float] = 1024.0):
        super().__init__(**{"width": width, "height": height, "text": text, "clip": clip})
        self.inputs = CLIPTextEncodePixArtAlphaInputs(self)
        self.outputs = CLIPTextEncodePixArtAlphaOutputs(self)
