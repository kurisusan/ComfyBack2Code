
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for WanVideoPhantomEmbeds
class WanVideoPhantomEmbedsInputs(InputSlots):
    num_frames: Slot[int]
    phantom_latent_1: Slot[Latent]
    phantom_cfg_scale: Slot[float]
    phantom_start_percent: Slot[float]
    phantom_end_percent: Slot[float]
    def __init__(self, node: "Node"):
        self.num_frames = Slot[int](node, "num_frames", 'INT')
        self.phantom_latent_1 = Slot[Latent](node, "phantom_latent_1", 'LATENT')
        self.phantom_cfg_scale = Slot[float](node, "phantom_cfg_scale", 'FLOAT')
        self.phantom_start_percent = Slot[float](node, "phantom_start_percent", 'FLOAT')
        self.phantom_end_percent = Slot[float](node, "phantom_end_percent", 'FLOAT')

class WanVideoPhantomEmbedsOutputs(OutputSlots):
    image_embeds: Slot[Any]
    def __init__(self, node: "Node"):
        self.image_embeds = Slot[Any](node, "image_embeds", 'WANVIDIMAGE_EMBEDS')

class WanVideoPhantomEmbeds(Node[WanVideoPhantomEmbedsInputs, WanVideoPhantomEmbedsOutputs]):
    """
    Original name: WanVideoPhantomEmbeds
    Category: WanVideoWrapper
    

    Inputs:
        - num_frames (int) (default: 81)
          Number of frames to encode
        - phantom_latent_1 (Latent)
          reference latents for the phantom model
        - phantom_cfg_scale (float) (default: 5.0)
          CFG scale for the extra phantom cond pass
        - phantom_start_percent (float) (default: 0.0)
          Start percent of the phantom model
        - phantom_end_percent (float) (default: 1.0)
          End percent of the phantom model

    Outputs:
        - image_embeds (Any)
    """
    _original_name: str = 'WanVideoPhantomEmbeds'

    def __init__(self, phantom_latent_1: Slot[Latent], num_frames: int = 81, phantom_cfg_scale: float = 5.0, phantom_start_percent: float = 0.0, phantom_end_percent: float = 1.0):
        super().__init__(**{"num_frames": num_frames, "phantom_latent_1": phantom_latent_1, "phantom_cfg_scale": phantom_cfg_scale, "phantom_start_percent": phantom_start_percent, "phantom_end_percent": phantom_end_percent})
        self.inputs = WanVideoPhantomEmbedsInputs(self)
        self.outputs = WanVideoPhantomEmbedsOutputs(self)
