
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ConditioningSetTimestepRange
class ConditioningSetTimestepRangeInputs(InputSlots):
    conditioning: Slot[Conditioning]
    start: Slot[float]
    end: Slot[float]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "conditioning", 'CONDITIONING')
        self.start = Slot[float](node, "start", 'FLOAT')
        self.end = Slot[float](node, "end", 'FLOAT')

class ConditioningSetTimestepRangeOutputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class ConditioningSetTimestepRange(Node[ConditioningSetTimestepRangeInputs, ConditioningSetTimestepRangeOutputs]):
    """
    Original name: ConditioningSetTimestepRange
    Category: advanced/conditioning
    

    Inputs:
        - conditioning (Conditioning)
        - start (float) (default: 0.0)
        - end (float) (default: 1.0)

    Outputs:
        - conditioning (Conditioning)
    """
    _original_name: str = 'ConditioningSetTimestepRange'

    def __init__(self, conditioning: Slot[Conditioning], start: float = 0.0, end: float = 1.0):
        super().__init__(**{"conditioning": conditioning, "start": start, "end": end})
        self.inputs = ConditioningSetTimestepRangeInputs(self)
        self.outputs = ConditioningSetTimestepRangeOutputs(self)
