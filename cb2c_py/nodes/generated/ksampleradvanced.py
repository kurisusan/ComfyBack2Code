
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for KSamplerAdvanced
class KSamplerAdvancedInputs(InputSlots):
    model: Slot[Model]
    add_noise: Slot[str]
    noise_seed: Slot[int]
    steps: Slot[int]
    cfg: Slot[float]
    sampler_name: Slot[str]
    scheduler: Slot[str]
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    latent_image: Slot[Latent]
    start_at_step: Slot[int]
    end_at_step: Slot[int]
    return_with_leftover_noise: Slot[str]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.add_noise = Slot[str](node, "add_noise", ['enable', 'disable'])
        self.noise_seed = Slot[int](node, "noise_seed", 'INT')
        self.steps = Slot[int](node, "steps", 'INT')
        self.cfg = Slot[float](node, "cfg", 'FLOAT')
        self.sampler_name = Slot[str](node, "sampler_name", ['euler', 'euler_cfg_pp', 'euler_ancestral', 'euler_ancestral_cfg_pp', 'heun', 'heunpp2', 'dpm_2', 'dpm_2_ancestral', 'lms', 'dpm_fast', 'dpm_adaptive', 'dpmpp_2s_ancestral', 'dpmpp_2s_ancestral_cfg_pp', 'dpmpp_sde', 'dpmpp_sde_gpu', 'dpmpp_2m', 'dpmpp_2m_cfg_pp', 'dpmpp_2m_sde', 'dpmpp_2m_sde_gpu', 'dpmpp_3m_sde', 'dpmpp_3m_sde_gpu', 'ddpm', 'lcm', 'ipndm', 'ipndm_v', 'deis', 'res_multistep', 'res_multistep_cfg_pp', 'res_multistep_ancestral', 'res_multistep_ancestral_cfg_pp', 'gradient_estimation', 'gradient_estimation_cfg_pp', 'er_sde', 'seeds_2', 'seeds_3', 'ddim', 'uni_pc', 'uni_pc_bh2'])
        self.scheduler = Slot[str](node, "scheduler", ['simple', 'sgm_uniform', 'karras', 'exponential', 'ddim_uniform', 'beta', 'normal', 'linear_quadratic', 'kl_optimal'])
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')
        self.latent_image = Slot[Latent](node, "latent_image", 'LATENT')
        self.start_at_step = Slot[int](node, "start_at_step", 'INT')
        self.end_at_step = Slot[int](node, "end_at_step", 'INT')
        self.return_with_leftover_noise = Slot[str](node, "return_with_leftover_noise", ['disable', 'enable'])

class KSamplerAdvancedOutputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class KSamplerAdvanced(Node[KSamplerAdvancedInputs, KSamplerAdvancedOutputs]):
    """
    Original name: KSamplerAdvanced
    Category: sampling
    

    Inputs:
        - model (Model)
        - add_noise (str)
        - noise_seed (int) (default: 0)
        - steps (int) (default: 20)
        - cfg (float) (default: 8.0)
        - sampler_name (str)
        - scheduler (str)
        - positive (Conditioning)
        - negative (Conditioning)
        - latent_image (Latent)
        - start_at_step (int) (default: 0)
        - end_at_step (int) (default: 10000)
        - return_with_leftover_noise (str)

    Outputs:
        - latent (Latent)
    """
    _original_name: str = 'KSamplerAdvanced'

    def __init__(self, model: Slot[Model], add_noise: str, sampler_name: str, scheduler: str, positive: Slot[Conditioning], negative: Slot[Conditioning], latent_image: Slot[Latent], return_with_leftover_noise: str, noise_seed: int = 0, steps: int = 20, cfg: float = 8.0, start_at_step: int = 0, end_at_step: int = 10000):
        super().__init__(**{"model": model, "add_noise": add_noise, "noise_seed": noise_seed, "steps": steps, "cfg": cfg, "sampler_name": sampler_name, "scheduler": scheduler, "positive": positive, "negative": negative, "latent_image": latent_image, "start_at_step": start_at_step, "end_at_step": end_at_step, "return_with_leftover_noise": return_with_leftover_noise})
        self.inputs = KSamplerAdvancedInputs(self)
        self.outputs = KSamplerAdvancedOutputs(self)
