
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for BetaSamplingScheduler
class BetaSamplingSchedulerInputs(InputSlots):
    model: Slot[Model]
    steps: Slot[int]
    alpha: Slot[float]
    beta: Slot[float]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.steps = Slot[int](node, "steps", 'INT')
        self.alpha = Slot[float](node, "alpha", 'FLOAT')
        self.beta = Slot[float](node, "beta", 'FLOAT')

class BetaSamplingSchedulerOutputs(OutputSlots):
    sigmas: Slot[Any]
    def __init__(self, node: "Node"):
        self.sigmas = Slot[Any](node, "SIGMAS", 'SIGMAS')

class BetaSamplingScheduler(Node[BetaSamplingSchedulerInputs, BetaSamplingSchedulerOutputs]):
    """
    Original name: BetaSamplingScheduler
    Category: sampling/custom_sampling/schedulers
    

    Inputs:
        - model (Model)
        - steps (int) (default: 20)
        - alpha (float) (default: 0.6)
        - beta (float) (default: 0.6)

    Outputs:
        - sigmas (Any)
    """
    _original_name: str = 'BetaSamplingScheduler'

    def __init__(self, model: Slot[Model], steps: int = 20, alpha: float = 0.6, beta: float = 0.6):
        super().__init__(**{"model": model, "steps": steps, "alpha": alpha, "beta": beta})
        self.inputs = BetaSamplingSchedulerInputs(self)
        self.outputs = BetaSamplingSchedulerOutputs(self)
