
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for SkipLayerGuidanceSD3
class SkipLayerGuidanceSD3Inputs(InputSlots):
    model: Slot[Model]
    layers: Slot[str]
    scale: Slot[float]
    start_percent: Slot[float]
    end_percent: Slot[float]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.layers = Slot[str](node, "layers", 'STRING')
        self.scale = Slot[float](node, "scale", 'FLOAT')
        self.start_percent = Slot[float](node, "start_percent", 'FLOAT')
        self.end_percent = Slot[float](node, "end_percent", 'FLOAT')

class SkipLayerGuidanceSD3Outputs(OutputSlots):
    model: Slot[Model]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "MODEL", 'MODEL')

class SkipLayerGuidanceSD3(Node[SkipLayerGuidanceSD3Inputs, SkipLayerGuidanceSD3Outputs]):
    """
    Original name: SkipLayerGuidanceSD3
    No description available.
    """
    _original_name: str = 'SkipLayerGuidanceSD3'

    def __init__(self, model: Slot[Model], layers: str = '7, 8, 9', scale: float = 3.0, start_percent: float = 0.01, end_percent: float = 0.15):
        super().__init__(**{"model": model, "layers": layers, "scale": scale, "start_percent": start_percent, "end_percent": end_percent})
        self.inputs = SkipLayerGuidanceSD3Inputs(self)
        self.outputs = SkipLayerGuidanceSD3Outputs(self)
