
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ApplyCLIPSeg_
class ApplyCLIPSeg_Inputs(InputSlots):
    clip_seg: Slot[Any]
    image: Slot[Image]
    prompt: Slot[str]
    threshold: Slot[float]
    smooth: Slot[int]
    dilate: Slot[int]
    blur: Slot[int]
    def __init__(self, node: "Node"):
        self.clip_seg = Slot[Any](node, "clip_seg", 'CLIP_SEG')
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.prompt = Slot[str](node, "prompt", 'STRING')
        self.threshold = Slot[float](node, "threshold", 'FLOAT')
        self.smooth = Slot[int](node, "smooth", 'INT')
        self.dilate = Slot[int](node, "dilate", 'INT')
        self.blur = Slot[int](node, "blur", 'INT')

class ApplyCLIPSeg_Outputs(OutputSlots):
    mask: Slot[Image]
    def __init__(self, node: "Node"):
        self.mask = Slot[Image](node, "MASK", 'MASK')

class ApplyCLIPSeg_(Node[ApplyCLIPSeg_Inputs, ApplyCLIPSeg_Outputs]):
    """
    Original name: ApplyCLIPSeg+
    No description available.
    """
    _original_name: str = 'ApplyCLIPSeg+'

    def __init__(self, clip_seg: Slot[Any], image: Slot[Image], prompt: str = '', threshold: float = 0.4, smooth: int = 9, dilate: int = 0, blur: int = 0):
        super().__init__(**{"clip_seg": clip_seg, "image": image, "prompt": prompt, "threshold": threshold, "smooth": smooth, "dilate": dilate, "blur": blur})
        self.inputs = ApplyCLIPSeg_Inputs(self)
        self.outputs = ApplyCLIPSeg_Outputs(self)
