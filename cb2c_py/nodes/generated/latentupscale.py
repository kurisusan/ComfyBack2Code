
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for LatentUpscale
class LatentUpscaleInputs(InputSlots):
    samples: Slot[Latent]
    upscale_method: Slot[str]
    width: Slot[int]
    height: Slot[int]
    crop: Slot[str]
    def __init__(self, node: "Node"):
        self.samples = Slot[Latent](node, "samples", 'LATENT')
        self.upscale_method = Slot[str](node, "upscale_method", ['nearest-exact', 'bilinear', 'area', 'bicubic', 'bislerp'])
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.crop = Slot[str](node, "crop", ['disabled', 'center'])

class LatentUpscaleOutputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class LatentUpscale(Node[LatentUpscaleInputs, LatentUpscaleOutputs]):
    """
    Original name: LatentUpscale
    No description available.
    """
    _original_name: str = 'LatentUpscale'

    def __init__(self, samples: Slot[Latent], upscale_method: str, crop: str, width: int = 512, height: int = 512):
        super().__init__(**{"samples": samples, "upscale_method": upscale_method, "width": width, "height": height, "crop": crop})
        self.inputs = LatentUpscaleInputs(self)
        self.outputs = LatentUpscaleOutputs(self)
