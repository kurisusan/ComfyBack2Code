
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for RecraftTextToImageNode
class RecraftTextToImageNodeInputs(InputSlots):
    prompt: Slot[str]
    size: Slot[str]
    n: Slot[int]
    seed: Slot[int]
    def __init__(self, node: "Node"):
        self.prompt = Slot[str](node, "prompt", 'STRING')
        self.size = Slot[str](node, "size", ['1024x1024', '1365x1024', '1024x1365', '1536x1024', '1024x1536', '1820x1024', '1024x1820', '1024x2048', '2048x1024', '1434x1024', '1024x1434', '1024x1280', '1280x1024', '1024x1707', '1707x1024'])
        self.n = Slot[int](node, "n", 'INT')
        self.seed = Slot[int](node, "seed", 'INT')

class RecraftTextToImageNodeOutputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class RecraftTextToImageNode(Node[RecraftTextToImageNodeInputs, RecraftTextToImageNodeOutputs]):
    """
    Original name: RecraftTextToImageNode
    No description available.
    """
    _original_name: str = 'RecraftTextToImageNode'

    def __init__(self, prompt: str = '', size: str = '1024x1024', n: int = 1, seed: int = 0):
        super().__init__(**{"prompt": prompt, "size": size, "n": n, "seed": seed})
        self.inputs = RecraftTextToImageNodeInputs(self)
        self.outputs = RecraftTextToImageNodeOutputs(self)
