
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for CLIPTextEncodeSDXL
class CLIPTextEncodeSDXLInputs(InputSlots):
    clip: Slot[Clip]
    width: Slot[Union[int, float]]
    height: Slot[Union[int, float]]
    crop_w: Slot[int]
    crop_h: Slot[int]
    target_width: Slot[Union[int, float]]
    target_height: Slot[Union[int, float]]
    text_g: Slot[str]
    text_l: Slot[str]
    def __init__(self, node: "Node"):
        self.clip = Slot[Clip](node, "clip", 'CLIP')
        self.width = Slot[Union[int, float]](node, "width", 'INT')
        self.height = Slot[Union[int, float]](node, "height", 'INT')
        self.crop_w = Slot[int](node, "crop_w", 'INT')
        self.crop_h = Slot[int](node, "crop_h", 'INT')
        self.target_width = Slot[Union[int, float]](node, "target_width", 'INT')
        self.target_height = Slot[Union[int, float]](node, "target_height", 'INT')
        self.text_g = Slot[str](node, "text_g", 'STRING')
        self.text_l = Slot[str](node, "text_l", 'STRING')

class CLIPTextEncodeSDXLOutputs(OutputSlots):
    conditioning: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.conditioning = Slot[Conditioning](node, "CONDITIONING", 'CONDITIONING')

class CLIPTextEncodeSDXL(Node[CLIPTextEncodeSDXLInputs, CLIPTextEncodeSDXLOutputs]):
    """
    Original name: CLIPTextEncodeSDXL
    No description available.
    """
    _original_name: str = 'CLIPTextEncodeSDXL'

    def __init__(self, clip: Slot[Clip], text_g: str, text_l: str, width: Union[int, float] = 1024.0, height: Union[int, float] = 1024.0, crop_w: int = 0, crop_h: int = 0, target_width: Union[int, float] = 1024.0, target_height: Union[int, float] = 1024.0):
        super().__init__(**{"clip": clip, "width": width, "height": height, "crop_w": crop_w, "crop_h": crop_h, "target_width": target_width, "target_height": target_height, "text_g": text_g, "text_l": text_l})
        self.inputs = CLIPTextEncodeSDXLInputs(self)
        self.outputs = CLIPTextEncodeSDXLOutputs(self)
