
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for GenerateNoise
class GenerateNoiseInputs(InputSlots):
    width: Slot[int]
    height: Slot[int]
    batch_size: Slot[int]
    seed: Slot[int]
    multiplier: Slot[float]
    constant_batch_noise: Slot[bool]
    normalize: Slot[bool]
    def __init__(self, node: "Node"):
        self.width = Slot[int](node, "width", 'INT')
        self.height = Slot[int](node, "height", 'INT')
        self.batch_size = Slot[int](node, "batch_size", 'INT')
        self.seed = Slot[int](node, "seed", 'INT')
        self.multiplier = Slot[float](node, "multiplier", 'FLOAT')
        self.constant_batch_noise = Slot[bool](node, "constant_batch_noise", 'BOOLEAN')
        self.normalize = Slot[bool](node, "normalize", 'BOOLEAN')

class GenerateNoiseOutputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class GenerateNoise(Node[GenerateNoiseInputs, GenerateNoiseOutputs]):
    """
    Original name: GenerateNoise
    No description available.
    """
    _original_name: str = 'GenerateNoise'

    def __init__(self, width: int = 512, height: int = 512, batch_size: int = 1, seed: int = 123, multiplier: float = 1.0, constant_batch_noise: bool = False, normalize: bool = False):
        super().__init__(**{"width": width, "height": height, "batch_size": batch_size, "seed": seed, "multiplier": multiplier, "constant_batch_noise": constant_batch_noise, "normalize": normalize})
        self.inputs = GenerateNoiseInputs(self)
        self.outputs = GenerateNoiseOutputs(self)
