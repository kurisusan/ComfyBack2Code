
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List

# Define input and output slot classes for RegexReplace
class RegexReplaceInputs(InputSlots):
    string: Slot[str]
    regex_pattern: Slot[str]
    replace: Slot[str]
    def __init__(self, node: "Node"):
        self.string = Slot[str](node, "string", 'STRING')
        self.regex_pattern = Slot[str](node, "regex_pattern", 'STRING')
        self.replace = Slot[str](node, "replace", 'STRING')

class RegexReplaceOutputs(OutputSlots):
    string: Slot[str]
    def __init__(self, node: "Node"):
        self.string = Slot[str](node, "STRING", 'STRING')

class RegexReplace(Node[RegexReplaceInputs, RegexReplaceOutputs]):
    """
    Original name: RegexReplace
    No description available.
    """
    _original_name: str = 'RegexReplace'

    def __init__(self, string: str, regex_pattern: str, replace: str):
        super().__init__(**{"string": string, "regex_pattern": regex_pattern, "replace": replace})
        self.inputs = RegexReplaceInputs(self)
        self.outputs = RegexReplaceOutputs(self)
