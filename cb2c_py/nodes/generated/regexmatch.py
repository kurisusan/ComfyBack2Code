
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for RegexMatch
class RegexMatchInputs(InputSlots):
    string: Slot[str]
    regex_pattern: Slot[str]
    case_insensitive: Slot[bool]
    multiline: Slot[bool]
    dotall: Slot[bool]
    def __init__(self, node: "Node"):
        self.string = Slot[str](node, "string", 'STRING')
        self.regex_pattern = Slot[str](node, "regex_pattern", 'STRING')
        self.case_insensitive = Slot[bool](node, "case_insensitive", 'BOOLEAN')
        self.multiline = Slot[bool](node, "multiline", 'BOOLEAN')
        self.dotall = Slot[bool](node, "dotall", 'BOOLEAN')

class RegexMatchOutputs(OutputSlots):
    matches: Slot[bool]
    def __init__(self, node: "Node"):
        self.matches = Slot[bool](node, "matches", 'BOOLEAN')

class RegexMatch(Node[RegexMatchInputs, RegexMatchOutputs]):
    """
    Original name: RegexMatch
    Category: utils/string
    

    Inputs:
        - string (str)
        - regex_pattern (str)
        - case_insensitive (bool) (default: True)
        - multiline (bool) (default: False)
        - dotall (bool) (default: False)

    Outputs:
        - matches (bool)
    """
    _original_name: str = 'RegexMatch'

    def __init__(self, string: str, regex_pattern: str, case_insensitive: bool = True, multiline: bool = False, dotall: bool = False):
        super().__init__(**{"string": string, "regex_pattern": regex_pattern, "case_insensitive": case_insensitive, "multiline": multiline, "dotall": dotall})
        self.inputs = RegexMatchInputs(self)
        self.outputs = RegexMatchOutputs(self)
