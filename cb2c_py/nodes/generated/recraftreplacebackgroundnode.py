
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for RecraftReplaceBackgroundNode
class RecraftReplaceBackgroundNodeInputs(InputSlots):
    image: Slot[Image]
    prompt: Slot[str]
    n: Slot[int]
    seed: Slot[int]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "image", 'IMAGE')
        self.prompt = Slot[str](node, "prompt", 'STRING')
        self.n = Slot[int](node, "n", 'INT')
        self.seed = Slot[int](node, "seed", 'INT')

class RecraftReplaceBackgroundNodeOutputs(OutputSlots):
    image: Slot[Image]
    def __init__(self, node: "Node"):
        self.image = Slot[Image](node, "IMAGE", 'IMAGE')

class RecraftReplaceBackgroundNode(Node[RecraftReplaceBackgroundNodeInputs, RecraftReplaceBackgroundNodeOutputs]):
    """
    Original name: RecraftReplaceBackgroundNode
    Category: api node/image/Recraft
    Replace background on image, based on provided prompt.

    Inputs:
        - image (Image)
        - prompt (str) (default: '')
          Prompt for the image generation.
        - n (int) (default: 1)
          The number of images to generate.
        - seed (int) (default: 0)
          Seed to determine if node should re-run; actual results are nondeterministic regardless of seed.

    Outputs:
        - image (Image)
    """
    _original_name: str = 'RecraftReplaceBackgroundNode'

    def __init__(self, image: Slot[Image], prompt: str = '', n: int = 1, seed: int = 0):
        super().__init__(**{"image": image, "prompt": prompt, "n": n, "seed": seed})
        self.inputs = RecraftReplaceBackgroundNodeInputs(self)
        self.outputs = RecraftReplaceBackgroundNodeOutputs(self)
