
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ScheduledCFGGuidance
class ScheduledCFGGuidanceInputs(InputSlots):
    model: Slot[Model]
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    cfg: Slot[float]
    start_percent: Slot[float]
    end_percent: Slot[float]
    def __init__(self, node: "Node"):
        self.model = Slot[Model](node, "model", 'MODEL')
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')
        self.cfg = Slot[float](node, "cfg", 'FLOAT')
        self.start_percent = Slot[float](node, "start_percent", 'FLOAT')
        self.end_percent = Slot[float](node, "end_percent", 'FLOAT')

class ScheduledCFGGuidanceOutputs(OutputSlots):
    guider: Slot[Any]
    def __init__(self, node: "Node"):
        self.guider = Slot[Any](node, "GUIDER", 'GUIDER')

class ScheduledCFGGuidance(Node[ScheduledCFGGuidanceInputs, ScheduledCFGGuidanceOutputs]):
    """
    Original name: ScheduledCFGGuidance
    No description available.
    """
    _original_name: str = 'ScheduledCFGGuidance'

    def __init__(self, model: Slot[Model], positive: Slot[Conditioning], negative: Slot[Conditioning], cfg: float = 6.0, start_percent: float = 0.0, end_percent: float = 1.0):
        super().__init__(**{"model": model, "positive": positive, "negative": negative, "cfg": cfg, "start_percent": start_percent, "end_percent": end_percent})
        self.inputs = ScheduledCFGGuidanceInputs(self)
        self.outputs = ScheduledCFGGuidanceOutputs(self)
