
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for ExtendIntermediateSigmas
class ExtendIntermediateSigmasInputs(InputSlots):
    sigmas: Slot[Any]
    steps: Slot[int]
    start_at_sigma: Slot[float]
    end_at_sigma: Slot[float]
    spacing: Slot[str]
    def __init__(self, node: "Node"):
        self.sigmas = Slot[Any](node, "sigmas", 'SIGMAS')
        self.steps = Slot[int](node, "steps", 'INT')
        self.start_at_sigma = Slot[float](node, "start_at_sigma", 'FLOAT')
        self.end_at_sigma = Slot[float](node, "end_at_sigma", 'FLOAT')
        self.spacing = Slot[str](node, "spacing", ['linear', 'cosine', 'sine'])

class ExtendIntermediateSigmasOutputs(OutputSlots):
    sigmas: Slot[Any]
    def __init__(self, node: "Node"):
        self.sigmas = Slot[Any](node, "SIGMAS", 'SIGMAS')

class ExtendIntermediateSigmas(Node[ExtendIntermediateSigmasInputs, ExtendIntermediateSigmasOutputs]):
    """
    Original name: ExtendIntermediateSigmas
    Category: sampling/custom_sampling/sigmas
    

    Inputs:
        - sigmas (Any)
        - steps (int) (default: 2)
        - start_at_sigma (float) (default: -1.0)
        - end_at_sigma (float) (default: 12.0)
        - spacing (str)

    Outputs:
        - sigmas (Any)
    """
    _original_name: str = 'ExtendIntermediateSigmas'

    def __init__(self, sigmas: Slot[Any], spacing: str, steps: int = 2, start_at_sigma: float = -1.0, end_at_sigma: float = 12.0):
        super().__init__(**{"sigmas": sigmas, "steps": steps, "start_at_sigma": start_at_sigma, "end_at_sigma": end_at_sigma, "spacing": spacing})
        self.inputs = ExtendIntermediateSigmasInputs(self)
        self.outputs = ExtendIntermediateSigmasOutputs(self)
