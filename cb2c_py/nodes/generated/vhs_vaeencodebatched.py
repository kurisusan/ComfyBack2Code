
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for VHS_VAEEncodeBatched
class VHS_VAEEncodeBatchedInputs(InputSlots):
    pixels: Slot[Image]
    vae: Slot[Vae]
    per_batch: Slot[int]
    def __init__(self, node: "Node"):
        self.pixels = Slot[Image](node, "pixels", 'IMAGE')
        self.vae = Slot[Vae](node, "vae", 'VAE')
        self.per_batch = Slot[int](node, "per_batch", 'INT')

class VHS_VAEEncodeBatchedOutputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class VHS_VAEEncodeBatched(Node[VHS_VAEEncodeBatchedInputs, VHS_VAEEncodeBatchedOutputs]):
    """
    Original name: VHS_VAEEncodeBatched
    No description available.
    """
    _original_name: str = 'VHS_VAEEncodeBatched'

    def __init__(self, pixels: Slot[Image], vae: Slot[Vae], per_batch: int = 16):
        super().__init__(**{"pixels": pixels, "vae": vae, "per_batch": per_batch})
        self.inputs = VHS_VAEEncodeBatchedInputs(self)
        self.outputs = VHS_VAEEncodeBatchedOutputs(self)
