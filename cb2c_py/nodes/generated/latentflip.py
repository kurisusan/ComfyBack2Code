
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for LatentFlip
class LatentFlipInputs(InputSlots):
    samples: Slot[Latent]
    flip_method: Slot[str]
    def __init__(self, node: "Node"):
        self.samples = Slot[Latent](node, "samples", 'LATENT')
        self.flip_method = Slot[str](node, "flip_method", ['x-axis: vertically', 'y-axis: horizontally'])

class LatentFlipOutputs(OutputSlots):
    latent: Slot[Latent]
    def __init__(self, node: "Node"):
        self.latent = Slot[Latent](node, "LATENT", 'LATENT')

class LatentFlip(Node[LatentFlipInputs, LatentFlipOutputs]):
    """
    Original name: LatentFlip
    Category: latent/transform
    

    Inputs:
        - samples (Latent)
        - flip_method (str)

    Outputs:
        - latent (Latent)
    """
    _original_name: str = 'LatentFlip'

    def __init__(self, samples: Slot[Latent], flip_method: str):
        super().__init__(**{"samples": samples, "flip_method": flip_method})
        self.inputs = LatentFlipInputs(self)
        self.outputs = LatentFlipOutputs(self)
