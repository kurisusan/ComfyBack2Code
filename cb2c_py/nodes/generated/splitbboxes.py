
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for SplitBboxes
class SplitBboxesInputs(InputSlots):
    bboxes: Slot[Any]
    index: Slot[int]
    def __init__(self, node: "Node"):
        self.bboxes = Slot[Any](node, "bboxes", 'BBOX')
        self.index = Slot[int](node, "index", 'INT')

class SplitBboxesOutputs(OutputSlots):
    bboxes_a: Slot[Any]
    bboxes_b: Slot[Any]
    def __init__(self, node: "Node"):
        self.bboxes_a = Slot[Any](node, "bboxes_a", 'BBOX')
        self.bboxes_b = Slot[Any](node, "bboxes_b", 'BBOX')

class SplitBboxes(Node[SplitBboxesInputs, SplitBboxesOutputs]):
    """
    Original name: SplitBboxes
    Category: KJNodes/masking
    
Splits the specified bbox list at the given index into two lists.


    Inputs:
        - bboxes (Any)
        - index (int) (default: 0)

    Outputs:
        - bboxes_a (Any)
        - bboxes_b (Any)
    """
    _original_name: str = 'SplitBboxes'

    def __init__(self, bboxes: Slot[Any], index: int = 0):
        super().__init__(**{"bboxes": bboxes, "index": index})
        self.inputs = SplitBboxesInputs(self)
        self.outputs = SplitBboxesOutputs(self)
