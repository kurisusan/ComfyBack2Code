
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for LatentOperationSharpen
class LatentOperationSharpenInputs(InputSlots):
    sharpen_radius: Slot[int]
    sigma: Slot[float]
    alpha: Slot[float]
    def __init__(self, node: "Node"):
        self.sharpen_radius = Slot[int](node, "sharpen_radius", 'INT')
        self.sigma = Slot[float](node, "sigma", 'FLOAT')
        self.alpha = Slot[float](node, "alpha", 'FLOAT')

class LatentOperationSharpenOutputs(OutputSlots):
    latent_operation: Slot[Any]
    def __init__(self, node: "Node"):
        self.latent_operation = Slot[Any](node, "LATENT_OPERATION", 'LATENT_OPERATION')

class LatentOperationSharpen(Node[LatentOperationSharpenInputs, LatentOperationSharpenOutputs]):
    """
    Original name: LatentOperationSharpen
    No description available.
    """
    _original_name: str = 'LatentOperationSharpen'

    def __init__(self, sharpen_radius: int = 9, sigma: float = 1.0, alpha: float = 0.1):
        super().__init__(**{"sharpen_radius": sharpen_radius, "sigma": sigma, "alpha": alpha})
        self.inputs = LatentOperationSharpenInputs(self)
        self.outputs = LatentOperationSharpenOutputs(self)
