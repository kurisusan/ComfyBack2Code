
# This file is auto-generated by generate_nodes.py
# Do not edit this file directly.

from ..base_node import Node, InputSlots, OutputSlots, Slot, Model, Conditioning, Latent, Image, Vae, Clip
from typing import Dict, Any, List, Union

# Define input and output slot classes for LTXVConditioning
class LTXVConditioningInputs(InputSlots):
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    frame_rate: Slot[float]
    def __init__(self, node: "Node"):
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')
        self.frame_rate = Slot[float](node, "frame_rate", 'FLOAT')

class LTXVConditioningOutputs(OutputSlots):
    positive: Slot[Conditioning]
    negative: Slot[Conditioning]
    def __init__(self, node: "Node"):
        self.positive = Slot[Conditioning](node, "positive", 'CONDITIONING')
        self.negative = Slot[Conditioning](node, "negative", 'CONDITIONING')

class LTXVConditioning(Node[LTXVConditioningInputs, LTXVConditioningOutputs]):
    """
    Original name: LTXVConditioning
    Category: conditioning/video_models
    

    Inputs:
        - positive (Conditioning)
        - negative (Conditioning)
        - frame_rate (float) (default: 25.0)

    Outputs:
        - positive (Conditioning)
        - negative (Conditioning)
    """
    _original_name: str = 'LTXVConditioning'

    def __init__(self, positive: Slot[Conditioning], negative: Slot[Conditioning], frame_rate: float = 25.0):
        super().__init__(**{"positive": positive, "negative": negative, "frame_rate": frame_rate})
        self.inputs = LTXVConditioningInputs(self)
        self.outputs = LTXVConditioningOutputs(self)
